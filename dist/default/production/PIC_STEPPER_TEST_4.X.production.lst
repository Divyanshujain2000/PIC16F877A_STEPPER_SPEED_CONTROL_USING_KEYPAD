

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sat Dec 19 23:51:20 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	strings,global,class=STRING,delta=2,noexec
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 2.20
    47                           ; Generated 12/02/2020 GMT
    48                           ; 
    49                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F877A Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0088                     	;# 
   120  0089                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0094                     	;# 
   128  0098                     	;# 
   129  0099                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000D                     	;# 
   154  000E                     	;# 
   155  000E                     	;# 
   156  000F                     	;# 
   157  0010                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0013                     	;# 
   161  0014                     	;# 
   162  0015                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0017                     	;# 
   166  0018                     	;# 
   167  0019                     	;# 
   168  001A                     	;# 
   169  001B                     	;# 
   170  001B                     	;# 
   171  001C                     	;# 
   172  001D                     	;# 
   173  001E                     	;# 
   174  001F                     	;# 
   175  0081                     	;# 
   176  0085                     	;# 
   177  0086                     	;# 
   178  0087                     	;# 
   179  0088                     	;# 
   180  0089                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  018C                     	;# 
   199  018D                     	;# 
   200  0000                     	;# 
   201  0001                     	;# 
   202  0002                     	;# 
   203  0003                     	;# 
   204  0004                     	;# 
   205  0005                     	;# 
   206  0006                     	;# 
   207  0007                     	;# 
   208  0008                     	;# 
   209  0009                     	;# 
   210  000A                     	;# 
   211  000B                     	;# 
   212  000C                     	;# 
   213  000D                     	;# 
   214  000E                     	;# 
   215  000E                     	;# 
   216  000F                     	;# 
   217  0010                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0013                     	;# 
   221  0014                     	;# 
   222  0015                     	;# 
   223  0015                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001B                     	;# 
   231  001C                     	;# 
   232  001D                     	;# 
   233  001E                     	;# 
   234  001F                     	;# 
   235  0081                     	;# 
   236  0085                     	;# 
   237  0086                     	;# 
   238  0087                     	;# 
   239  0088                     	;# 
   240  0089                     	;# 
   241  008C                     	;# 
   242  008D                     	;# 
   243  008E                     	;# 
   244  0091                     	;# 
   245  0092                     	;# 
   246  0093                     	;# 
   247  0094                     	;# 
   248  0098                     	;# 
   249  0099                     	;# 
   250  009C                     	;# 
   251  009D                     	;# 
   252  009E                     	;# 
   253  009F                     	;# 
   254  010C                     	;# 
   255  010D                     	;# 
   256  010E                     	;# 
   257  010F                     	;# 
   258  018C                     	;# 
   259  018D                     	;# 
   260  0000                     	;# 
   261  0001                     	;# 
   262  0002                     	;# 
   263  0003                     	;# 
   264  0004                     	;# 
   265  0005                     	;# 
   266  0006                     	;# 
   267  0007                     	;# 
   268  0008                     	;# 
   269  0009                     	;# 
   270  000A                     	;# 
   271  000B                     	;# 
   272  000C                     	;# 
   273  000D                     	;# 
   274  000E                     	;# 
   275  000E                     	;# 
   276  000F                     	;# 
   277  0010                     	;# 
   278  0011                     	;# 
   279  0012                     	;# 
   280  0013                     	;# 
   281  0014                     	;# 
   282  0015                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001B                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  001D                     	;# 
   293  001E                     	;# 
   294  001F                     	;# 
   295  0081                     	;# 
   296  0085                     	;# 
   297  0086                     	;# 
   298  0087                     	;# 
   299  0088                     	;# 
   300  0089                     	;# 
   301  008C                     	;# 
   302  008D                     	;# 
   303  008E                     	;# 
   304  0091                     	;# 
   305  0092                     	;# 
   306  0093                     	;# 
   307  0094                     	;# 
   308  0098                     	;# 
   309  0099                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  009F                     	;# 
   314  010C                     	;# 
   315  010D                     	;# 
   316  010E                     	;# 
   317  010F                     	;# 
   318  018C                     	;# 
   319  018D                     	;# 
   320  0000                     	;# 
   321  0001                     	;# 
   322  0002                     	;# 
   323  0003                     	;# 
   324  0004                     	;# 
   325  0005                     	;# 
   326  0006                     	;# 
   327  0007                     	;# 
   328  0008                     	;# 
   329  0009                     	;# 
   330  000A                     	;# 
   331  000B                     	;# 
   332  000C                     	;# 
   333  000D                     	;# 
   334  000E                     	;# 
   335  000E                     	;# 
   336  000F                     	;# 
   337  0010                     	;# 
   338  0011                     	;# 
   339  0012                     	;# 
   340  0013                     	;# 
   341  0014                     	;# 
   342  0015                     	;# 
   343  0015                     	;# 
   344  0016                     	;# 
   345  0017                     	;# 
   346  0018                     	;# 
   347  0019                     	;# 
   348  001A                     	;# 
   349  001B                     	;# 
   350  001B                     	;# 
   351  001C                     	;# 
   352  001D                     	;# 
   353  001E                     	;# 
   354  001F                     	;# 
   355  0081                     	;# 
   356  0085                     	;# 
   357  0086                     	;# 
   358  0087                     	;# 
   359  0088                     	;# 
   360  0089                     	;# 
   361  008C                     	;# 
   362  008D                     	;# 
   363  008E                     	;# 
   364  0091                     	;# 
   365  0092                     	;# 
   366  0093                     	;# 
   367  0094                     	;# 
   368  0098                     	;# 
   369  0099                     	;# 
   370  009C                     	;# 
   371  009D                     	;# 
   372  009E                     	;# 
   373  009F                     	;# 
   374  010C                     	;# 
   375  010D                     	;# 
   376  010E                     	;# 
   377  010F                     	;# 
   378  018C                     	;# 
   379  018D                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0008                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  000E                     	;# 
   396  000F                     	;# 
   397  0010                     	;# 
   398  0011                     	;# 
   399  0012                     	;# 
   400  0013                     	;# 
   401  0014                     	;# 
   402  0015                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0017                     	;# 
   406  0018                     	;# 
   407  0019                     	;# 
   408  001A                     	;# 
   409  001B                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  001D                     	;# 
   413  001E                     	;# 
   414  001F                     	;# 
   415  0081                     	;# 
   416  0085                     	;# 
   417  0086                     	;# 
   418  0087                     	;# 
   419  0088                     	;# 
   420  0089                     	;# 
   421  008C                     	;# 
   422  008D                     	;# 
   423  008E                     	;# 
   424  0091                     	;# 
   425  0092                     	;# 
   426  0093                     	;# 
   427  0094                     	;# 
   428  0098                     	;# 
   429  0099                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  009F                     	;# 
   434  010C                     	;# 
   435  010D                     	;# 
   436  010E                     	;# 
   437  010F                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440                           
   441                           	psect	idataBANK0
   442  0F58                     __pidataBANK0:
   443                           
   444                           ;initializer for _keypad
   445  0F58  3437               	retlw	55
   446  0F59  3438               	retlw	56
   447  0F5A  3439               	retlw	57
   448  0F5B  342F               	retlw	47
   449  0F5C  3434               	retlw	52
   450  0F5D  3435               	retlw	53
   451  0F5E  3436               	retlw	54
   452  0F5F  3478               	retlw	120
   453  0F60  3431               	retlw	49
   454  0F61  3432               	retlw	50
   455  0F62  3433               	retlw	51
   456  0F63  342D               	retlw	45
   457  0F64  3453               	retlw	83
   458  0F65  3430               	retlw	48
   459  0F66  343D               	retlw	61
   460  0F67  342B               	retlw	43
   461                           
   462                           ;initializer for _FULL_STEP
   463  0F68  3409               	retlw	9
   464  0F69  3400               	retlw	0
   465  0F6A  340C               	retlw	12
   466  0F6B  3400               	retlw	0
   467  0F6C  3406               	retlw	6
   468  0F6D  3400               	retlw	0
   469  0F6E  3403               	retlw	3
   470  0F6F  3400               	retlw	0
   471                           
   472                           	psect	idataBANK1
   473  0F0E                     __pidataBANK1:
   474                           
   475                           ;initializer for _HALF_STEP
   476  0F0E  3408               	retlw	8
   477  0F0F  340C               	retlw	12
   478  0F10  3404               	retlw	4
   479  0F11  3406               	retlw	6
   480  0F12  3402               	retlw	2
   481  0F13  3403               	retlw	3
   482  0F14  3401               	retlw	1
   483  0F15  3409               	retlw	9
   484                           
   485                           ;initializer for _s
   486  0F16  3401               	retlw	1
   487  0F17  3400               	retlw	0
   488  0F18  3400               	retlw	0
   489  0F19  3400               	retlw	0
   490                           
   491                           	psect	idataBANK3
   492  07AC                     __pidataBANK3:
   493                           
   494                           ;initializer for ___cgram
   495  07AC  340C               	retlw	12
   496  07AD  3412               	retlw	18
   497  07AE  3412               	retlw	18
   498  07AF  340C               	retlw	12
   499  07B0  3400               	retlw	0
   500  07B1  3400               	retlw	0
   501  07B2  3400               	retlw	0
   502  07B3  3400               	retlw	0
   503  07B4  3400               	retlw	0
   504  07B5  3404               	retlw	4
   505  07B6  340E               	retlw	14
   506  07B7  341F               	retlw	31
   507  07B8  340E               	retlw	14
   508  07B9  3404               	retlw	4
   509  07BA  3400               	retlw	0
   510  07BB  3400               	retlw	0
   511  07BC  3404               	retlw	4
   512  07BD  3404               	retlw	4
   513  07BE  3404               	retlw	4
   514  07BF  3404               	retlw	4
   515  07C0  341F               	retlw	31
   516  07C1  340E               	retlw	14
   517  07C2  3404               	retlw	4
   518  07C3  3400               	retlw	0
   519  07C4  340A               	retlw	10
   520  07C5  3415               	retlw	21
   521  07C6  3411               	retlw	17
   522  07C7  340A               	retlw	10
   523  07C8  3404               	retlw	4
   524  07C9  3400               	retlw	0
   525  07CA  3400               	retlw	0
   526  07CB  3400               	retlw	0
   527  07CC  340A               	retlw	10
   528  07CD  341F               	retlw	31
   529  07CE  341F               	retlw	31
   530  07CF  340E               	retlw	14
   531  07D0  3404               	retlw	4
   532  07D1  3400               	retlw	0
   533  07D2  3400               	retlw	0
   534  07D3  3400               	retlw	0
   535  07D4  3400               	retlw	0
   536  07D5  3400               	retlw	0
   537  07D6  3400               	retlw	0
   538  07D7  3400               	retlw	0
   539  07D8  3400               	retlw	0
   540  07D9  3400               	retlw	0
   541  07DA  3400               	retlw	0
   542  07DB  3400               	retlw	0
   543  07DC  3400               	retlw	0
   544  07DD  3400               	retlw	0
   545  07DE  3400               	retlw	0
   546  07DF  3400               	retlw	0
   547  07E0  3400               	retlw	0
   548  07E1  3400               	retlw	0
   549  07E2  3400               	retlw	0
   550  07E3  3400               	retlw	0
   551  07E4  3400               	retlw	0
   552  07E5  3400               	retlw	0
   553  07E6  3400               	retlw	0
   554  07E7  3400               	retlw	0
   555  07E8  3400               	retlw	0
   556  07E9  3400               	retlw	0
   557  07EA  3400               	retlw	0
   558  07EB  3400               	retlw	0
   559                           
   560                           	psect	nvBANK1
   561  00CC                     __pnvBANK1:
   562  00CC                     _flag:
   563  00CC                     	ds	2
   564  0008                     _PORTD	set	8
   565  0007                     _PORTC	set	7
   566  0005                     _PORTA	set	5
   567  0042                     _RD2	set	66
   568  0043                     _RD3	set	67
   569  0041                     _RD1	set	65
   570  0037                     _RB7	set	55
   571  0036                     _RB6	set	54
   572  0035                     _RB5	set	53
   573  0034                     _RB4	set	52
   574  003B                     _RC3	set	59
   575  003A                     _RC2	set	58
   576  0039                     _RC1	set	57
   577  0038                     _RC0	set	56
   578  005E                     _PEIE	set	94
   579  005C                     _INTE	set	92
   580  0059                     _INTF	set	89
   581  005F                     _GIE	set	95
   582  0088                     _TRISDbits	set	136
   583  0088                     _TRISD	set	136
   584  0086                     _TRISBbits	set	134
   585  0087                     _TRISCbits	set	135
   586  0081                     _OPTION_REGbits	set	129
   587  0081                     _OPTION_REG	set	129
   588  0086                     _TRISB	set	134
   589  0085                     _TRISA	set	133
   590                           
   591                           	psect	strings
   592  0800                     __pstrings:
   593  0800                     stringtab:
   594  0800                     __stringtab:
   595  0800                     stringcode:	
   596                           ;	String table - string pointers are 1 byte each
   597                           
   598  0800                     stringdir:
   599  0800  3008               	movlw	high stringdir
   600  0801  008A               	movwf	10
   601  0802  0804               	movf	4,w
   602  0803  0A84               	incf	4,f
   603  0804  0782               	addwf	2,f
   604  0805                     __stringbase:
   605  0805  3400               	retlw	0
   606  0806                     __end_of__stringtab:
   607  0806                     STR_1:
   608  0806  3445               	retlw	69	;'E'
   609  0807  344E               	retlw	78	;'N'
   610  0808  3454               	retlw	84	;'T'
   611  0809  3445               	retlw	69	;'E'
   612  080A  3452               	retlw	82	;'R'
   613  080B  3420               	retlw	32	;' '
   614  080C  3452               	retlw	82	;'R'
   615  080D  3450               	retlw	80	;'P'
   616  080E  344D               	retlw	77	;'M'
   617  080F  3400               	retlw	0
   618  0810                     STR_4:
   619  0810  3456               	retlw	86	;'V'
   620  0811  3441               	retlw	65	;'A'
   621  0812  344C               	retlw	76	;'L'
   622  0813  3455               	retlw	85	;'U'
   623  0814  3445               	retlw	69	;'E'
   624  0815  343A               	retlw	58	;':'
   625  0816  3420               	retlw	32	;' '
   626  0817  3400               	retlw	0
   627  0818                     STR_3:
   628  0818  3453               	retlw	83	;'S'
   629  0819  3454               	retlw	84	;'T'
   630  081A  3441               	retlw	65	;'A'
   631  081B  3452               	retlw	82	;'R'
   632  081C  3454               	retlw	84	;'T'
   633  081D  3400               	retlw	0
   634  081E                     STR_2:
   635  081E  3453               	retlw	83	;'S'
   636  081F  3454               	retlw	84	;'T'
   637  0820  344F               	retlw	79	;'O'
   638  0821  3450               	retlw	80	;'P'
   639  0822  3400               	retlw	0
   640  0823                     STR_5:
   641  0823  3420               	retlw	32	;' '
   642  0824  3452               	retlw	82	;'R'
   643  0825  3470               	retlw	112	;'p'
   644  0826  346D               	retlw	109	;'m'
   645  0827  3400               	retlw	0
   646                           
   647                           	psect	cinit
   648  0015                     start_initialization:	
   649                           ; #config settings
   650                           
   651  0015                     __initialization:
   652                           
   653                           ; Initialize objects allocated to BANK3
   654  0015  1783               	bsf	3,7	;select IRP bank2
   655  0016  30D0               	movlw	low (__pdataBANK3+64)
   656  0017  00FD               	movwf	btemp+-1
   657  0018  3007               	movlw	high __pidataBANK3
   658  0019  00FE               	movwf	btemp
   659  001A  30AC               	movlw	low __pidataBANK3
   660  001B  00FF               	movwf	btemp+1
   661  001C  3090               	movlw	low __pdataBANK3
   662  001D  0084               	movwf	4
   663  001E  120A  118A  27F0  120A  118A  	fcall	init_ram0
   664                           
   665                           ; Initialize objects allocated to BANK1
   666  0023  1383               	bcf	3,7	;select IRP bank0
   667  0024  30CC               	movlw	low (__pdataBANK1+12)
   668  0025  00FD               	movwf	btemp+-1
   669  0026  300F               	movlw	high __pidataBANK1
   670  0027  00FE               	movwf	btemp
   671  0028  300E               	movlw	low __pidataBANK1
   672  0029  00FF               	movwf	btemp+1
   673  002A  30C0               	movlw	low __pdataBANK1
   674  002B  0084               	movwf	4
   675  002C  120A  118A  27F0  120A  118A  	fcall	init_ram0
   676                           
   677                           ; Initialize objects allocated to BANK0
   678  0031  3054               	movlw	low (__pdataBANK0+24)
   679  0032  00FD               	movwf	btemp+-1
   680  0033  300F               	movlw	high __pidataBANK0
   681  0034  00FE               	movwf	btemp
   682  0035  3058               	movlw	low __pidataBANK0
   683  0036  00FF               	movwf	btemp+1
   684  0037  303C               	movlw	low __pdataBANK0
   685  0038  0084               	movwf	4
   686  0039  120A  118A  27F0  120A  118A  	fcall	init_ram0
   687                           
   688                           ; Clear objects allocated to BANK0
   689  003E  01D4               	clrf	__pbssBANK0& (0+127)
   690  003F  01D5               	clrf	(__pbssBANK0+1)& (0+127)
   691  0040  01D6               	clrf	(__pbssBANK0+2)& (0+127)
   692  0041  01D7               	clrf	(__pbssBANK0+3)& (0+127)
   693  0042  01D8               	clrf	(__pbssBANK0+4)& (0+127)
   694  0043  01D9               	clrf	(__pbssBANK0+5)& (0+127)
   695  0044                     end_of_initialization:	
   696                           ;End of C runtime variable initialization code
   697                           
   698  0044                     __end_of__initialization:
   699  0044  0183               	clrf	3
   700  0045  120A  158A  2F89   	ljmp	_main	;jump to C main() function
   701                           
   702                           	psect	bssBANK0
   703  0054                     __pbssBANK0:
   704  0054                     LCDWriteInt@F912:
   705  0054                     	ds	5
   706  0059                     _a:
   707  0059                     	ds	1
   708                           
   709                           	psect	dataBANK0
   710  003C                     __pdataBANK0:
   711  003C                     _keypad:
   712  003C                     	ds	16
   713  004C                     _FULL_STEP:
   714  004C                     	ds	8
   715                           
   716                           	psect	dataBANK1
   717  00C0                     __pdataBANK1:
   718  00C0                     _HALF_STEP:
   719  00C0                     	ds	8
   720  00C8                     _s:
   721  00C8                     	ds	4
   722                           
   723                           	psect	dataBANK3
   724  0190                     __pdataBANK3:
   725  0190                     ___cgram:
   726  0190                     	ds	64
   727                           
   728                           	psect	inittext
   729  07EC                     init_fetch0:	
   730                           ;	Called with low address in FSR and high address in W
   731                           
   732  07EC  087E               	movf	btemp,w
   733  07ED  008A               	movwf	10
   734  07EE  087F               	movf	btemp+1,w
   735  07EF  0082               	movwf	2
   736  07F0                     init_ram0:	
   737                           ;Called with:
   738                           ;	high address of idata address in btemp 
   739                           ;	low address of idata address in btemp+1 
   740                           ;	low address of data in FSR
   741                           ;	high address + 1 of data in btemp-1
   742                           
   743  07F0  120A  118A  27EC  120A  118A  	fcall	init_fetch0
   744  07F5  0080               	movwf	0
   745  07F6  0A84               	incf	4,f
   746  07F7  0804               	movf	4,w
   747  07F8  067D               	xorwf	btemp+-1,w
   748  07F9  1903               	btfsc	3,2
   749  07FA  3400               	retlw	0
   750  07FB  0AFF               	incf	btemp+1,f
   751  07FC  1903               	btfsc	3,2
   752  07FD  0AFE               	incf	btemp,f
   753  07FE  2FF0               	goto	init_ram0
   754                           
   755                           	psect	cstackBANK1
   756  00A0                     __pcstackBANK1:
   757  00A0                     ??_INITH:
   758  00A0                     ??_LCDBusyLoop:	
   759                           ; 1 bytes @ 0x0
   760                           
   761  00A0                     ??_INITSTEPPER:	
   762                           ; 1 bytes @ 0x0
   763                           
   764  00A0                     ?___awmod:	
   765                           ; 1 bytes @ 0x0
   766                           
   767  00A0                     ?___aldiv:	
   768                           ; 2 bytes @ 0x0
   769                           
   770  00A0                     ___awmod@divisor:	
   771                           ; 4 bytes @ 0x0
   772                           
   773  00A0                     ___aldiv@divisor:	
   774                           ; 2 bytes @ 0x0
   775                           
   776                           
   777                           ; 4 bytes @ 0x0
   778  00A0                     	ds	2
   779  00A2                     LCDBusyLoop@busy:
   780  00A2                     ___awmod@dividend:	
   781                           ; 1 bytes @ 0x2
   782                           
   783                           
   784                           ; 2 bytes @ 0x2
   785  00A2                     	ds	1
   786  00A3                     LCDBusyLoop@temp:
   787                           
   788                           ; 1 bytes @ 0x3
   789  00A3                     	ds	1
   790  00A4                     ??___awmod:
   791  00A4                     LCDBusyLoop@status:	
   792                           ; 1 bytes @ 0x4
   793                           
   794  00A4                     ___aldiv@dividend:	
   795                           ; 1 bytes @ 0x4
   796                           
   797                           
   798                           ; 4 bytes @ 0x4
   799  00A4                     	ds	1
   800  00A5                     ?_LCDByte:
   801  00A5                     LCDByte@isdata:	
   802                           ; 1 bytes @ 0x5
   803                           
   804  00A5                     ___awmod@counter:	
   805                           ; 1 bytes @ 0x5
   806                           
   807                           
   808                           ; 1 bytes @ 0x5
   809  00A5                     	ds	1
   810  00A6                     ??_LCDByte:
   811  00A6                     ___awmod@sign:	
   812                           ; 1 bytes @ 0x6
   813                           
   814                           
   815                           ; 1 bytes @ 0x6
   816  00A6                     	ds	2
   817  00A8                     ??___aldiv:
   818  00A8                     LCDByte@hn:	
   819                           ; 1 bytes @ 0x8
   820                           
   821                           
   822                           ; 1 bytes @ 0x8
   823  00A8                     	ds	1
   824  00A9                     LCDByte@ln:
   825  00A9                     ___aldiv@counter:	
   826                           ; 1 bytes @ 0x9
   827                           
   828                           
   829                           ; 1 bytes @ 0x9
   830  00A9                     	ds	1
   831  00AA                     LCDByte@c:
   832  00AA                     ___aldiv@sign:	
   833                           ; 1 bytes @ 0xA
   834                           
   835                           
   836                           ; 1 bytes @ 0xA
   837  00AA                     	ds	1
   838  00AB                     LCDByte@temp:
   839  00AB                     ___aldiv@quotient:	
   840                           ; 1 bytes @ 0xB
   841                           
   842                           
   843                           ; 4 bytes @ 0xB
   844  00AB                     	ds	1
   845  00AC                     ??_LCDInit:
   846                           
   847                           ; 1 bytes @ 0xC
   848  00AC                     	ds	2
   849  00AE                     LCDInit@style:
   850                           
   851                           ; 1 bytes @ 0xE
   852  00AE                     	ds	1
   853  00AF                     ??_SETSPEED:
   854  00AF                     LCDInit@__i:	
   855                           ; 1 bytes @ 0xF
   856                           
   857                           
   858                           ; 1 bytes @ 0xF
   859  00AF                     	ds	4
   860  00B3                     SETSPEED@maxstep:
   861                           
   862                           ; 2 bytes @ 0x13
   863  00B3                     	ds	2
   864  00B5                     SETSPEED@x:
   865                           
   866                           ; 2 bytes @ 0x15
   867  00B5                     	ds	2
   868  00B7                     SETSPEED@i:
   869                           
   870                           ; 2 bytes @ 0x17
   871  00B7                     	ds	2
   872  00B9                     SETSPEED@a:
   873                           
   874                           ; 1 bytes @ 0x19
   875  00B9                     	ds	1
   876  00BA                     SETSPEED@y:
   877                           
   878                           ; 2 bytes @ 0x1A
   879  00BA                     	ds	2
   880  00BC                     SETSPEED@t:
   881                           
   882                           ; 4 bytes @ 0x1C
   883  00BC                     	ds	4
   884  00C0                     ??_main:
   885                           
   886                           	psect	cstackCOMMON
   887  0070                     __pcstackCOMMON:	
   888                           ; 1 bytes @ 0x20
   889                           
   890  0070                     ?_init_keypad:
   891  0070                     ??_init_keypad:	
   892                           ; 1 bytes @ 0x0
   893                           
   894  0070                     ?_LCDWriteString:	
   895                           ; 1 bytes @ 0x0
   896                           
   897  0070                     ?_get_str:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0070                     ?_INITH:	
   901                           ; 1 bytes @ 0x0
   902                           
   903  0070                     ?_LCDInit:	
   904                           ; 1 bytes @ 0x0
   905                           
   906  0070                     ?_LCDBusyLoop:	
   907                           ; 1 bytes @ 0x0
   908                           
   909  0070                     ?_INITSTEPPER:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0070                     ?_SETSPEED:	
   913                           ; 1 bytes @ 0x0
   914                           
   915  0070                     ?_STOP:	
   916                           ; 1 bytes @ 0x0
   917                           
   918  0070                     ??_STOP:	
   919                           ; 1 bytes @ 0x0
   920                           
   921  0070                     ?_INTR_CALL_WORK:	
   922                           ; 1 bytes @ 0x0
   923                           
   924  0070                     ?_Timer_isr:	
   925                           ; 1 bytes @ 0x0
   926                           
   927  0070                     ?_main:	
   928                           ; 1 bytes @ 0x0
   929                           
   930  0070                     ?_get_value:	
   931                           ; 1 bytes @ 0x0
   932                           
   933  0070                     ??_get_value:	
   934                           ; 1 bytes @ 0x0
   935                           
   936  0070                     ?_get_key:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ??_get_key:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ?i1_INITSTEPPER:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ??i1_INITSTEPPER:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ?i1_LCDBusyLoop:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     ??i1_LCDBusyLoop:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ?___wmul:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ?___awdiv:	
   958                           ; 2 bytes @ 0x0
   959                           
   960  0070                     ?i1___awmod:	
   961                           ; 2 bytes @ 0x0
   962                           
   963  0070                     ___wmul@multiplier:	
   964                           ; 2 bytes @ 0x0
   965                           
   966  0070                     ___awdiv@divisor:	
   967                           ; 2 bytes @ 0x0
   968                           
   969  0070                     i1___awmod@divisor:	
   970                           ; 2 bytes @ 0x0
   971                           
   972                           
   973                           ; 2 bytes @ 0x0
   974  0070                     	ds	1
   975  0071                     get_key@key:
   976                           
   977                           ; 1 bytes @ 0x1
   978  0071                     	ds	1
   979  0072                     ??_get_str:
   980  0072                     i1LCDBusyLoop@busy:	
   981                           ; 1 bytes @ 0x2
   982                           
   983  0072                     ___wmul@multiplicand:	
   984                           ; 1 bytes @ 0x2
   985                           
   986  0072                     ___awdiv@dividend:	
   987                           ; 2 bytes @ 0x2
   988                           
   989  0072                     i1___awmod@dividend:	
   990                           ; 2 bytes @ 0x2
   991                           
   992                           
   993                           ; 2 bytes @ 0x2
   994  0072                     	ds	1
   995  0073                     i1LCDBusyLoop@temp:
   996                           
   997                           ; 1 bytes @ 0x3
   998  0073                     	ds	1
   999  0074                     ??___wmul:
  1000  0074                     ??___awdiv:	
  1001                           ; 1 bytes @ 0x4
  1002                           
  1003  0074                     ??i1___awmod:	
  1004                           ; 1 bytes @ 0x4
  1005                           
  1006  0074                     i1LCDBusyLoop@status:	
  1007                           ; 1 bytes @ 0x4
  1008                           
  1009  0074                     ___wmul@product:	
  1010                           ; 1 bytes @ 0x4
  1011                           
  1012                           
  1013                           ; 2 bytes @ 0x4
  1014  0074                     	ds	1
  1015  0075                     ?i1_LCDByte:
  1016  0075                     ___awdiv@counter:	
  1017                           ; 1 bytes @ 0x5
  1018                           
  1019  0075                     i1LCDByte@isdata:	
  1020                           ; 1 bytes @ 0x5
  1021                           
  1022  0075                     i1___awmod@counter:	
  1023                           ; 1 bytes @ 0x5
  1024                           
  1025                           
  1026                           ; 1 bytes @ 0x5
  1027  0075                     	ds	1
  1028  0076                     ??i1_LCDByte:
  1029  0076                     ___awdiv@sign:	
  1030                           ; 1 bytes @ 0x6
  1031                           
  1032  0076                     i1___awmod@sign:	
  1033                           ; 1 bytes @ 0x6
  1034                           
  1035                           
  1036                           ; 1 bytes @ 0x6
  1037  0076                     	ds	1
  1038  0077                     ___awdiv@quotient:
  1039                           
  1040                           ; 2 bytes @ 0x7
  1041  0077                     	ds	1
  1042  0078                     i1LCDByte@hn:
  1043                           
  1044                           ; 1 bytes @ 0x8
  1045  0078                     	ds	1
  1046  0079                     i1LCDByte@ln:
  1047                           
  1048                           ; 1 bytes @ 0x9
  1049  0079                     	ds	1
  1050  007A                     i1LCDByte@c:
  1051                           
  1052                           ; 1 bytes @ 0xA
  1053  007A                     	ds	1
  1054  007B                     i1LCDByte@temp:
  1055                           
  1056                           ; 1 bytes @ 0xB
  1057  007B                     	ds	1
  1058  007C                     ??_LCDWriteString:
  1059                           
  1060                           ; 1 bytes @ 0xC
  1061  007C                     	ds	1
  1062                           
  1063                           	psect	cstackBANK0
  1064  0020                     __pcstackBANK0:
  1065  0020                     ?_LCDWriteInt:
  1066  0020                     LCDWriteString@cc:	
  1067                           ; 1 bytes @ 0x0
  1068                           
  1069  0020                     LCDWriteInt@val:	
  1070                           ; 1 bytes @ 0x0
  1071                           
  1072  0020                     get_str@str:	
  1073                           ; 2 bytes @ 0x0
  1074                           
  1075                           
  1076                           ; 10 bytes @ 0x0
  1077  0020                     	ds	1
  1078  0021                     LCDWriteString@msg:
  1079                           
  1080                           ; 1 bytes @ 0x1
  1081  0021                     	ds	1
  1082  0022                     LCDWriteInt@field_length:
  1083                           
  1084                           ; 1 bytes @ 0x2
  1085  0022                     	ds	1
  1086  0023                     ??_LCDWriteInt:
  1087                           
  1088                           ; 1 bytes @ 0x3
  1089  0023                     	ds	3
  1090  0026                     LCDWriteInt@str:
  1091                           
  1092                           ; 5 bytes @ 0x6
  1093  0026                     	ds	4
  1094  002A                     get_str@i:
  1095                           
  1096                           ; 2 bytes @ 0xA
  1097  002A                     	ds	1
  1098  002B                     LCDWriteInt@j:
  1099                           
  1100                           ; 2 bytes @ 0xB
  1101  002B                     	ds	1
  1102  002C                     get_str@key1:
  1103                           
  1104                           ; 1 bytes @ 0xC
  1105  002C                     	ds	1
  1106  002D                     LCDWriteInt@i:
  1107                           
  1108                           ; 2 bytes @ 0xD
  1109  002D                     	ds	2
  1110  002F                     ??_INTR_CALL_WORK:
  1111                           
  1112                           ; 1 bytes @ 0xF
  1113  002F                     	ds	3
  1114  0032                     INTR_CALL_WORK@flag:
  1115                           
  1116                           ; 2 bytes @ 0x12
  1117  0032                     	ds	2
  1118  0034                     INTR_CALL_WORK@i:
  1119                           
  1120                           ; 2 bytes @ 0x14
  1121  0034                     	ds	2
  1122  0036                     INTR_CALL_WORK@num:
  1123                           
  1124                           ; 2 bytes @ 0x16
  1125  0036                     	ds	2
  1126  0038                     ??_Timer_isr:
  1127                           
  1128                           ; 1 bytes @ 0x18
  1129  0038                     	ds	4
  1130                           
  1131                           	psect	maintext
  1132  0F89                     __pmaintext:	
  1133 ;;
  1134 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1135 ;;
  1136 ;; *************** function _main *****************
  1137 ;; Defined at:
  1138 ;;		line 90 in file "main.c"
  1139 ;; Parameters:    Size  Location     Type
  1140 ;;		None
  1141 ;; Auto vars:     Size  Location     Type
  1142 ;;		None
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  1    wreg      void 
  1145 ;; Registers used:
  1146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1147 ;; Tracked objects:
  1148 ;;		On entry : B00/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1152 ;;      Params:         0       0       0       0       0
  1153 ;;      Locals:         0       0       0       0       0
  1154 ;;      Temps:          0       0       0       0       0
  1155 ;;      Totals:         0       0       0       0       0
  1156 ;;Total ram usage:        0 bytes
  1157 ;; Hardware stack levels required when called:    8
  1158 ;; This function calls:
  1159 ;;		_INITH
  1160 ;;		_INITSTEPPER
  1161 ;;		_LCDInit
  1162 ;;		_SETSPEED
  1163 ;; This function is called by:
  1164 ;;		Startup code after reset
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           
  1169                           ;psect for function _main
  1170  0F89                     _main:
  1171  0F89                     l2568:	
  1172                           ;incstack = 0
  1173                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1174                           
  1175                           
  1176                           ;main.c: 93:     INITSTEPPER();
  1177  0F89  120A  158A  2727  120A  158A  	fcall	_INITSTEPPER
  1178                           
  1179                           ;main.c: 94:     INITH();
  1180  0F8E  120A  158A  2704  120A  158A  	fcall	_INITH
  1181  0F93                     l2570:
  1182                           
  1183                           ;main.c: 96:     LCDInit(0B00000000);
  1184  0F93  3000               	movlw	0
  1185  0F94  120A  118A  2562  120A  158A  	fcall	_LCDInit
  1186  0F99                     l2572:
  1187                           
  1188                           ;main.c: 97:     SETSPEED(&s);
  1189  0F99  30C8               	movlw	(low (_s| 0))& (0+255)
  1190  0F9A  120A  118A  2048  120A  158A  	fcall	_SETSPEED
  1191  0F9F                     l87:
  1192  0F9F  120A  118A  2812   	ljmp	start
  1193  0FA2                     __end_of_main:
  1194                           
  1195                           	psect	text1
  1196  0048                     __ptext1:	
  1197 ;; *************** function _SETSPEED *****************
  1198 ;; Defined at:
  1199 ;;		line 40 in file "MYSTEPPER.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  a               1    wreg     PTR long 
  1202 ;;		 -> s(4), 
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  a               1   25[BANK1 ] PTR long 
  1205 ;;		 -> s(4), 
  1206 ;;  i               2   23[BANK1 ] int 
  1207 ;;  t               4   28[BANK1 ] unsigned long 
  1208 ;;  y               2   26[BANK1 ] int 
  1209 ;;  x               2   21[BANK1 ] int 
  1210 ;;  maxstep         2   19[BANK1 ] int 
  1211 ;; Return value:  Size  Location     Type
  1212 ;;                  1    wreg      void 
  1213 ;; Registers used:
  1214 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1215 ;; Tracked objects:
  1216 ;;		On entry : 0/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1220 ;;      Params:         0       0       0       0       0
  1221 ;;      Locals:         0       0      13       0       0
  1222 ;;      Temps:          0       0       4       0       0
  1223 ;;      Totals:         0       0      17       0       0
  1224 ;;Total ram usage:       17 bytes
  1225 ;; Hardware stack levels used:    1
  1226 ;; Hardware stack levels required when called:    6
  1227 ;; This function calls:
  1228 ;;		___aldiv
  1229 ;;		___awmod
  1230 ;; This function is called by:
  1231 ;;		_main
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           
  1236                           ;psect for function _SETSPEED
  1237  0048                     _SETSPEED:
  1238                           
  1239                           ;incstack = 0
  1240                           ; Regs used in _SETSPEED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1241                           ;SETSPEED@a stored from wreg
  1242  0048  1683               	bsf	3,5	;RP0=1, select bank1
  1243  0049  1303               	bcf	3,6	;RP1=0, select bank1
  1244  004A  00B9               	movwf	SETSPEED@a^(0+128)
  1245  004B                     l2476:
  1246                           
  1247                           ;MYSTEPPER.c: 40: void SETSPEED(long int *a);MYSTEPPER.c: 41: { int y=0;
  1248  004B  01BA               	clrf	SETSPEED@y^(0+128)
  1249  004C  01BB               	clrf	(SETSPEED@y+1)^(0+128)
  1250  004D                     l2478:
  1251                           
  1252                           ;MYSTEPPER.c: 42:     int maxstep = 4+4*1;
  1253  004D  3008               	movlw	8
  1254  004E  00B3               	movwf	SETSPEED@maxstep^(0+128)
  1255  004F  3000               	movlw	0
  1256  0050  00B4               	movwf	(SETSPEED@maxstep^(0+128)+1)
  1257                           
  1258                           ;MYSTEPPER.c: 43:     int x;;MYSTEPPER.c: 44:     while(flag)
  1259  0051  2929               	goto	l2504
  1260  0052                     l2480:
  1261                           
  1262                           ;MYSTEPPER.c: 45:     {;MYSTEPPER.c: 46:         if(*a>=0)
  1263  0052  0839               	movf	SETSPEED@a^(0+128),w
  1264  0053  0084               	movwf	4
  1265  0054  1383               	bcf	3,7	;select IRP bank0
  1266  0055  0800               	movf	0,w
  1267  0056  00AF               	movwf	??_SETSPEED^(0+128)
  1268  0057  0A84               	incf	4,f
  1269  0058  0800               	movf	0,w
  1270  0059  00B0               	movwf	(??_SETSPEED^(0+128)+1)
  1271  005A  0A84               	incf	4,f
  1272  005B  0800               	movf	0,w
  1273  005C  00B1               	movwf	(??_SETSPEED^(0+128)+2)
  1274  005D  0A84               	incf	4,f
  1275  005E  0800               	movf	0,w
  1276  005F  00B2               	movwf	(??_SETSPEED^(0+128)+3)
  1277  0060  1BB2               	btfsc	(??_SETSPEED+3)^(0+128),7
  1278  0061  2863               	goto	u2561
  1279  0062  2864               	goto	u2560
  1280  0063                     u2561:
  1281  0063  286F               	goto	l2484
  1282  0064                     u2560:
  1283  0064                     l2482:
  1284                           
  1285                           ;MYSTEPPER.c: 47:             x=++y;
  1286  0064  3001               	movlw	1
  1287  0065  07BA               	addwf	SETSPEED@y^(0+128),f
  1288  0066  1803               	skipnc
  1289  0067  0ABB               	incf	(SETSPEED@y+1)^(0+128),f
  1290  0068  3000               	movlw	0
  1291  0069  07BB               	addwf	(SETSPEED@y+1)^(0+128),f
  1292  006A  083B               	movf	(SETSPEED@y+1)^(0+128),w
  1293  006B  00B6               	movwf	(SETSPEED@x+1)^(0+128)
  1294  006C  083A               	movf	SETSPEED@y^(0+128),w
  1295  006D  00B5               	movwf	SETSPEED@x^(0+128)
  1296  006E  287E               	goto	l2486
  1297  006F                     l2484:
  1298                           
  1299                           ;MYSTEPPER.c: 50:             x=7-(++y);
  1300  006F  3001               	movlw	1
  1301  0070  07BA               	addwf	SETSPEED@y^(0+128),f
  1302  0071  1803               	skipnc
  1303  0072  0ABB               	incf	(SETSPEED@y+1)^(0+128),f
  1304  0073  3000               	movlw	0
  1305  0074  07BB               	addwf	(SETSPEED@y+1)^(0+128),f
  1306  0075  3007               	movlw	7
  1307  0076  00AF               	movwf	??_SETSPEED^(0+128)
  1308  0077  083A               	movf	SETSPEED@y^(0+128),w
  1309  0078  022F               	subwf	??_SETSPEED^(0+128),w
  1310  0079  00B5               	movwf	SETSPEED@x^(0+128)
  1311  007A  093B               	comf	(SETSPEED@y+1)^(0+128),w
  1312  007B  1803               	skipnc
  1313  007C  3E01               	addlw	1
  1314  007D  00B6               	movwf	(SETSPEED@x^(0+128)+1)
  1315  007E                     l2486:
  1316                           
  1317                           ;MYSTEPPER.c: 52:         PORTA = HALF_STEP[x];
  1318  007E  0835               	movf	SETSPEED@x^(0+128),w
  1319  007F  3EC0               	addlw	(low (_HALF_STEP| 0))& (0+255)
  1320  0080  0084               	movwf	4
  1321  0081  0800               	movf	0,w
  1322  0082  1283               	bcf	3,5	;RP0=0, select bank0
  1323  0083  1303               	bcf	3,6	;RP1=0, select bank0
  1324  0084  0085               	movwf	5	;volatile
  1325  0085                     l2488:
  1326                           
  1327                           ;MYSTEPPER.c: 54:         y = y % maxstep;
  1328  0085  1683               	bsf	3,5	;RP0=1, select bank1
  1329  0086  1303               	bcf	3,6	;RP1=0, select bank1
  1330  0087  0834               	movf	(SETSPEED@maxstep+1)^(0+128),w
  1331  0088  00A1               	movwf	(___awmod@divisor+1)^(0+128)
  1332  0089  0833               	movf	SETSPEED@maxstep^(0+128),w
  1333  008A  00A0               	movwf	___awmod@divisor^(0+128)
  1334  008B  083B               	movf	(SETSPEED@y+1)^(0+128),w
  1335  008C  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  1336  008D  083A               	movf	SETSPEED@y^(0+128),w
  1337  008E  00A2               	movwf	___awmod@dividend^(0+128)
  1338  008F  120A  118A  26F8  120A  118A  	fcall	___awmod
  1339  0094  1683               	bsf	3,5	;RP0=1, select bank1
  1340  0095  1303               	bcf	3,6	;RP1=0, select bank1
  1341  0096  0821               	movf	(?___awmod+1)^(0+128),w
  1342  0097  00BB               	movwf	(SETSPEED@y+1)^(0+128)
  1343  0098  0820               	movf	?___awmod^(0+128),w
  1344  0099  00BA               	movwf	SETSPEED@y^(0+128)
  1345  009A                     l2490:
  1346                           
  1347                           ;MYSTEPPER.c: 55:         long unsigned int t = (3*1000)/(4*(*a));
  1348  009A  0839               	movf	SETSPEED@a^(0+128),w
  1349  009B  0084               	movwf	4
  1350  009C  1383               	bcf	3,7	;select IRP bank0
  1351  009D  0800               	movf	0,w
  1352  009E  00AF               	movwf	??_SETSPEED^(0+128)
  1353  009F  0A84               	incf	4,f
  1354  00A0  0800               	movf	0,w
  1355  00A1  00B0               	movwf	(??_SETSPEED^(0+128)+1)
  1356  00A2  0A84               	incf	4,f
  1357  00A3  0800               	movf	0,w
  1358  00A4  00B1               	movwf	(??_SETSPEED^(0+128)+2)
  1359  00A5  0A84               	incf	4,f
  1360  00A6  0800               	movf	0,w
  1361  00A7  00B2               	movwf	(??_SETSPEED^(0+128)+3)
  1362  00A8  3002               	movlw	2
  1363  00A9                     u2575:
  1364  00A9  1003               	clrc
  1365  00AA  0DAF               	rlf	??_SETSPEED^(0+128),f
  1366  00AB  0DB0               	rlf	(??_SETSPEED^(0+128)+1),f
  1367  00AC  0DB1               	rlf	(??_SETSPEED^(0+128)+2),f
  1368  00AD  0DB2               	rlf	(??_SETSPEED^(0+128)+3),f
  1369  00AE                     u2570:
  1370  00AE  3EFF               	addlw	-1
  1371  00AF  1D03               	skipz
  1372  00B0  28A9               	goto	u2575
  1373  00B1  0832               	movf	(??_SETSPEED+3)^(0+128),w
  1374  00B2  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  1375  00B3  0831               	movf	(??_SETSPEED+2)^(0+128),w
  1376  00B4  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  1377  00B5  0830               	movf	(??_SETSPEED+1)^(0+128),w
  1378  00B6  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  1379  00B7  082F               	movf	??_SETSPEED^(0+128),w
  1380  00B8  00A0               	movwf	___aldiv@divisor^(0+128)
  1381  00B9  3000               	movlw	0
  1382  00BA  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  1383  00BB  3000               	movlw	0
  1384  00BC  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  1385  00BD  300B               	movlw	11
  1386  00BE  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  1387  00BF  30B8               	movlw	184
  1388  00C0  00A4               	movwf	___aldiv@dividend^(0+128)
  1389  00C1  120A  118A  237C  120A  118A  	fcall	___aldiv
  1390  00C6  1683               	bsf	3,5	;RP0=1, select bank1
  1391  00C7  1303               	bcf	3,6	;RP1=0, select bank1
  1392  00C8  0823               	movf	(?___aldiv+3)^(0+128),w
  1393  00C9  00BF               	movwf	(SETSPEED@t+3)^(0+128)
  1394  00CA  0822               	movf	(?___aldiv+2)^(0+128),w
  1395  00CB  00BE               	movwf	(SETSPEED@t+2)^(0+128)
  1396  00CC  0821               	movf	(?___aldiv+1)^(0+128),w
  1397  00CD  00BD               	movwf	(SETSPEED@t+1)^(0+128)
  1398  00CE  0820               	movf	?___aldiv^(0+128),w
  1399  00CF  00BC               	movwf	SETSPEED@t^(0+128)
  1400  00D0                     l2492:
  1401                           
  1402                           ;MYSTEPPER.c: 56:         if(t<1)
  1403  00D0  083F               	movf	(SETSPEED@t+3)^(0+128),w
  1404  00D1  043E               	iorwf	(SETSPEED@t+2)^(0+128),w
  1405  00D2  043D               	iorwf	(SETSPEED@t+1)^(0+128),w
  1406  00D3  043C               	iorwf	SETSPEED@t^(0+128),w
  1407  00D4  1D03               	skipz
  1408  00D5  28D7               	goto	u2581
  1409  00D6  28D8               	goto	u2580
  1410  00D7                     u2581:
  1411  00D7  28E0               	goto	l2496
  1412  00D8                     u2580:
  1413  00D8                     l2494:
  1414                           
  1415                           ;MYSTEPPER.c: 57:             t=1;
  1416  00D8  3000               	movlw	0
  1417  00D9  00BF               	movwf	(SETSPEED@t+3)^(0+128)
  1418  00DA  3000               	movlw	0
  1419  00DB  00BE               	movwf	(SETSPEED@t+2)^(0+128)
  1420  00DC  3000               	movlw	0
  1421  00DD  00BD               	movwf	(SETSPEED@t+1)^(0+128)
  1422  00DE  3001               	movlw	1
  1423  00DF  00BC               	movwf	SETSPEED@t^(0+128)
  1424  00E0                     l2496:
  1425                           
  1426                           ;MYSTEPPER.c: 58:         if(t>2000)
  1427  00E0  083F               	movf	(SETSPEED@t+3)^(0+128),w
  1428  00E1  1D03               	btfss	3,2
  1429  00E2  28F2               	goto	u2590
  1430  00E3  083E               	movf	(SETSPEED@t+2)^(0+128),w
  1431  00E4  1D03               	btfss	3,2
  1432  00E5  28F2               	goto	u2590
  1433  00E6  3007               	movlw	7
  1434  00E7  023D               	subwf	(SETSPEED@t+1)^(0+128),w
  1435  00E8  1D03               	skipz
  1436  00E9  28EE               	goto	u2593
  1437  00EA  30D1               	movlw	209
  1438  00EB  023C               	subwf	SETSPEED@t^(0+128),w
  1439  00EC  1D03               	skipz
  1440  00ED  28EE               	goto	u2593
  1441  00EE                     u2593:
  1442  00EE  1C03               	btfss	3,0
  1443  00EF  28F1               	goto	u2591
  1444  00F0  28F2               	goto	u2590
  1445  00F1                     u2591:
  1446  00F1  28FC               	goto	l2500
  1447  00F2                     u2590:
  1448  00F2                     l2498:
  1449                           
  1450                           ;MYSTEPPER.c: 59:             t=2000;
  1451  00F2  3000               	movlw	0
  1452  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  1453  00F4  1303               	bcf	3,6	;RP1=0, select bank1
  1454  00F5  00BF               	movwf	(SETSPEED@t+3)^(0+128)
  1455  00F6  3000               	movlw	0
  1456  00F7  00BE               	movwf	(SETSPEED@t+2)^(0+128)
  1457  00F8  3007               	movlw	7
  1458  00F9  00BD               	movwf	(SETSPEED@t+1)^(0+128)
  1459  00FA  30D0               	movlw	208
  1460  00FB  00BC               	movwf	SETSPEED@t^(0+128)
  1461  00FC                     l2500:
  1462                           
  1463                           ;MYSTEPPER.c: 61:         for(int i=0;i<t;i++){__nop(); __nop();__nop(); __nop();__nop()
      +                          ;}
  1464  00FC  1683               	bsf	3,5	;RP0=1, select bank1
  1465  00FD  1303               	bcf	3,6	;RP1=0, select bank1
  1466  00FE  01B7               	clrf	SETSPEED@i^(0+128)
  1467  00FF  01B8               	clrf	(SETSPEED@i+1)^(0+128)
  1468  0100  290E               	goto	l24
  1469  0101                     l25:
  1470  0101  0000               	nop
  1471  0102  0000               	nop
  1472  0103  0000               	nop
  1473  0104  0000               	nop
  1474  0105  0000               	nop
  1475  0106                     l2502:
  1476  0106  3001               	movlw	1
  1477  0107  1683               	bsf	3,5	;RP0=1, select bank1
  1478  0108  1303               	bcf	3,6	;RP1=0, select bank1
  1479  0109  07B7               	addwf	SETSPEED@i^(0+128),f
  1480  010A  1803               	skipnc
  1481  010B  0AB8               	incf	(SETSPEED@i+1)^(0+128),f
  1482  010C  3000               	movlw	0
  1483  010D  07B8               	addwf	(SETSPEED@i+1)^(0+128),f
  1484  010E                     l24:
  1485  010E  0837               	movf	SETSPEED@i^(0+128),w
  1486  010F  00AF               	movwf	??_SETSPEED^(0+128)
  1487  0110  0838               	movf	(SETSPEED@i+1)^(0+128),w
  1488  0111  00B0               	movwf	(??_SETSPEED^(0+128)+1)
  1489  0112  3000               	movlw	0
  1490  0113  1BB0               	btfsc	(??_SETSPEED^(0+128)+1),7
  1491  0114  30FF               	movlw	255
  1492  0115  00B1               	movwf	(??_SETSPEED^(0+128)+2)
  1493  0116  00B2               	movwf	(??_SETSPEED^(0+128)+3)
  1494  0117  083F               	movf	(SETSPEED@t+3)^(0+128),w
  1495  0118  0232               	subwf	(??_SETSPEED+3)^(0+128),w
  1496  0119  1D03               	skipz
  1497  011A  2925               	goto	u2605
  1498  011B  083E               	movf	(SETSPEED@t+2)^(0+128),w
  1499  011C  0231               	subwf	(??_SETSPEED+2)^(0+128),w
  1500  011D  1D03               	skipz
  1501  011E  2925               	goto	u2605
  1502  011F  083D               	movf	(SETSPEED@t+1)^(0+128),w
  1503  0120  0230               	subwf	(??_SETSPEED+1)^(0+128),w
  1504  0121  1D03               	skipz
  1505  0122  2925               	goto	u2605
  1506  0123  083C               	movf	SETSPEED@t^(0+128),w
  1507  0124  022F               	subwf	??_SETSPEED^(0+128),w
  1508  0125                     u2605:
  1509  0125  1C03               	skipc
  1510  0126  2928               	goto	u2601
  1511  0127  2929               	goto	u2600
  1512  0128                     u2601:
  1513  0128  2901               	goto	l25
  1514  0129                     u2600:
  1515  0129                     l2504:
  1516                           
  1517                           ;MYSTEPPER.c: 44:     while(flag)
  1518  0129  084C               	movf	_flag^(0+128),w
  1519  012A  044D               	iorwf	(_flag+1)^(0+128),w
  1520  012B  1D03               	btfss	3,2
  1521  012C  292E               	goto	u2611
  1522  012D  292F               	goto	u2610
  1523  012E                     u2611:
  1524  012E  2852               	goto	l2480
  1525  012F                     u2610:
  1526  012F                     l28:
  1527  012F  0008               	return
  1528  0130                     __end_of_SETSPEED:
  1529                           
  1530                           	psect	text2
  1531  06F8                     __ptext2:	
  1532 ;; *************** function ___awmod *****************
  1533 ;; Defined at:
  1534 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awmod.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;  divisor         2    0[BANK1 ] int 
  1537 ;;  dividend        2    2[BANK1 ] int 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  sign            1    6[BANK1 ] unsigned char 
  1540 ;;  counter         1    5[BANK1 ] unsigned char 
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  2    0[BANK1 ] int 
  1543 ;; Registers used:
  1544 ;;		wreg, status,2, status,0
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1550 ;;      Params:         0       0       4       0       0
  1551 ;;      Locals:         0       0       2       0       0
  1552 ;;      Temps:          0       0       1       0       0
  1553 ;;      Totals:         0       0       7       0       0
  1554 ;;Total ram usage:        7 bytes
  1555 ;; Hardware stack levels used:    1
  1556 ;; Hardware stack levels required when called:    5
  1557 ;; This function calls:
  1558 ;;		Nothing
  1559 ;; This function is called by:
  1560 ;;		_SETSPEED
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           
  1565                           ;psect for function ___awmod
  1566  06F8                     ___awmod:
  1567  06F8                     l2434:	
  1568                           ;incstack = 0
  1569                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1570                           
  1571  06F8  1683               	bsf	3,5	;RP0=1, select bank1
  1572  06F9  1303               	bcf	3,6	;RP1=0, select bank1
  1573  06FA  01A6               	clrf	___awmod@sign^(0+128)
  1574  06FB                     l2436:
  1575  06FB  1FA3               	btfss	(___awmod@dividend+1)^(0+128),7
  1576  06FC  2EFE               	goto	u2471
  1577  06FD  2EFF               	goto	u2470
  1578  06FE                     u2471:
  1579  06FE  2F06               	goto	l2442
  1580  06FF                     u2470:
  1581  06FF                     l2438:
  1582  06FF  09A2               	comf	___awmod@dividend^(0+128),f
  1583  0700  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  1584  0701  0AA2               	incf	___awmod@dividend^(0+128),f
  1585  0702  1903               	skipnz
  1586  0703  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  1587  0704                     l2440:
  1588  0704  01A6               	clrf	___awmod@sign^(0+128)
  1589  0705  0AA6               	incf	___awmod@sign^(0+128),f
  1590  0706                     l2442:
  1591  0706  1FA1               	btfss	(___awmod@divisor+1)^(0+128),7
  1592  0707  2F09               	goto	u2481
  1593  0708  2F0A               	goto	u2480
  1594  0709                     u2481:
  1595  0709  2F0F               	goto	l2446
  1596  070A                     u2480:
  1597  070A                     l2444:
  1598  070A  09A0               	comf	___awmod@divisor^(0+128),f
  1599  070B  09A1               	comf	(___awmod@divisor+1)^(0+128),f
  1600  070C  0AA0               	incf	___awmod@divisor^(0+128),f
  1601  070D  1903               	skipnz
  1602  070E  0AA1               	incf	(___awmod@divisor+1)^(0+128),f
  1603  070F                     l2446:
  1604  070F  0820               	movf	___awmod@divisor^(0+128),w
  1605  0710  0421               	iorwf	(___awmod@divisor+1)^(0+128),w
  1606  0711  1903               	btfsc	3,2
  1607  0712  2F14               	goto	u2491
  1608  0713  2F15               	goto	u2490
  1609  0714                     u2491:
  1610  0714  2F44               	goto	l2464
  1611  0715                     u2490:
  1612  0715                     l2448:
  1613  0715  01A5               	clrf	___awmod@counter^(0+128)
  1614  0716  0AA5               	incf	___awmod@counter^(0+128),f
  1615  0717  2F23               	goto	l2454
  1616  0718                     l2450:
  1617  0718  3001               	movlw	1
  1618  0719                     u2505:
  1619  0719  1003               	clrc
  1620  071A  0DA0               	rlf	___awmod@divisor^(0+128),f
  1621  071B  0DA1               	rlf	(___awmod@divisor+1)^(0+128),f
  1622  071C  3EFF               	addlw	-1
  1623  071D  1D03               	skipz
  1624  071E  2F19               	goto	u2505
  1625  071F                     l2452:
  1626  071F  3001               	movlw	1
  1627  0720  00A4               	movwf	??___awmod^(0+128)
  1628  0721  0824               	movf	??___awmod^(0+128),w
  1629  0722  07A5               	addwf	___awmod@counter^(0+128),f
  1630  0723                     l2454:
  1631  0723  1FA1               	btfss	(___awmod@divisor+1)^(0+128),7
  1632  0724  2F26               	goto	u2511
  1633  0725  2F27               	goto	u2510
  1634  0726                     u2511:
  1635  0726  2F18               	goto	l2450
  1636  0727                     u2510:
  1637  0727                     l2456:
  1638  0727  0821               	movf	(___awmod@divisor+1)^(0+128),w
  1639  0728  0223               	subwf	(___awmod@dividend+1)^(0+128),w
  1640  0729  1D03               	skipz
  1641  072A  2F2D               	goto	u2525
  1642  072B  0820               	movf	___awmod@divisor^(0+128),w
  1643  072C  0222               	subwf	___awmod@dividend^(0+128),w
  1644  072D                     u2525:
  1645  072D  1C03               	skipc
  1646  072E  2F30               	goto	u2521
  1647  072F  2F31               	goto	u2520
  1648  0730                     u2521:
  1649  0730  2F37               	goto	l2460
  1650  0731                     u2520:
  1651  0731                     l2458:
  1652  0731  0820               	movf	___awmod@divisor^(0+128),w
  1653  0732  02A2               	subwf	___awmod@dividend^(0+128),f
  1654  0733  0821               	movf	(___awmod@divisor+1)^(0+128),w
  1655  0734  1C03               	skipc
  1656  0735  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  1657  0736  02A3               	subwf	(___awmod@dividend+1)^(0+128),f
  1658  0737                     l2460:
  1659  0737  3001               	movlw	1
  1660  0738                     u2535:
  1661  0738  1003               	clrc
  1662  0739  0CA1               	rrf	(___awmod@divisor+1)^(0+128),f
  1663  073A  0CA0               	rrf	___awmod@divisor^(0+128),f
  1664  073B  3EFF               	addlw	-1
  1665  073C  1D03               	skipz
  1666  073D  2F38               	goto	u2535
  1667  073E                     l2462:
  1668  073E  3001               	movlw	1
  1669  073F  02A5               	subwf	___awmod@counter^(0+128),f
  1670  0740  1D03               	btfss	3,2
  1671  0741  2F43               	goto	u2541
  1672  0742  2F44               	goto	u2540
  1673  0743                     u2541:
  1674  0743  2F27               	goto	l2456
  1675  0744                     u2540:
  1676  0744                     l2464:
  1677  0744  0826               	movf	___awmod@sign^(0+128),w
  1678  0745  1903               	btfsc	3,2
  1679  0746  2F48               	goto	u2551
  1680  0747  2F49               	goto	u2550
  1681  0748                     u2551:
  1682  0748  2F4E               	goto	l2468
  1683  0749                     u2550:
  1684  0749                     l2466:
  1685  0749  09A2               	comf	___awmod@dividend^(0+128),f
  1686  074A  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  1687  074B  0AA2               	incf	___awmod@dividend^(0+128),f
  1688  074C  1903               	skipnz
  1689  074D  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  1690  074E                     l2468:
  1691  074E  0823               	movf	(___awmod@dividend+1)^(0+128),w
  1692  074F  00A1               	movwf	(?___awmod+1)^(0+128)
  1693  0750  0822               	movf	___awmod@dividend^(0+128),w
  1694  0751  00A0               	movwf	?___awmod^(0+128)
  1695  0752                     l530:
  1696  0752  0008               	return
  1697  0753                     __end_of___awmod:
  1698                           
  1699                           	psect	text3
  1700  037C                     __ptext3:	
  1701 ;; *************** function ___aldiv *****************
  1702 ;; Defined at:
  1703 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\aldiv.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;  divisor         4    0[BANK1 ] long 
  1706 ;;  dividend        4    4[BANK1 ] long 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  quotient        4   11[BANK1 ] long 
  1709 ;;  sign            1   10[BANK1 ] unsigned char 
  1710 ;;  counter         1    9[BANK1 ] unsigned char 
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  4    0[BANK1 ] long 
  1713 ;; Registers used:
  1714 ;;		wreg, status,2, status,0
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1720 ;;      Params:         0       0       8       0       0
  1721 ;;      Locals:         0       0       6       0       0
  1722 ;;      Temps:          0       0       1       0       0
  1723 ;;      Totals:         0       0      15       0       0
  1724 ;;Total ram usage:       15 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    5
  1727 ;; This function calls:
  1728 ;;		Nothing
  1729 ;; This function is called by:
  1730 ;;		_SETSPEED
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           
  1735                           ;psect for function ___aldiv
  1736  037C                     ___aldiv:
  1737  037C                     l2394:	
  1738                           ;incstack = 0
  1739                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1740                           
  1741  037C  1683               	bsf	3,5	;RP0=1, select bank1
  1742  037D  1303               	bcf	3,6	;RP1=0, select bank1
  1743  037E  01AA               	clrf	___aldiv@sign^(0+128)
  1744  037F                     l2396:
  1745  037F  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  1746  0380  2B82               	goto	u2371
  1747  0381  2B83               	goto	u2370
  1748  0382                     u2371:
  1749  0382  2B90               	goto	l429
  1750  0383                     u2370:
  1751  0383                     l2398:
  1752  0383  09A0               	comf	___aldiv@divisor^(0+128),f
  1753  0384  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  1754  0385  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  1755  0386  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  1756  0387  0AA0               	incf	___aldiv@divisor^(0+128),f
  1757  0388  1903               	skipnz
  1758  0389  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  1759  038A  1903               	skipnz
  1760  038B  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  1761  038C  1903               	skipnz
  1762  038D  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  1763  038E  01AA               	clrf	___aldiv@sign^(0+128)
  1764  038F  0AAA               	incf	___aldiv@sign^(0+128),f
  1765  0390                     l429:
  1766  0390  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  1767  0391  2B93               	goto	u2381
  1768  0392  2B94               	goto	u2380
  1769  0393                     u2381:
  1770  0393  2BA3               	goto	l2404
  1771  0394                     u2380:
  1772  0394                     l2400:
  1773  0394  09A4               	comf	___aldiv@dividend^(0+128),f
  1774  0395  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  1775  0396  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  1776  0397  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  1777  0398  0AA4               	incf	___aldiv@dividend^(0+128),f
  1778  0399  1903               	skipnz
  1779  039A  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  1780  039B  1903               	skipnz
  1781  039C  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  1782  039D  1903               	skipnz
  1783  039E  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  1784  039F                     l2402:
  1785  039F  3001               	movlw	1
  1786  03A0  00A8               	movwf	??___aldiv^(0+128)
  1787  03A1  0828               	movf	??___aldiv^(0+128),w
  1788  03A2  06AA               	xorwf	___aldiv@sign^(0+128),f
  1789  03A3                     l2404:
  1790  03A3  3000               	movlw	0
  1791  03A4  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  1792  03A5  3000               	movlw	0
  1793  03A6  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  1794  03A7  3000               	movlw	0
  1795  03A8  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  1796  03A9  3000               	movlw	0
  1797  03AA  00AB               	movwf	___aldiv@quotient^(0+128)
  1798  03AB                     l2406:
  1799  03AB  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1800  03AC  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  1801  03AD  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  1802  03AE  0420               	iorwf	___aldiv@divisor^(0+128),w
  1803  03AF  1903               	skipnz
  1804  03B0  2BB2               	goto	u2391
  1805  03B1  2BB3               	goto	u2390
  1806  03B2                     u2391:
  1807  03B2  2C00               	goto	l2426
  1808  03B3                     u2390:
  1809  03B3                     l2408:
  1810  03B3  01A9               	clrf	___aldiv@counter^(0+128)
  1811  03B4  0AA9               	incf	___aldiv@counter^(0+128),f
  1812  03B5  2BC3               	goto	l2412
  1813  03B6                     l2410:
  1814  03B6  3001               	movlw	1
  1815  03B7  00A8               	movwf	??___aldiv^(0+128)
  1816  03B8                     u2405:
  1817  03B8  1003               	clrc
  1818  03B9  0DA0               	rlf	___aldiv@divisor^(0+128),f
  1819  03BA  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  1820  03BB  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  1821  03BC  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  1822  03BD  0BA8               	decfsz	??___aldiv^(0+128),f
  1823  03BE  2BB8               	goto	u2405
  1824  03BF  3001               	movlw	1
  1825  03C0  00A8               	movwf	??___aldiv^(0+128)
  1826  03C1  0828               	movf	??___aldiv^(0+128),w
  1827  03C2  07A9               	addwf	___aldiv@counter^(0+128),f
  1828  03C3                     l2412:
  1829  03C3  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  1830  03C4  2BC6               	goto	u2411
  1831  03C5  2BC7               	goto	u2410
  1832  03C6                     u2411:
  1833  03C6  2BB6               	goto	l2410
  1834  03C7                     u2410:
  1835  03C7                     l2414:
  1836  03C7  3001               	movlw	1
  1837  03C8  00A8               	movwf	??___aldiv^(0+128)
  1838  03C9                     u2425:
  1839  03C9  1003               	clrc
  1840  03CA  0DAB               	rlf	___aldiv@quotient^(0+128),f
  1841  03CB  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  1842  03CC  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  1843  03CD  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  1844  03CE  0BA8               	decfsz	??___aldiv^(0+128),f
  1845  03CF  2BC9               	goto	u2425
  1846  03D0                     l2416:
  1847  03D0  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1848  03D1  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  1849  03D2  1D03               	skipz
  1850  03D3  2BDE               	goto	u2435
  1851  03D4  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  1852  03D5  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  1853  03D6  1D03               	skipz
  1854  03D7  2BDE               	goto	u2435
  1855  03D8  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  1856  03D9  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  1857  03DA  1D03               	skipz
  1858  03DB  2BDE               	goto	u2435
  1859  03DC  0820               	movf	___aldiv@divisor^(0+128),w
  1860  03DD  0224               	subwf	___aldiv@dividend^(0+128),w
  1861  03DE                     u2435:
  1862  03DE  1C03               	skipc
  1863  03DF  2BE1               	goto	u2431
  1864  03E0  2BE2               	goto	u2430
  1865  03E1                     u2431:
  1866  03E1  2BF1               	goto	l2422
  1867  03E2                     u2430:
  1868  03E2                     l2418:
  1869  03E2  0820               	movf	___aldiv@divisor^(0+128),w
  1870  03E3  02A4               	subwf	___aldiv@dividend^(0+128),f
  1871  03E4  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  1872  03E5  1C03               	skipc
  1873  03E6  0F21               	incfsz	(___aldiv@divisor+1)^(0+128),w
  1874  03E7  02A5               	subwf	(___aldiv@dividend+1)^(0+128),f
  1875  03E8  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  1876  03E9  1C03               	skipc
  1877  03EA  0F22               	incfsz	(___aldiv@divisor+2)^(0+128),w
  1878  03EB  02A6               	subwf	(___aldiv@dividend+2)^(0+128),f
  1879  03EC  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1880  03ED  1C03               	skipc
  1881  03EE  0F23               	incfsz	(___aldiv@divisor+3)^(0+128),w
  1882  03EF  02A7               	subwf	(___aldiv@dividend+3)^(0+128),f
  1883  03F0                     l2420:
  1884  03F0  142B               	bsf	___aldiv@quotient^(0+128),0
  1885  03F1                     l2422:
  1886  03F1  3001               	movlw	1
  1887  03F2                     u2445:
  1888  03F2  1003               	clrc
  1889  03F3  0CA3               	rrf	(___aldiv@divisor+3)^(0+128),f
  1890  03F4  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  1891  03F5  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  1892  03F6  0CA0               	rrf	___aldiv@divisor^(0+128),f
  1893  03F7  3EFF               	addlw	-1
  1894  03F8  1D03               	skipz
  1895  03F9  2BF2               	goto	u2445
  1896  03FA                     l2424:
  1897  03FA  3001               	movlw	1
  1898  03FB  02A9               	subwf	___aldiv@counter^(0+128),f
  1899  03FC  1D03               	btfss	3,2
  1900  03FD  2BFF               	goto	u2451
  1901  03FE  2C00               	goto	u2450
  1902  03FF                     u2451:
  1903  03FF  2BC7               	goto	l2414
  1904  0400                     u2450:
  1905  0400                     l2426:
  1906  0400  082A               	movf	___aldiv@sign^(0+128),w
  1907  0401  1903               	btfsc	3,2
  1908  0402  2C04               	goto	u2461
  1909  0403  2C05               	goto	u2460
  1910  0404                     u2461:
  1911  0404  2C10               	goto	l2430
  1912  0405                     u2460:
  1913  0405                     l2428:
  1914  0405  09AB               	comf	___aldiv@quotient^(0+128),f
  1915  0406  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  1916  0407  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  1917  0408  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  1918  0409  0AAB               	incf	___aldiv@quotient^(0+128),f
  1919  040A  1903               	skipnz
  1920  040B  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  1921  040C  1903               	skipnz
  1922  040D  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  1923  040E  1903               	skipnz
  1924  040F  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  1925  0410                     l2430:
  1926  0410  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  1927  0411  00A3               	movwf	(?___aldiv+3)^(0+128)
  1928  0412  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  1929  0413  00A2               	movwf	(?___aldiv+2)^(0+128)
  1930  0414  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  1931  0415  00A1               	movwf	(?___aldiv+1)^(0+128)
  1932  0416  082B               	movf	___aldiv@quotient^(0+128),w
  1933  0417  00A0               	movwf	?___aldiv^(0+128)
  1934  0418                     l439:
  1935  0418  0008               	return
  1936  0419                     __end_of___aldiv:
  1937                           
  1938                           	psect	text4
  1939  0562                     __ptext4:	
  1940 ;; *************** function _LCDInit *****************
  1941 ;; Defined at:
  1942 ;;		line 193 in file "lcd_hd44780_pic16.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  style           1    wreg     unsigned char 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  style           1   14[BANK1 ] unsigned char 
  1947 ;;  __i             1   15[BANK1 ] unsigned char 
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  1    wreg      void 
  1950 ;; Registers used:
  1951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1957 ;;      Params:         0       0       0       0       0
  1958 ;;      Locals:         0       0       2       0       0
  1959 ;;      Temps:          0       0       2       0       0
  1960 ;;      Totals:         0       0       4       0       0
  1961 ;;Total ram usage:        4 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:    7
  1964 ;; This function calls:
  1965 ;;		_LCDBusyLoop
  1966 ;;		_LCDByte
  1967 ;; This function is called by:
  1968 ;;		_main
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           
  1973                           ;psect for function _LCDInit
  1974  0562                     _LCDInit:
  1975                           
  1976                           ;incstack = 0
  1977                           ; Regs used in _LCDInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1978                           ;LCDInit@style stored from wreg
  1979  0562  1683               	bsf	3,5	;RP0=1, select bank1
  1980  0563  1303               	bcf	3,6	;RP1=0, select bank1
  1981  0564  00AE               	movwf	LCDInit@style^(0+128)
  1982  0565                     l2518:
  1983                           
  1984                           ;lcd_hd44780_pic16.c: 193: void LCDInit(uint8_t style);lcd_hd44780_pic16.c: 194: {;lcd_h
      +                          d44780_pic16.c: 209:  _delay((unsigned long)((30)*(20000000/4000.0)));
  1985  0565  30C3               	movlw	195
  1986  0566  1683               	bsf	3,5	;RP0=1, select bank1
  1987  0567  1303               	bcf	3,6	;RP1=0, select bank1
  1988  0568  00AD               	movwf	(??_LCDInit^(0+128)+1)
  1989  0569  30CC               	movlw	204
  1990  056A  00AC               	movwf	??_LCDInit^(0+128)
  1991  056B                     u2647:
  1992  056B  0BAC               	decfsz	??_LCDInit^(0+128),f
  1993  056C  2D6B               	goto	u2647
  1994  056D  0BAD               	decfsz	(??_LCDInit^(0+128)+1),f
  1995  056E  2D6B               	goto	u2647
  1996  056F  0000               	nop
  1997  0570                     l2520:
  1998                           
  1999                           ;lcd_hd44780_pic16.c: 212:  TRISD&=(~(0x0F<<4));
  2000  0570  300F               	movlw	15
  2001  0571  1683               	bsf	3,5	;RP0=1, select bank1
  2002  0572  1303               	bcf	3,6	;RP1=0, select bank1
  2003  0573  00AC               	movwf	??_LCDInit^(0+128)
  2004  0574  082C               	movf	??_LCDInit^(0+128),w
  2005  0575  0588               	andwf	8,f	;volatile
  2006  0576                     l2522:
  2007                           
  2008                           ;lcd_hd44780_pic16.c: 214:         TRISDbits.TRISD3=0;
  2009  0576  1188               	bcf	8,3	;volatile
  2010  0577                     l2524:
  2011                           
  2012                           ;lcd_hd44780_pic16.c: 215:         TRISDbits.TRISD1=0;
  2013  0577  1088               	bcf	8,1	;volatile
  2014  0578                     l2526:
  2015                           
  2016                           ;lcd_hd44780_pic16.c: 216:         TRISDbits.TRISD2=0;
  2017  0578  1108               	bcf	8,2	;volatile
  2018  0579                     l2528:
  2019                           
  2020                           ;lcd_hd44780_pic16.c: 218:  PORTD&=(~(0x0F<<4));
  2021  0579  300F               	movlw	15
  2022  057A  00AC               	movwf	??_LCDInit^(0+128)
  2023  057B  082C               	movf	??_LCDInit^(0+128),w
  2024  057C  1283               	bcf	3,5	;RP0=0, select bank0
  2025  057D  1303               	bcf	3,6	;RP1=0, select bank0
  2026  057E  0588               	andwf	8,f	;volatile
  2027  057F                     l2530:
  2028                           
  2029                           ;lcd_hd44780_pic16.c: 220:         (RD3=0);
  2030  057F  1188               	bcf	8,3	;volatile
  2031  0580                     l2532:
  2032                           
  2033                           ;lcd_hd44780_pic16.c: 221:  (RD2=0);
  2034  0580  1108               	bcf	8,2	;volatile
  2035  0581                     l2534:
  2036                           
  2037                           ;lcd_hd44780_pic16.c: 222:  (RD1=0);
  2038  0581  1088               	bcf	8,1	;volatile
  2039  0582                     l2536:
  2040                           
  2041                           ;lcd_hd44780_pic16.c: 225:  _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  2042  0582  2D83               	nop2	;2 cycle nop
  2043  0583                     l2538:
  2044                           
  2045                           ;lcd_hd44780_pic16.c: 227:  (RD3=1);
  2046  0583  1283               	bcf	3,5	;RP0=0, select bank0
  2047  0584  1303               	bcf	3,6	;RP1=0, select bank0
  2048  0585  1588               	bsf	8,3	;volatile
  2049  0586                     l2540:
  2050                           
  2051                           ;lcd_hd44780_pic16.c: 228:  PORTD|=((0b00000010)<<4);
  2052  0586  1688               	bsf	8,5	;volatile
  2053  0587                     l2542:
  2054                           
  2055                           ;lcd_hd44780_pic16.c: 229:  _delay((unsigned long)((1)*(20000000/4000000.0)));
  2056  0587  2D88               	nop2	;2 cycle nop
  2057  0588  2D89               	nop2	;2 cycle nop
  2058  0589  0000               	nop
  2059  058A                     l2544:
  2060                           
  2061                           ;lcd_hd44780_pic16.c: 230:  (RD3=0);
  2062  058A  1283               	bcf	3,5	;RP0=0, select bank0
  2063  058B  1303               	bcf	3,6	;RP1=0, select bank0
  2064  058C  1188               	bcf	8,3	;volatile
  2065  058D                     l2546:
  2066                           
  2067                           ;lcd_hd44780_pic16.c: 231:  _delay((unsigned long)((1)*(20000000/4000000.0)));
  2068  058D  2D8E               	nop2	;2 cycle nop
  2069  058E  2D8F               	nop2	;2 cycle nop
  2070  058F  0000               	nop
  2071  0590                     l2548:
  2072                           
  2073                           ;lcd_hd44780_pic16.c: 234:  LCDBusyLoop();
  2074  0590  120A  118A  2488  120A  118A  	fcall	_LCDBusyLoop
  2075  0595                     l2550:
  2076                           
  2077                           ;lcd_hd44780_pic16.c: 239:  (LCDByte(0b00101000,0));
  2078  0595  1683               	bsf	3,5	;RP0=1, select bank1
  2079  0596  1303               	bcf	3,6	;RP1=0, select bank1
  2080  0597  01A5               	clrf	LCDByte@isdata^(0+128)
  2081  0598  3028               	movlw	40
  2082  0599  120A  118A  2419  120A  118A  	fcall	_LCDByte
  2083  059E                     l2552:
  2084                           
  2085                           ;lcd_hd44780_pic16.c: 240:         (LCDByte(0b00001100|style,0));
  2086  059E  1683               	bsf	3,5	;RP0=1, select bank1
  2087  059F  1303               	bcf	3,6	;RP1=0, select bank1
  2088  05A0  01A5               	clrf	LCDByte@isdata^(0+128)
  2089  05A1  082E               	movf	LCDInit@style^(0+128),w
  2090  05A2  380C               	iorlw	12
  2091  05A3  120A  118A  2419  120A  118A  	fcall	_LCDByte
  2092  05A8                     l2554:
  2093                           
  2094                           ;lcd_hd44780_pic16.c: 243:         (LCDByte(0b01000000,0));
  2095  05A8  1683               	bsf	3,5	;RP0=1, select bank1
  2096  05A9  1303               	bcf	3,6	;RP1=0, select bank1
  2097  05AA  01A5               	clrf	LCDByte@isdata^(0+128)
  2098  05AB  3040               	movlw	64
  2099  05AC  120A  118A  2419  120A  118A  	fcall	_LCDByte
  2100  05B1                     l2556:
  2101                           
  2102                           ;lcd_hd44780_pic16.c: 245:  uint8_t __i;;lcd_hd44780_pic16.c: 246:  for(__i=0;__i<sizeof
      +                          (__cgram);__i++)
  2103  05B1  1683               	bsf	3,5	;RP0=1, select bank1
  2104  05B2  1303               	bcf	3,6	;RP1=0, select bank1
  2105  05B3  01AF               	clrf	LCDInit@__i^(0+128)
  2106  05B4                     l2562:
  2107                           
  2108                           ;lcd_hd44780_pic16.c: 247:   (LCDByte(__cgram[__i],1));
  2109  05B4  01A5               	clrf	LCDByte@isdata^(0+128)
  2110  05B5  0AA5               	incf	LCDByte@isdata^(0+128),f
  2111  05B6  082F               	movf	LCDInit@__i^(0+128),w
  2112  05B7  3E90               	addlw	(low (___cgram| (0+256)))& (0+255)
  2113  05B8  0084               	movwf	4
  2114  05B9  1783               	bsf	3,7	;select IRP bank3
  2115  05BA  0800               	movf	0,w
  2116  05BB  120A  118A  2419  120A  118A  	fcall	_LCDByte
  2117  05C0                     l2564:
  2118  05C0  3001               	movlw	1
  2119  05C1  1683               	bsf	3,5	;RP0=1, select bank1
  2120  05C2  1303               	bcf	3,6	;RP1=0, select bank1
  2121  05C3  00AC               	movwf	??_LCDInit^(0+128)
  2122  05C4  082C               	movf	??_LCDInit^(0+128),w
  2123  05C5  07AF               	addwf	LCDInit@__i^(0+128),f
  2124  05C6                     l2566:
  2125  05C6  3040               	movlw	64
  2126  05C7  022F               	subwf	LCDInit@__i^(0+128),w
  2127  05C8  1C03               	skipc
  2128  05C9  2DCB               	goto	u2621
  2129  05CA  2DCC               	goto	u2620
  2130  05CB                     u2621:
  2131  05CB  2DB4               	goto	l2562
  2132  05CC                     u2620:
  2133  05CC                     l242:
  2134  05CC  0008               	return
  2135  05CD                     __end_of_LCDInit:
  2136                           
  2137                           	psect	text5
  2138  0419                     __ptext5:	
  2139 ;; *************** function _LCDByte *****************
  2140 ;; Defined at:
  2141 ;;		line 80 in file "lcd_hd44780_pic16.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;  c               1    wreg     unsigned char 
  2144 ;;  isdata          1    5[BANK1 ] unsigned char 
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;  c               1   10[BANK1 ] unsigned char 
  2147 ;;  temp            1   11[BANK1 ] unsigned char 
  2148 ;;  ln              1    9[BANK1 ] unsigned char 
  2149 ;;  hn              1    8[BANK1 ] unsigned char 
  2150 ;; Return value:  Size  Location     Type
  2151 ;;                  1    wreg      void 
  2152 ;; Registers used:
  2153 ;;		wreg, status,2, status,0, pclath, cstack
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2159 ;;      Params:         0       0       1       0       0
  2160 ;;      Locals:         0       0       4       0       0
  2161 ;;      Temps:          0       0       2       0       0
  2162 ;;      Totals:         0       0       7       0       0
  2163 ;;Total ram usage:        7 bytes
  2164 ;; Hardware stack levels used:    1
  2165 ;; Hardware stack levels required when called:    6
  2166 ;; This function calls:
  2167 ;;		_LCDBusyLoop
  2168 ;; This function is called by:
  2169 ;;		_LCDInit
  2170 ;;		_LCDGotoXY
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174                           
  2175                           ;psect for function _LCDByte
  2176  0419                     _LCDByte:
  2177                           
  2178                           ;incstack = 0
  2179                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  2180                           ;LCDByte@c stored from wreg
  2181  0419  1683               	bsf	3,5	;RP0=1, select bank1
  2182  041A  1303               	bcf	3,6	;RP1=0, select bank1
  2183  041B  00AA               	movwf	LCDByte@c^(0+128)
  2184  041C                     l2364:
  2185                           
  2186                           ;lcd_hd44780_pic16.c: 80: void LCDByte(uint8_t c,uint8_t isdata);lcd_hd44780_pic16.c: 81
      +                          : {;lcd_hd44780_pic16.c: 89: uint8_t hn,ln;;lcd_hd44780_pic16.c: 90: uint8_t temp;;lcd_h
      +                          d44780_pic16.c: 92: hn=c>>4;
  2187  041C  082A               	movf	LCDByte@c^(0+128),w
  2188  041D  00A6               	movwf	??_LCDByte^(0+128)
  2189  041E  3004               	movlw	4
  2190  041F                     u2335:
  2191  041F  1003               	clrc
  2192  0420  0CA6               	rrf	??_LCDByte^(0+128),f
  2193  0421  3EFF               	addlw	-1
  2194  0422  1D03               	skipz
  2195  0423  2C1F               	goto	u2335
  2196  0424  0826               	movf	??_LCDByte^(0+128),w
  2197  0425  00A7               	movwf	(??_LCDByte+1)^(0+128)
  2198  0426  0827               	movf	(??_LCDByte+1)^(0+128),w
  2199  0427  00A8               	movwf	LCDByte@hn^(0+128)
  2200  0428                     l2366:
  2201                           
  2202                           ;lcd_hd44780_pic16.c: 93: ln=(c & 0x0F);
  2203  0428  082A               	movf	LCDByte@c^(0+128),w
  2204  0429  390F               	andlw	15
  2205  042A  00A6               	movwf	??_LCDByte^(0+128)
  2206  042B  0826               	movf	??_LCDByte^(0+128),w
  2207  042C  00A9               	movwf	LCDByte@ln^(0+128)
  2208  042D                     l2368:
  2209                           
  2210                           ;lcd_hd44780_pic16.c: 95: if(isdata==0)
  2211  042D  0825               	movf	LCDByte@isdata^(0+128),w
  2212  042E  1D03               	btfss	3,2
  2213  042F  2C31               	goto	u2341
  2214  0430  2C32               	goto	u2340
  2215  0431                     u2341:
  2216  0431  2C36               	goto	l230
  2217  0432                     u2340:
  2218  0432                     l2370:
  2219                           
  2220                           ;lcd_hd44780_pic16.c: 96:  (RD1=0);
  2221  0432  1283               	bcf	3,5	;RP0=0, select bank0
  2222  0433  1303               	bcf	3,6	;RP1=0, select bank0
  2223  0434  1088               	bcf	8,1	;volatile
  2224  0435  2C39               	goto	l231
  2225  0436                     l230:	
  2226                           ;lcd_hd44780_pic16.c: 97: else
  2227                           
  2228                           
  2229                           ;lcd_hd44780_pic16.c: 98:  (RD1=1);
  2230  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2232  0438  1488               	bsf	8,1	;volatile
  2233  0439                     l231:
  2234                           
  2235                           ;lcd_hd44780_pic16.c: 100: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  2236  0439  2C3A               	nop2	;2 cycle nop
  2237                           
  2238                           ;lcd_hd44780_pic16.c: 102: (RD3=1);
  2239  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2240  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2241  043C  1588               	bsf	8,3	;volatile
  2242  043D                     l2372:
  2243                           
  2244                           ;lcd_hd44780_pic16.c: 106: temp=(PORTD & (~(0X0F<<4)))|((hn<<4));
  2245  043D  1683               	bsf	3,5	;RP0=1, select bank1
  2246  043E  1303               	bcf	3,6	;RP1=0, select bank1
  2247  043F  0828               	movf	LCDByte@hn^(0+128),w
  2248  0440  00A6               	movwf	??_LCDByte^(0+128)
  2249  0441  3004               	movlw	4
  2250  0442                     u2355:
  2251  0442  1003               	clrc
  2252  0443  0DA6               	rlf	??_LCDByte^(0+128),f
  2253  0444  3EFF               	addlw	-1
  2254  0445  1D03               	skipz
  2255  0446  2C42               	goto	u2355
  2256  0447  1283               	bcf	3,5	;RP0=0, select bank0
  2257  0448  1303               	bcf	3,6	;RP1=0, select bank0
  2258  0449  0808               	movf	8,w	;volatile
  2259  044A  390F               	andlw	15
  2260  044B  1683               	bsf	3,5	;RP0=1, select bank1
  2261  044C  1303               	bcf	3,6	;RP1=0, select bank1
  2262  044D  0426               	iorwf	??_LCDByte^(0+128),w
  2263  044E  00A7               	movwf	(??_LCDByte+1)^(0+128)
  2264  044F  0827               	movf	(??_LCDByte+1)^(0+128),w
  2265  0450  00AB               	movwf	LCDByte@temp^(0+128)
  2266  0451                     l2374:
  2267                           
  2268                           ;lcd_hd44780_pic16.c: 107: PORTD=temp;
  2269  0451  082B               	movf	LCDByte@temp^(0+128),w
  2270  0452  1283               	bcf	3,5	;RP0=0, select bank0
  2271  0453  1303               	bcf	3,6	;RP1=0, select bank0
  2272  0454  0088               	movwf	8	;volatile
  2273  0455                     l2376:
  2274                           
  2275                           ;lcd_hd44780_pic16.c: 109: _delay((unsigned long)((1)*(20000000/4000000.0)));
  2276  0455  2C56               	nop2	;2 cycle nop
  2277  0456  2C57               	nop2	;2 cycle nop
  2278  0457  0000               	nop
  2279  0458                     l2378:
  2280                           
  2281                           ;lcd_hd44780_pic16.c: 113: (RD3=0);
  2282  0458  1283               	bcf	3,5	;RP0=0, select bank0
  2283  0459  1303               	bcf	3,6	;RP1=0, select bank0
  2284  045A  1188               	bcf	8,3	;volatile
  2285  045B                     l2380:
  2286                           
  2287                           ;lcd_hd44780_pic16.c: 115: _delay((unsigned long)((1)*(20000000/4000000.0)));
  2288  045B  2C5C               	nop2	;2 cycle nop
  2289  045C  2C5D               	nop2	;2 cycle nop
  2290  045D  0000               	nop
  2291  045E                     l2382:
  2292                           
  2293                           ;lcd_hd44780_pic16.c: 118: (RD3=1);
  2294  045E  1283               	bcf	3,5	;RP0=0, select bank0
  2295  045F  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0460  1588               	bsf	8,3	;volatile
  2297  0461                     l2384:
  2298                           
  2299                           ;lcd_hd44780_pic16.c: 120: temp=(PORTD & (~(0X0F<<4)))|((ln<<4));
  2300  0461  1683               	bsf	3,5	;RP0=1, select bank1
  2301  0462  1303               	bcf	3,6	;RP1=0, select bank1
  2302  0463  0829               	movf	LCDByte@ln^(0+128),w
  2303  0464  00A6               	movwf	??_LCDByte^(0+128)
  2304  0465  3004               	movlw	4
  2305  0466                     u2365:
  2306  0466  1003               	clrc
  2307  0467  0DA6               	rlf	??_LCDByte^(0+128),f
  2308  0468  3EFF               	addlw	-1
  2309  0469  1D03               	skipz
  2310  046A  2C66               	goto	u2365
  2311  046B  1283               	bcf	3,5	;RP0=0, select bank0
  2312  046C  1303               	bcf	3,6	;RP1=0, select bank0
  2313  046D  0808               	movf	8,w	;volatile
  2314  046E  390F               	andlw	15
  2315  046F  1683               	bsf	3,5	;RP0=1, select bank1
  2316  0470  1303               	bcf	3,6	;RP1=0, select bank1
  2317  0471  0426               	iorwf	??_LCDByte^(0+128),w
  2318  0472  00A7               	movwf	(??_LCDByte+1)^(0+128)
  2319  0473  0827               	movf	(??_LCDByte+1)^(0+128),w
  2320  0474  00AB               	movwf	LCDByte@temp^(0+128)
  2321                           
  2322                           ;lcd_hd44780_pic16.c: 122: PORTD=temp;
  2323  0475  082B               	movf	LCDByte@temp^(0+128),w
  2324  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2325  0477  1303               	bcf	3,6	;RP1=0, select bank0
  2326  0478  0088               	movwf	8	;volatile
  2327  0479                     l2386:
  2328                           
  2329                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((1)*(20000000/4000000.0)));
  2330  0479  2C7A               	nop2	;2 cycle nop
  2331  047A  2C7B               	nop2	;2 cycle nop
  2332  047B  0000               	nop
  2333  047C                     l2388:
  2334                           
  2335                           ;lcd_hd44780_pic16.c: 128: (RD3=0);
  2336  047C  1283               	bcf	3,5	;RP0=0, select bank0
  2337  047D  1303               	bcf	3,6	;RP1=0, select bank0
  2338  047E  1188               	bcf	8,3	;volatile
  2339  047F                     l2390:
  2340                           
  2341                           ;lcd_hd44780_pic16.c: 130: _delay((unsigned long)((1)*(20000000/4000000.0)));
  2342  047F  2C80               	nop2	;2 cycle nop
  2343  0480  2C81               	nop2	;2 cycle nop
  2344  0481  0000               	nop
  2345  0482                     l2392:
  2346                           
  2347                           ;lcd_hd44780_pic16.c: 132: LCDBusyLoop();
  2348  0482  120A  118A  2488  120A  118A  	fcall	_LCDBusyLoop
  2349  0487                     l232:
  2350  0487  0008               	return
  2351  0488                     __end_of_LCDByte:
  2352                           
  2353                           	psect	text6
  2354  0488                     __ptext6:	
  2355 ;; *************** function _LCDBusyLoop *****************
  2356 ;; Defined at:
  2357 ;;		line 135 in file "lcd_hd44780_pic16.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;		None
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  status          1    4[BANK1 ] unsigned char 
  2362 ;;  temp            1    3[BANK1 ] unsigned char 
  2363 ;;  busy            1    2[BANK1 ] unsigned char 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      void 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2373 ;;      Params:         0       0       0       0       0
  2374 ;;      Locals:         0       0       3       0       0
  2375 ;;      Temps:          0       0       2       0       0
  2376 ;;      Totals:         0       0       5       0       0
  2377 ;;Total ram usage:        5 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    5
  2380 ;; This function calls:
  2381 ;;		Nothing
  2382 ;; This function is called by:
  2383 ;;		_LCDByte
  2384 ;;		_LCDInit
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           
  2389                           ;psect for function _LCDBusyLoop
  2390  0488                     _LCDBusyLoop:
  2391  0488                     l2318:	
  2392                           ;incstack = 0
  2393                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  2394                           
  2395  0488                     l2320:
  2396                           
  2397                           ;lcd_hd44780_pic16.c: 142:  TRISD|=(0x0f<<4);
  2398  0488  30F0               	movlw	240
  2399  0489  1683               	bsf	3,5	;RP0=1, select bank1
  2400  048A  1303               	bcf	3,6	;RP1=0, select bank1
  2401  048B  00A0               	movwf	??_LCDBusyLoop^(0+128)
  2402  048C  0820               	movf	??_LCDBusyLoop^(0+128),w
  2403  048D  0488               	iorwf	8,f	;volatile
  2404  048E                     l2322:
  2405                           
  2406                           ;lcd_hd44780_pic16.c: 145:  (RD2=1);
  2407  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2408  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2409  0490  1508               	bsf	8,2	;volatile
  2410  0491                     l2324:
  2411                           
  2412                           ;lcd_hd44780_pic16.c: 146:  (RD1=0);
  2413  0491  1088               	bcf	8,1	;volatile
  2414  0492                     l2326:
  2415                           
  2416                           ;lcd_hd44780_pic16.c: 150:  _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  2417  0492  2C93               	nop2	;2 cycle nop
  2418  0493                     l2328:
  2419                           
  2420                           ;lcd_hd44780_pic16.c: 154:  {;lcd_hd44780_pic16.c: 156:   (RD3=1);
  2421  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2422  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2423  0495  1588               	bsf	8,3	;volatile
  2424  0496                     l2330:
  2425                           
  2426                           ;lcd_hd44780_pic16.c: 159:   _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  2427  0496  2C97               	nop2	;2 cycle nop
  2428  0497                     l2332:
  2429                           
  2430                           ;lcd_hd44780_pic16.c: 161:   status=(PORTD>>4);
  2431  0497  1283               	bcf	3,5	;RP0=0, select bank0
  2432  0498  1303               	bcf	3,6	;RP1=0, select bank0
  2433  0499  0808               	movf	8,w	;volatile
  2434  049A  1683               	bsf	3,5	;RP0=1, select bank1
  2435  049B  1303               	bcf	3,6	;RP1=0, select bank1
  2436  049C  00A0               	movwf	??_LCDBusyLoop^(0+128)
  2437  049D  3004               	movlw	4
  2438  049E                     u2295:
  2439  049E  1003               	clrc
  2440  049F  0CA0               	rrf	??_LCDBusyLoop^(0+128),f
  2441  04A0  3EFF               	addlw	-1
  2442  04A1  1D03               	skipz
  2443  04A2  2C9E               	goto	u2295
  2444  04A3  0820               	movf	??_LCDBusyLoop^(0+128),w
  2445  04A4  00A1               	movwf	(??_LCDBusyLoop+1)^(0+128)
  2446  04A5  0821               	movf	(??_LCDBusyLoop+1)^(0+128),w
  2447  04A6  00A4               	movwf	LCDBusyLoop@status^(0+128)
  2448  04A7                     l2334:
  2449                           
  2450                           ;lcd_hd44780_pic16.c: 162:   status=status<<4;
  2451  04A7  0824               	movf	LCDBusyLoop@status^(0+128),w
  2452  04A8  00A0               	movwf	??_LCDBusyLoop^(0+128)
  2453  04A9  3003               	movlw	3
  2454  04AA                     u2305:
  2455  04AA  1003               	clrc
  2456  04AB  0DA0               	rlf	??_LCDBusyLoop^(0+128),f
  2457  04AC  3EFF               	addlw	-1
  2458  04AD  1D03               	skipz
  2459  04AE  2CAA               	goto	u2305
  2460  04AF  1003               	clrc
  2461  04B0  0D20               	rlf	??_LCDBusyLoop^(0+128),w
  2462  04B1  00A1               	movwf	(??_LCDBusyLoop+1)^(0+128)
  2463  04B2  0821               	movf	(??_LCDBusyLoop+1)^(0+128),w
  2464  04B3  00A4               	movwf	LCDBusyLoop@status^(0+128)
  2465  04B4                     l2336:
  2466                           
  2467                           ;lcd_hd44780_pic16.c: 164:   _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  2468  04B4  2CB5               	nop2	;2 cycle nop
  2469  04B5                     l2338:
  2470                           
  2471                           ;lcd_hd44780_pic16.c: 167:   (RD3=0);
  2472  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  2473  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  2474  04B7  1188               	bcf	8,3	;volatile
  2475  04B8                     l2340:
  2476                           
  2477                           ;lcd_hd44780_pic16.c: 168:   _delay((unsigned long)((1)*(20000000/4000000.0)));
  2478  04B8  2CB9               	nop2	;2 cycle nop
  2479  04B9  2CBA               	nop2	;2 cycle nop
  2480  04BA  0000               	nop
  2481  04BB                     l2342:
  2482                           
  2483                           ;lcd_hd44780_pic16.c: 170:   (RD3=1);
  2484  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  2485  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  2486  04BD  1588               	bsf	8,3	;volatile
  2487  04BE                     l2344:
  2488                           
  2489                           ;lcd_hd44780_pic16.c: 171:   _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  2490  04BE  2CBF               	nop2	;2 cycle nop
  2491  04BF                     l2346:
  2492                           
  2493                           ;lcd_hd44780_pic16.c: 173:   temp=(PORTD>>4);
  2494  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  2495  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  2496  04C1  0808               	movf	8,w	;volatile
  2497  04C2  1683               	bsf	3,5	;RP0=1, select bank1
  2498  04C3  1303               	bcf	3,6	;RP1=0, select bank1
  2499  04C4  00A0               	movwf	??_LCDBusyLoop^(0+128)
  2500  04C5  3004               	movlw	4
  2501  04C6                     u2315:
  2502  04C6  1003               	clrc
  2503  04C7  0CA0               	rrf	??_LCDBusyLoop^(0+128),f
  2504  04C8  3EFF               	addlw	-1
  2505  04C9  1D03               	skipz
  2506  04CA  2CC6               	goto	u2315
  2507  04CB  0820               	movf	??_LCDBusyLoop^(0+128),w
  2508  04CC  00A1               	movwf	(??_LCDBusyLoop+1)^(0+128)
  2509  04CD  0821               	movf	(??_LCDBusyLoop+1)^(0+128),w
  2510  04CE  00A3               	movwf	LCDBusyLoop@temp^(0+128)
  2511  04CF                     l2348:
  2512                           
  2513                           ;lcd_hd44780_pic16.c: 174:   temp&=0x0F;
  2514  04CF  300F               	movlw	15
  2515  04D0  00A0               	movwf	??_LCDBusyLoop^(0+128)
  2516  04D1  0820               	movf	??_LCDBusyLoop^(0+128),w
  2517  04D2  05A3               	andwf	LCDBusyLoop@temp^(0+128),f
  2518  04D3                     l2350:
  2519                           
  2520                           ;lcd_hd44780_pic16.c: 176:   status=status|temp;
  2521  04D3  0824               	movf	LCDBusyLoop@status^(0+128),w
  2522  04D4  0423               	iorwf	LCDBusyLoop@temp^(0+128),w
  2523  04D5  00A0               	movwf	??_LCDBusyLoop^(0+128)
  2524  04D6  0820               	movf	??_LCDBusyLoop^(0+128),w
  2525  04D7  00A4               	movwf	LCDBusyLoop@status^(0+128)
  2526  04D8                     l2352:
  2527                           
  2528                           ;lcd_hd44780_pic16.c: 178:   busy=status & 0b10000000;
  2529  04D8  0824               	movf	LCDBusyLoop@status^(0+128),w
  2530  04D9  3980               	andlw	128
  2531  04DA  00A0               	movwf	??_LCDBusyLoop^(0+128)
  2532  04DB  0820               	movf	??_LCDBusyLoop^(0+128),w
  2533  04DC  00A2               	movwf	LCDBusyLoop@busy^(0+128)
  2534  04DD                     l2354:
  2535                           
  2536                           ;lcd_hd44780_pic16.c: 180:   _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  2537  04DD  2CDE               	nop2	;2 cycle nop
  2538  04DE                     l2356:
  2539                           
  2540                           ;lcd_hd44780_pic16.c: 182:                 (RD3=0);
  2541  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  2542  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  2543  04E0  1188               	bcf	8,3	;volatile
  2544  04E1                     l2358:
  2545                           
  2546                           ;lcd_hd44780_pic16.c: 183:   _delay((unsigned long)((1)*(20000000/4000000.0)));
  2547  04E1  2CE2               	nop2	;2 cycle nop
  2548  04E2  2CE3               	nop2	;2 cycle nop
  2549  04E3  0000               	nop
  2550  04E4                     l2360:
  2551                           
  2552                           ;lcd_hd44780_pic16.c: 184:  }while(busy);
  2553  04E4  1683               	bsf	3,5	;RP0=1, select bank1
  2554  04E5  1303               	bcf	3,6	;RP1=0, select bank1
  2555  04E6  0822               	movf	LCDBusyLoop@busy^(0+128),w
  2556  04E7  1D03               	btfss	3,2
  2557  04E8  2CEA               	goto	u2321
  2558  04E9  2CEB               	goto	u2320
  2559  04EA                     u2321:
  2560  04EA  2C93               	goto	l2328
  2561  04EB                     u2320:
  2562  04EB                     l236:
  2563                           
  2564                           ;lcd_hd44780_pic16.c: 186:  (RD2=0);
  2565  04EB  1283               	bcf	3,5	;RP0=0, select bank0
  2566  04EC  1303               	bcf	3,6	;RP1=0, select bank0
  2567  04ED  1108               	bcf	8,2	;volatile
  2568  04EE                     l2362:
  2569                           
  2570                           ;lcd_hd44780_pic16.c: 189:  TRISD&=(~(0x0F<<4));
  2571  04EE  300F               	movlw	15
  2572  04EF  1683               	bsf	3,5	;RP0=1, select bank1
  2573  04F0  1303               	bcf	3,6	;RP1=0, select bank1
  2574  04F1  00A0               	movwf	??_LCDBusyLoop^(0+128)
  2575  04F2  0820               	movf	??_LCDBusyLoop^(0+128),w
  2576  04F3  0588               	andwf	8,f	;volatile
  2577  04F4                     l237:
  2578  04F4  0008               	return
  2579  04F5                     __end_of_LCDBusyLoop:
  2580                           
  2581                           	psect	text7
  2582  0F27                     __ptext7:	
  2583 ;; *************** function _INITSTEPPER *****************
  2584 ;; Defined at:
  2585 ;;		line 33 in file "MYSTEPPER.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2599 ;;      Params:         0       0       0       0       0
  2600 ;;      Locals:         0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0
  2602 ;;      Totals:         0       0       0       0       0
  2603 ;;Total ram usage:        0 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    5
  2606 ;; This function calls:
  2607 ;;		Nothing
  2608 ;; This function is called by:
  2609 ;;		_main
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           
  2614                           ;psect for function _INITSTEPPER
  2615  0F27                     _INITSTEPPER:
  2616  0F27                     l2472:	
  2617                           ;incstack = 0
  2618                           ; Regs used in _INITSTEPPER: [wreg+status,2]
  2619                           
  2620                           
  2621                           ;MYSTEPPER.c: 35:    TRISA = 0x00;
  2622  0F27  1683               	bsf	3,5	;RP0=1, select bank1
  2623  0F28  1303               	bcf	3,6	;RP1=0, select bank1
  2624  0F29  0185               	clrf	5	;volatile
  2625                           
  2626                           ;MYSTEPPER.c: 36:    PORTA = 0x00;
  2627  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  2628  0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  2629  0F2C  0185               	clrf	5	;volatile
  2630  0F2D                     l2474:
  2631                           
  2632                           ;MYSTEPPER.c: 37:    flag = 1;
  2633  0F2D  3001               	movlw	1
  2634  0F2E  1683               	bsf	3,5	;RP0=1, select bank1
  2635  0F2F  1303               	bcf	3,6	;RP1=0, select bank1
  2636  0F30  00CC               	movwf	_flag^(0+128)
  2637  0F31  3000               	movlw	0
  2638  0F32  00CD               	movwf	(_flag^(0+128)+1)
  2639  0F33                     l15:
  2640  0F33  0008               	return
  2641  0F34                     __end_of_INITSTEPPER:
  2642                           
  2643                           	psect	text8
  2644  0F04                     __ptext8:	
  2645 ;; *************** function _INITH *****************
  2646 ;; Defined at:
  2647 ;;		line 13 in file "HARDWARE_INTRP.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;		None
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;		None
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  1    wreg      void 
  2654 ;; Registers used:
  2655 ;;		wreg, status,2
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2661 ;;      Params:         0       0       0       0       0
  2662 ;;      Locals:         0       0       0       0       0
  2663 ;;      Temps:          0       0       0       0       0
  2664 ;;      Totals:         0       0       0       0       0
  2665 ;;Total ram usage:        0 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; Hardware stack levels required when called:    5
  2668 ;; This function calls:
  2669 ;;		Nothing
  2670 ;; This function is called by:
  2671 ;;		_main
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           
  2676                           ;psect for function _INITH
  2677  0F04                     _INITH:
  2678  0F04                     l2506:	
  2679                           ;incstack = 0
  2680                           ; Regs used in _INITH: [wreg+status,2]
  2681                           
  2682                           
  2683                           ;HARDWARE_INTRP.c: 15:     TRISB = (1<<0);
  2684  0F04  3001               	movlw	1
  2685  0F05  1683               	bsf	3,5	;RP0=1, select bank1
  2686  0F06  1303               	bcf	3,6	;RP1=0, select bank1
  2687  0F07  0086               	movwf	6	;volatile
  2688  0F08                     l2508:
  2689                           
  2690                           ;HARDWARE_INTRP.c: 16:     OPTION_REG =0x00;
  2691  0F08  0181               	clrf	1	;volatile
  2692  0F09                     l2510:
  2693                           
  2694                           ;HARDWARE_INTRP.c: 17:     OPTION_REGbits.INTEDG = 1;
  2695  0F09  1701               	bsf	1,6	;volatile
  2696  0F0A                     l2512:
  2697                           
  2698                           ;HARDWARE_INTRP.c: 18:     INTE = 1;
  2699  0F0A  160B               	bsf	11,4	;volatile
  2700  0F0B                     l2514:
  2701                           
  2702                           ;HARDWARE_INTRP.c: 19:     GIE = 1;
  2703  0F0B  178B               	bsf	11,7	;volatile
  2704  0F0C                     l2516:
  2705                           
  2706                           ;HARDWARE_INTRP.c: 20:     PEIE = 1;
  2707  0F0C  170B               	bsf	11,6	;volatile
  2708  0F0D                     l102:
  2709  0F0D  0008               	return
  2710  0F0E                     __end_of_INITH:
  2711                           
  2712                           	psect	text9
  2713  0F70                     __ptext9:	
  2714 ;; *************** function _Timer_isr *****************
  2715 ;; Defined at:
  2716 ;;		line 80 in file "main.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;		None
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;		None
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  1    wreg      void 
  2723 ;; Registers used:
  2724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2730 ;;      Params:         0       0       0       0       0
  2731 ;;      Locals:         0       0       0       0       0
  2732 ;;      Temps:          0       4       0       0       0
  2733 ;;      Totals:         0       4       0       0       0
  2734 ;;Total ram usage:        4 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    4
  2737 ;; This function calls:
  2738 ;;		_INTR_CALL_WORK
  2739 ;; This function is called by:
  2740 ;;		Interrupt level 1
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           
  2745                           ;psect for function _Timer_isr
  2746  0F70                     _Timer_isr:
  2747  0F70                     i1l2286:
  2748                           
  2749                           ;main.c: 82:     GIE = 0;
  2750  0F70  138B               	bcf	11,7	;volatile
  2751                           
  2752                           ;main.c: 83:     if(INTF == 1)
  2753  0F71  1C8B               	btfss	11,1	;volatile
  2754  0F72  2F74               	goto	u227_21
  2755  0F73  2F75               	goto	u227_20
  2756  0F74                     u227_21:
  2757  0F74  2F7B               	goto	i1l2292
  2758  0F75                     u227_20:
  2759  0F75                     i1l2288:
  2760                           
  2761                           ;main.c: 84:     {;main.c: 85:         INTR_CALL_WORK();
  2762  0F75  120A  118A  2130  120A  158A  	fcall	_INTR_CALL_WORK
  2763  0F7A                     i1l2290:
  2764                           
  2765                           ;main.c: 86:         INTF = 0;
  2766  0F7A  108B               	bcf	11,1	;volatile
  2767  0F7B                     i1l2292:
  2768                           
  2769                           ;main.c: 88:       GIE = 1;
  2770  0F7B  178B               	bsf	11,7	;volatile
  2771  0F7C                     i1l82:
  2772  0F7C  1283               	bcf	3,5	;RP0=0, select bank0
  2773  0F7D  1303               	bcf	3,6	;RP1=0, select bank0
  2774  0F7E  083B               	movf	??_Timer_isr+3,w
  2775  0F7F  00FF               	movwf	btemp+1
  2776  0F80  083A               	movf	??_Timer_isr+2,w
  2777  0F81  008A               	movwf	10
  2778  0F82  0839               	movf	??_Timer_isr+1,w
  2779  0F83  0084               	movwf	4
  2780  0F84  0E38               	swapf	??_Timer_isr,w
  2781  0F85  0083               	movwf	3
  2782  0F86  0EFE               	swapf	btemp,f
  2783  0F87  0E7E               	swapf	btemp,w
  2784  0F88  0009               	retfie
  2785  0F89                     __end_of_Timer_isr:
  2786                           
  2787                           	psect	intentry
  2788  0004                     __pintentry:	
  2789                           ;incstack = 0
  2790                           ; Regs used in _Timer_isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2791                           
  2792  0004                     interrupt_function:
  2793  007E                     saved_w	set	btemp
  2794  0004  00FE               	movwf	btemp
  2795  0005  0E03               	swapf	3,w
  2796  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2797  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2798  0008  00B8               	movwf	??_Timer_isr
  2799  0009  0804               	movf	4,w
  2800  000A  00B9               	movwf	??_Timer_isr+1
  2801  000B  080A               	movf	10,w
  2802  000C  00BA               	movwf	??_Timer_isr+2
  2803  000D  087F               	movf	btemp+1,w
  2804  000E  00BB               	movwf	??_Timer_isr+3
  2805  000F  120A  158A  2F70   	ljmp	_Timer_isr
  2806                           
  2807                           	psect	text10
  2808  0130                     __ptext10:	
  2809 ;; *************** function _INTR_CALL_WORK *****************
  2810 ;; Defined at:
  2811 ;;		line 39 in file "main.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;		None
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;  i               2   20[BANK0 ] int 
  2816 ;;  flag            2   18[BANK0 ] int 
  2817 ;;  num             2   22[BANK0 ] int 
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  1    wreg      void 
  2820 ;; Registers used:
  2821 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2827 ;;      Params:         0       0       0       0       0
  2828 ;;      Locals:         0       6       0       0       0
  2829 ;;      Temps:          0       3       0       0       0
  2830 ;;      Totals:         0       9       0       0       0
  2831 ;;Total ram usage:        9 bytes
  2832 ;; Hardware stack levels used:    1
  2833 ;; Hardware stack levels required when called:    3
  2834 ;; This function calls:
  2835 ;;		_LCDWriteInt
  2836 ;;		_LCDWriteString
  2837 ;;		_STOP
  2838 ;;		___wmul
  2839 ;;		_get_str
  2840 ;;		_init_keypad
  2841 ;;		i1_INITSTEPPER
  2842 ;;		i1_LCDByte
  2843 ;; This function is called by:
  2844 ;;		_Timer_isr
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           
  2849                           ;psect for function _INTR_CALL_WORK
  2850  0130                     _INTR_CALL_WORK:
  2851  0130                     i1l2176:	
  2852                           ;incstack = 0
  2853                           ; Regs used in _INTR_CALL_WORK: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2854                           
  2855                           
  2856                           ;main.c: 41:     (LCDByte(0b00000001,0));
  2857  0130  01F5               	clrf	i1LCDByte@isdata
  2858  0131  3001               	movlw	1
  2859  0132  120A  118A  269B  120A  118A  	fcall	i1_LCDByte
  2860  0137                     i1l2178:
  2861                           
  2862                           ;main.c: 42:     init_keypad();
  2863  0137  120A  158A  2734  120A  118A  	fcall	_init_keypad
  2864  013C                     i1l2180:
  2865                           
  2866                           ;main.c: 43:     LCDWriteString("ENTER RPM");
  2867  013C  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2868  013D  120A  118A  24F5  120A  118A  	fcall	_LCDWriteString
  2869  0142                     i1l2182:
  2870                           
  2871                           ;main.c: 44:     int num=0;
  2872  0142  1283               	bcf	3,5	;RP0=0, select bank0
  2873  0143  1303               	bcf	3,6	;RP1=0, select bank0
  2874  0144  01B6               	clrf	INTR_CALL_WORK@num
  2875  0145  01B7               	clrf	INTR_CALL_WORK@num+1
  2876  0146                     i1l2184:
  2877                           
  2878                           ;main.c: 45:     a= get_str();
  2879  0146  120A  158A  27C7  120A  118A  	fcall	_get_str
  2880  014B  1283               	bcf	3,5	;RP0=0, select bank0
  2881  014C  1303               	bcf	3,6	;RP1=0, select bank0
  2882  014D  00AF               	movwf	??_INTR_CALL_WORK
  2883  014E  082F               	movf	??_INTR_CALL_WORK,w
  2884  014F  00D9               	movwf	_a
  2885  0150                     i1l2186:
  2886                           
  2887                           ;main.c: 46:     if(*a=='x')
  2888  0150  0859               	movf	_a,w
  2889  0151  0084               	movwf	4
  2890  0152  3078               	movlw	120
  2891  0153  1383               	bcf	3,7	;select IRP bank0
  2892  0154  0600               	xorwf	0,w
  2893  0155  1D03               	btfss	3,2
  2894  0156  2958               	goto	u222_21
  2895  0157  2959               	goto	u222_20
  2896  0158                     u222_21:
  2897  0158  296C               	goto	i1l2194
  2898  0159                     u222_20:
  2899  0159                     i1l2188:
  2900                           
  2901                           ;main.c: 47:     {;main.c: 48:         STOP();
  2902  0159  120A  158A  26FC  120A  118A  	fcall	_STOP
  2903  015E                     i1l2190:
  2904                           
  2905                           ;main.c: 49:         (LCDByte(0b00000001,0));
  2906  015E  01F5               	clrf	i1LCDByte@isdata
  2907  015F  3001               	movlw	1
  2908  0160  120A  118A  269B  120A  118A  	fcall	i1_LCDByte
  2909  0165                     i1l2192:
  2910                           
  2911                           ;main.c: 50:         LCDWriteString("STOP");
  2912  0165  3019               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2913  0166  120A  118A  24F5  120A  118A  	fcall	_LCDWriteString
  2914                           
  2915                           ;main.c: 51:     }
  2916  016B  2A15               	goto	i1l76
  2917  016C                     i1l2194:
  2918  016C  0859               	movf	_a,w
  2919  016D  0084               	movwf	4
  2920  016E  303D               	movlw	61
  2921  016F  0600               	xorwf	0,w
  2922  0170  1D03               	btfss	3,2
  2923  0171  2973               	goto	u223_21
  2924  0172  2974               	goto	u223_20
  2925  0173                     u223_21:
  2926  0173  2987               	goto	i1l2200
  2927  0174                     u223_20:
  2928  0174                     i1l2196:
  2929                           
  2930                           ;main.c: 53:     {;main.c: 54:         INITSTEPPER();
  2931  0174  120A  158A  271A  120A  118A  	fcall	i1_INITSTEPPER
  2932                           
  2933                           ;main.c: 55:         (LCDByte(0b00000001,0));
  2934  0179  01F5               	clrf	i1LCDByte@isdata
  2935  017A  3001               	movlw	1
  2936  017B  120A  118A  269B  120A  118A  	fcall	i1_LCDByte
  2937  0180                     i1l2198:
  2938                           
  2939                           ;main.c: 56:         LCDWriteString("START");
  2940  0180  3013               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2941  0181  120A  118A  24F5  120A  118A  	fcall	_LCDWriteString
  2942                           
  2943                           ;main.c: 57:     }
  2944  0186  2A15               	goto	i1l76
  2945  0187                     i1l2200:
  2946                           
  2947                           ;main.c: 59:     {;main.c: 60:         int i=0;
  2948  0187  01B4               	clrf	INTR_CALL_WORK@i
  2949  0188  01B5               	clrf	INTR_CALL_WORK@i+1
  2950  0189                     i1l2202:
  2951                           
  2952                           ;main.c: 61:         int flag=1;
  2953  0189  3001               	movlw	1
  2954  018A  00B2               	movwf	INTR_CALL_WORK@flag
  2955  018B  3000               	movlw	0
  2956  018C  00B3               	movwf	INTR_CALL_WORK@flag+1
  2957  018D                     i1l2204:
  2958                           
  2959                           ;main.c: 62:         if(*(a)=='-')
  2960  018D  0859               	movf	_a,w
  2961  018E  0084               	movwf	4
  2962  018F  302D               	movlw	45
  2963  0190  0600               	xorwf	0,w
  2964  0191  1D03               	btfss	3,2
  2965  0192  2994               	goto	u224_21
  2966  0193  2995               	goto	u224_20
  2967  0194                     u224_21:
  2968  0194  29D9               	goto	i1l2212
  2969  0195                     u224_20:
  2970  0195                     i1l2206:
  2971                           
  2972                           ;main.c: 63:         {;main.c: 64:             flag=-1;
  2973  0195  30FF               	movlw	255
  2974  0196  00B2               	movwf	INTR_CALL_WORK@flag
  2975  0197  30FF               	movlw	255
  2976  0198  00B3               	movwf	INTR_CALL_WORK@flag+1
  2977                           
  2978                           ;main.c: 65:             i++;
  2979  0199  3001               	movlw	1
  2980  019A  07B4               	addwf	INTR_CALL_WORK@i,f
  2981  019B  1803               	skipnc
  2982  019C  0AB5               	incf	INTR_CALL_WORK@i+1,f
  2983  019D  3000               	movlw	0
  2984  019E  07B5               	addwf	INTR_CALL_WORK@i+1,f
  2985  019F  29D9               	goto	i1l2212
  2986  01A0                     i1l2208:
  2987                           
  2988                           ;main.c: 68:         {;main.c: 69:             num = num*10+((*(a+i))-48)*flag;
  2989  01A0  0837               	movf	INTR_CALL_WORK@num+1,w
  2990  01A1  00F1               	movwf	___wmul@multiplier+1
  2991  01A2  0836               	movf	INTR_CALL_WORK@num,w
  2992  01A3  00F0               	movwf	___wmul@multiplier
  2993  01A4  300A               	movlw	10
  2994  01A5  00F2               	movwf	___wmul@multiplicand
  2995  01A6  3000               	movlw	0
  2996  01A7  00F3               	movwf	___wmul@multiplicand+1
  2997  01A8  120A  158A  27A2  120A  118A  	fcall	___wmul
  2998  01AD  0870               	movf	?___wmul,w
  2999  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  3000  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  3001  01B0  00AF               	movwf	??_INTR_CALL_WORK
  3002  01B1  0871               	movf	?___wmul+1,w
  3003  01B2  00B0               	movwf	??_INTR_CALL_WORK+1
  3004  01B3  0834               	movf	INTR_CALL_WORK@i,w
  3005  01B4  0759               	addwf	_a,w
  3006  01B5  00B1               	movwf	??_INTR_CALL_WORK+2
  3007  01B6  0831               	movf	??_INTR_CALL_WORK+2,w
  3008  01B7  0084               	movwf	4
  3009  01B8  1383               	bcf	3,7	;select IRP bank0
  3010  01B9  0800               	movf	0,w
  3011  01BA  3ED0               	addlw	208
  3012  01BB  00F0               	movwf	___wmul@multiplier
  3013  01BC  30FF               	movlw	255
  3014  01BD  1803               	skipnc
  3015  01BE  3000               	movlw	0
  3016  01BF  00F1               	movwf	___wmul@multiplier+1
  3017  01C0  0833               	movf	INTR_CALL_WORK@flag+1,w
  3018  01C1  00F3               	movwf	___wmul@multiplicand+1
  3019  01C2  0832               	movf	INTR_CALL_WORK@flag,w
  3020  01C3  00F2               	movwf	___wmul@multiplicand
  3021  01C4  120A  158A  27A2  120A  118A  	fcall	___wmul
  3022  01C9  0870               	movf	?___wmul,w
  3023  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  3024  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  3025  01CC  072F               	addwf	??_INTR_CALL_WORK,w
  3026  01CD  00B6               	movwf	INTR_CALL_WORK@num
  3027  01CE  0871               	movf	?___wmul+1,w
  3028  01CF  1803               	skipnc
  3029  01D0  0A71               	incf	?___wmul+1,w
  3030  01D1  0730               	addwf	??_INTR_CALL_WORK+1,w
  3031  01D2  00B7               	movwf	INTR_CALL_WORK@num+1
  3032  01D3                     i1l2210:
  3033                           
  3034                           ;main.c: 70:             i++;
  3035  01D3  3001               	movlw	1
  3036  01D4  07B4               	addwf	INTR_CALL_WORK@i,f
  3037  01D5  1803               	skipnc
  3038  01D6  0AB5               	incf	INTR_CALL_WORK@i+1,f
  3039  01D7  3000               	movlw	0
  3040  01D8  07B5               	addwf	INTR_CALL_WORK@i+1,f
  3041  01D9                     i1l2212:
  3042                           
  3043                           ;main.c: 67:         while(*(a+i)!='\0')
  3044  01D9  0834               	movf	INTR_CALL_WORK@i,w
  3045  01DA  0759               	addwf	_a,w
  3046  01DB  00AF               	movwf	??_INTR_CALL_WORK
  3047  01DC  082F               	movf	??_INTR_CALL_WORK,w
  3048  01DD  0084               	movwf	4
  3049  01DE  1383               	bcf	3,7	;select IRP bank0
  3050  01DF  0800               	movf	0,w
  3051  01E0  1D03               	btfss	3,2
  3052  01E1  29E3               	goto	u225_21
  3053  01E2  29E4               	goto	u225_20
  3054  01E3                     u225_21:
  3055  01E3  29A0               	goto	i1l2208
  3056  01E4                     u225_20:
  3057  01E4                     i1l2214:
  3058                           
  3059                           ;main.c: 72:         s=num;
  3060  01E4  0836               	movf	INTR_CALL_WORK@num,w
  3061  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  3062  01E6  1303               	bcf	3,6	;RP1=0, select bank1
  3063  01E7  00C8               	movwf	_s^(0+128)
  3064  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  3065  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  3066  01EA  0837               	movf	INTR_CALL_WORK@num+1,w
  3067  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  3068  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  3069  01ED  00C9               	movwf	(_s+1)^(0+128)
  3070  01EE  3000               	movlw	0
  3071  01EF  1BC9               	btfsc	(_s+1)^(0+128),7
  3072  01F0  30FF               	movlw	255
  3073  01F1  00CA               	movwf	(_s+2)^(0+128)
  3074  01F2  00CB               	movwf	(_s+3)^(0+128)
  3075  01F3                     i1l2216:
  3076                           
  3077                           ;main.c: 73:         (LCDByte(0b00000001,0));
  3078  01F3  01F5               	clrf	i1LCDByte@isdata
  3079  01F4  3001               	movlw	1
  3080  01F5  120A  118A  269B  120A  118A  	fcall	i1_LCDByte
  3081  01FA                     i1l2218:
  3082                           
  3083                           ;main.c: 74:         LCDWriteString("VALUE: ");
  3084  01FA  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  3085  01FB  120A  118A  24F5  120A  118A  	fcall	_LCDWriteString
  3086  0200                     i1l2220:
  3087                           
  3088                           ;main.c: 76:         LCDWriteInt(num,3);
  3089  0200  1283               	bcf	3,5	;RP0=0, select bank0
  3090  0201  1303               	bcf	3,6	;RP1=0, select bank0
  3091  0202  0837               	movf	INTR_CALL_WORK@num+1,w
  3092  0203  00A1               	movwf	LCDWriteInt@val+1
  3093  0204  0836               	movf	INTR_CALL_WORK@num,w
  3094  0205  00A0               	movwf	LCDWriteInt@val
  3095  0206  3003               	movlw	3
  3096  0207  00AF               	movwf	??_INTR_CALL_WORK
  3097  0208  082F               	movf	??_INTR_CALL_WORK,w
  3098  0209  00A2               	movwf	LCDWriteInt@field_length
  3099  020A  120A  118A  22CA  120A  118A  	fcall	_LCDWriteInt
  3100  020F                     i1l2222:
  3101                           
  3102                           ;main.c: 77:         LCDWriteString(" Rpm");
  3103  020F  301E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  3104  0210  120A  118A  24F5  120A  118A  	fcall	_LCDWriteString
  3105  0215                     i1l76:
  3106  0215  0008               	return
  3107  0216                     __end_of_INTR_CALL_WORK:
  3108                           
  3109                           	psect	text11
  3110  0F1A                     __ptext11:	
  3111 ;; *************** function i1_INITSTEPPER *****************
  3112 ;; Defined at:
  3113 ;;		line 33 in file "MYSTEPPER.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;		None
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;		None
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      void 
  3120 ;; Registers used:
  3121 ;;		wreg, status,2
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3127 ;;      Params:         0       0       0       0       0
  3128 ;;      Locals:         0       0       0       0       0
  3129 ;;      Temps:          0       0       0       0       0
  3130 ;;      Totals:         0       0       0       0       0
  3131 ;;Total ram usage:        0 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_INTR_CALL_WORK
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           
  3141                           ;psect for function i1_INITSTEPPER
  3142  0F1A                     i1_INITSTEPPER:
  3143  0F1A                     i1l2138:	
  3144                           ;incstack = 0
  3145                           ; Regs used in i1_INITSTEPPER: [wreg+status,2]
  3146                           
  3147                           
  3148                           ;MYSTEPPER.c: 35:    TRISA = 0x00;
  3149  0F1A  1683               	bsf	3,5	;RP0=1, select bank1
  3150  0F1B  1303               	bcf	3,6	;RP1=0, select bank1
  3151  0F1C  0185               	clrf	5	;volatile
  3152                           
  3153                           ;MYSTEPPER.c: 36:    PORTA = 0x00;
  3154  0F1D  1283               	bcf	3,5	;RP0=0, select bank0
  3155  0F1E  1303               	bcf	3,6	;RP1=0, select bank0
  3156  0F1F  0185               	clrf	5	;volatile
  3157  0F20                     i1l2140:
  3158                           
  3159                           ;MYSTEPPER.c: 37:    flag = 1;
  3160  0F20  3001               	movlw	1
  3161  0F21  1683               	bsf	3,5	;RP0=1, select bank1
  3162  0F22  1303               	bcf	3,6	;RP1=0, select bank1
  3163  0F23  00CC               	movwf	_flag^(0+128)
  3164  0F24  3000               	movlw	0
  3165  0F25  00CD               	movwf	(_flag^(0+128)+1)
  3166  0F26                     i1l15:
  3167  0F26  0008               	return
  3168  0F27                     __end_ofi1_INITSTEPPER:
  3169                           
  3170                           	psect	text12
  3171  0F34                     __ptext12:	
  3172 ;; *************** function _init_keypad *****************
  3173 ;; Defined at:
  3174 ;;		line 13 in file "MYKEYPAD.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;		None
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;		None
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  1    wreg      void 
  3181 ;; Registers used:
  3182 ;;		status,2
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3188 ;;      Params:         0       0       0       0       0
  3189 ;;      Locals:         0       0       0       0       0
  3190 ;;      Temps:          0       0       0       0       0
  3191 ;;      Totals:         0       0       0       0       0
  3192 ;;Total ram usage:        0 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; This function calls:
  3195 ;;		Nothing
  3196 ;; This function is called by:
  3197 ;;		_INTR_CALL_WORK
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           
  3202                           ;psect for function _init_keypad
  3203  0F34                     _init_keypad:
  3204  0F34                     i1l1942:	
  3205                           ;incstack = 0
  3206                           ; Regs used in _init_keypad: [status,2]
  3207                           
  3208                           
  3209                           ;MYKEYPAD.c: 16:     PORTC = 0x00;
  3210  0F34  1283               	bcf	3,5	;RP0=0, select bank0
  3211  0F35  1303               	bcf	3,6	;RP1=0, select bank0
  3212  0F36  0187               	clrf	7	;volatile
  3213  0F37                     i1l1944:
  3214                           
  3215                           ;MYKEYPAD.c: 17:     TRISCbits.TRISC0 = 0;
  3216  0F37  1683               	bsf	3,5	;RP0=1, select bank1
  3217  0F38  1303               	bcf	3,6	;RP1=0, select bank1
  3218  0F39  1007               	bcf	7,0	;volatile
  3219  0F3A                     i1l1946:
  3220                           
  3221                           ;MYKEYPAD.c: 18:     TRISCbits.TRISC1 = 0;
  3222  0F3A  1087               	bcf	7,1	;volatile
  3223  0F3B                     i1l1948:
  3224                           
  3225                           ;MYKEYPAD.c: 19:     TRISCbits.TRISC2 = 0;
  3226  0F3B  1107               	bcf	7,2	;volatile
  3227  0F3C                     i1l1950:
  3228                           
  3229                           ;MYKEYPAD.c: 20:     TRISCbits.TRISC3 = 0;
  3230  0F3C  1187               	bcf	7,3	;volatile
  3231  0F3D                     i1l1952:
  3232                           
  3233                           ;MYKEYPAD.c: 21:     TRISBbits.TRISB4 = 1;
  3234  0F3D  1606               	bsf	6,4	;volatile
  3235  0F3E                     i1l1954:
  3236                           
  3237                           ;MYKEYPAD.c: 22:     TRISBbits.TRISB5 = 1;
  3238  0F3E  1686               	bsf	6,5	;volatile
  3239  0F3F                     i1l1956:
  3240                           
  3241                           ;MYKEYPAD.c: 23:     TRISBbits.TRISB6 = 1;
  3242  0F3F  1706               	bsf	6,6	;volatile
  3243  0F40                     i1l1958:
  3244                           
  3245                           ;MYKEYPAD.c: 24:     TRISBbits.TRISB7 = 1;
  3246  0F40  1786               	bsf	6,7	;volatile
  3247  0F41                     i1l1960:
  3248                           
  3249                           ;MYKEYPAD.c: 25:     OPTION_REGbits.nRBPU = 0;
  3250  0F41  1381               	bcf	1,7	;volatile
  3251  0F42                     i1l131:
  3252  0F42  0008               	return
  3253  0F43                     __end_of_init_keypad:
  3254                           
  3255                           	psect	text13
  3256  0FC7                     __ptext13:	
  3257 ;; *************** function _get_str *****************
  3258 ;; Defined at:
  3259 ;;		line 73 in file "MYKEYPAD.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;		None
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  str            10    0[BANK0 ] unsigned char [10]
  3264 ;;  i               2   10[BANK0 ] int 
  3265 ;;  key1            1   12[BANK0 ] unsigned char 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  1    wreg      PTR unsigned char 
  3268 ;; Registers used:
  3269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3275 ;;      Params:         0       0       0       0       0
  3276 ;;      Locals:         0      13       0       0       0
  3277 ;;      Temps:          1       0       0       0       0
  3278 ;;      Totals:         1      13       0       0       0
  3279 ;;Total ram usage:       14 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    2
  3282 ;; This function calls:
  3283 ;;		_get_key
  3284 ;; This function is called by:
  3285 ;;		_INTR_CALL_WORK
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           
  3290                           ;psect for function _get_str
  3291  0FC7                     _get_str:
  3292  0FC7                     i1l1986:	
  3293                           ;incstack = 0
  3294                           ; Regs used in _get_str: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3295                           
  3296  0FC7  1283               	bcf	3,5	;RP0=0, select bank0
  3297  0FC8  1303               	bcf	3,6	;RP1=0, select bank0
  3298  0FC9  01AA               	clrf	get_str@i
  3299  0FCA  01AB               	clrf	get_str@i+1
  3300  0FCB                     i1l1988:
  3301                           
  3302                           ;MYKEYPAD.c: 75:     char key1;;MYKEYPAD.c: 76:     char str[10];;MYKEYPAD.c: 78:     ke
      +                          y1 = get_key();
  3303  0FCB  120A  158A  2743  120A  158A  	fcall	_get_key
  3304  0FD0  00F2               	movwf	??_get_str
  3305  0FD1  0872               	movf	??_get_str,w
  3306  0FD2  1283               	bcf	3,5	;RP0=0, select bank0
  3307  0FD3  1303               	bcf	3,6	;RP1=0, select bank0
  3308  0FD4  00AC               	movwf	get_str@key1
  3309  0FD5                     i1l1990:
  3310  0FD5  082C               	movf	get_str@key1,w
  3311  0FD6  00F2               	movwf	??_get_str
  3312  0FD7  082A               	movf	get_str@i,w
  3313  0FD8  3E20               	addlw	(low (get_str@str| 0))& (0+255)
  3314  0FD9  0084               	movwf	4
  3315  0FDA  0872               	movf	??_get_str,w
  3316  0FDB  1383               	bcf	3,7	;select IRP bank0
  3317  0FDC  0080               	movwf	0
  3318  0FDD                     i1l1992:
  3319  0FDD  3001               	movlw	1
  3320  0FDE  07AA               	addwf	get_str@i,f
  3321  0FDF  1803               	skipnc
  3322  0FE0  0AAB               	incf	get_str@i+1,f
  3323  0FE1  3000               	movlw	0
  3324  0FE2  07AB               	addwf	get_str@i+1,f
  3325  0FE3                     i1l1994:
  3326                           
  3327                           ;MYKEYPAD.c: 81:         key1 = get_key();
  3328  0FE3  120A  158A  2743  120A  158A  	fcall	_get_key
  3329  0FE8  00F2               	movwf	??_get_str
  3330  0FE9  0872               	movf	??_get_str,w
  3331  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  3332  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  3333  0FEC  00AC               	movwf	get_str@key1
  3334  0FED                     i1l1996:
  3335                           
  3336                           ;MYKEYPAD.c: 83:         }while(key1!='S');
  3337  0FED  3053               	movlw	83
  3338  0FEE  062C               	xorwf	get_str@key1,w
  3339  0FEF  1D03               	btfss	3,2
  3340  0FF0  2FF2               	goto	u187_21
  3341  0FF1  2FF3               	goto	u187_20
  3342  0FF2                     u187_21:
  3343  0FF2  2FD5               	goto	i1l1990
  3344  0FF3                     u187_20:
  3345  0FF3                     i1l1998:
  3346                           
  3347                           ;MYKEYPAD.c: 84:         str[i++]='\0';
  3348  0FF3  082A               	movf	get_str@i,w
  3349  0FF4  3E20               	addlw	(low (get_str@str| 0))& (0+255)
  3350  0FF5  0084               	movwf	4
  3351  0FF6  1383               	bcf	3,7	;select IRP bank0
  3352  0FF7  0180               	clrf	0
  3353  0FF8                     i1l2000:
  3354  0FF8  3001               	movlw	1
  3355  0FF9  07AA               	addwf	get_str@i,f
  3356  0FFA  1803               	skipnc
  3357  0FFB  0AAB               	incf	get_str@i+1,f
  3358  0FFC  3000               	movlw	0
  3359  0FFD  07AB               	addwf	get_str@i+1,f
  3360  0FFE                     i1l2002:
  3361                           
  3362                           ;MYKEYPAD.c: 85:     return str;
  3363  0FFE  3020               	movlw	(low (get_str@str| 0))& (0+255)
  3364  0FFF                     i1l209:
  3365  0FFF  0008               	return
  3366  1000                     __end_of_get_str:
  3367                           
  3368                           	psect	text14
  3369  0F43                     __ptext14:	
  3370 ;; *************** function _get_key *****************
  3371 ;; Defined at:
  3372 ;;		line 63 in file "MYKEYPAD.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;		None
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  key             1    1[COMMON] unsigned char 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      unsigned char 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0, pclath, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3386 ;;      Params:         0       0       0       0       0
  3387 ;;      Locals:         1       0       0       0       0
  3388 ;;      Temps:          1       0       0       0       0
  3389 ;;      Totals:         2       0       0       0       0
  3390 ;;Total ram usage:        2 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    1
  3393 ;; This function calls:
  3394 ;;		_get_value
  3395 ;; This function is called by:
  3396 ;;		_get_str
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           
  3401                           ;psect for function _get_key
  3402  0F43                     _get_key:
  3403  0F43                     i1l1742:	
  3404                           ;incstack = 0
  3405                           ; Regs used in _get_key: [wreg+status,2+status,0+pclath+cstack]
  3406                           
  3407                           
  3408                           ;MYKEYPAD.c: 65:     char key ='n';
  3409  0F43  306E               	movlw	110
  3410  0F44  00F0               	movwf	??_get_key
  3411  0F45  0870               	movf	??_get_key,w
  3412  0F46  00F1               	movwf	get_key@key
  3413                           
  3414                           ;MYKEYPAD.c: 66:     while(key=='n')
  3415  0F47  2F50               	goto	i1l1746
  3416  0F48                     i1l1744:
  3417                           
  3418                           ;MYKEYPAD.c: 67:         key = get_value();
  3419  0F48  120A  118A  2216  120A  158A  	fcall	_get_value
  3420  0F4D  00F0               	movwf	??_get_key
  3421  0F4E  0870               	movf	??_get_key,w
  3422  0F4F  00F1               	movwf	get_key@key
  3423  0F50                     i1l1746:
  3424                           
  3425                           ;MYKEYPAD.c: 66:     while(key=='n')
  3426  0F50  306E               	movlw	110
  3427  0F51  0671               	xorwf	get_key@key,w
  3428  0F52  1903               	btfsc	3,2
  3429  0F53  2F55               	goto	u151_21
  3430  0F54  2F56               	goto	u151_20
  3431  0F55                     u151_21:
  3432  0F55  2F48               	goto	i1l1744
  3433  0F56                     u151_20:
  3434  0F56                     i1l1748:
  3435                           
  3436                           ;MYKEYPAD.c: 69:     return key;
  3437  0F56  0871               	movf	get_key@key,w
  3438  0F57                     i1l204:
  3439  0F57  0008               	return
  3440  0F58                     __end_of_get_key:
  3441                           
  3442                           	psect	text15
  3443  0216                     __ptext15:	
  3444 ;; *************** function _get_value *****************
  3445 ;; Defined at:
  3446 ;;		line 32 in file "MYKEYPAD.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;		None
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;		None
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      unsigned char 
  3453 ;; Registers used:
  3454 ;;		wreg
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3460 ;;      Params:         0       0       0       0       0
  3461 ;;      Locals:         0       0       0       0       0
  3462 ;;      Temps:          0       0       0       0       0
  3463 ;;      Totals:         0       0       0       0       0
  3464 ;;Total ram usage:        0 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; This function calls:
  3467 ;;		Nothing
  3468 ;; This function is called by:
  3469 ;;		_get_key
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           
  3474                           ;psect for function _get_value
  3475  0216                     _get_value:
  3476  0216                     i1l1594:	
  3477                           ;incstack = 0
  3478                           ; Regs used in _get_value: [wreg]
  3479                           
  3480                           
  3481                           ;MYKEYPAD.c: 34:     RC0=0; RC1=1; RC2=1; RC3=1;
  3482  0216  1283               	bcf	3,5	;RP0=0, select bank0
  3483  0217  1303               	bcf	3,6	;RP1=0, select bank0
  3484  0218  1007               	bcf	7,0	;volatile
  3485  0219  1487               	bsf	7,1	;volatile
  3486  021A  1507               	bsf	7,2	;volatile
  3487  021B  1587               	bsf	7,3	;volatile
  3488                           
  3489                           ;MYKEYPAD.c: 35:     if(RB4 == 0){ while(RB4 == 0); return keypad[0];}
  3490  021C  1A06               	btfsc	6,4	;volatile
  3491  021D  2A1F               	goto	u115_21
  3492  021E  2A20               	goto	u115_20
  3493  021F                     u115_21:
  3494  021F  2A26               	goto	i1l134
  3495  0220                     u115_20:
  3496  0220                     i1l135:
  3497  0220  1E06               	btfss	6,4	;volatile
  3498  0221  2A23               	goto	u116_21
  3499  0222  2A24               	goto	u116_20
  3500  0223                     u116_21:
  3501  0223  2A20               	goto	i1l135
  3502  0224                     u116_20:
  3503  0224                     i1l1598:
  3504  0224  083C               	movf	_keypad,w
  3505  0225  2AC9               	goto	i1l138
  3506  0226                     i1l134:
  3507                           
  3508                           ;MYKEYPAD.c: 36:     if(RB5 == 0){ while(RB5 == 0); return keypad[1];}
  3509  0226  1A86               	btfsc	6,5	;volatile
  3510  0227  2A29               	goto	u117_21
  3511  0228  2A2A               	goto	u117_20
  3512  0229                     u117_21:
  3513  0229  2A30               	goto	i1l139
  3514  022A                     u117_20:
  3515  022A                     i1l140:
  3516  022A  1E86               	btfss	6,5	;volatile
  3517  022B  2A2D               	goto	u118_21
  3518  022C  2A2E               	goto	u118_20
  3519  022D                     u118_21:
  3520  022D  2A2A               	goto	i1l140
  3521  022E                     u118_20:
  3522  022E                     i1l1604:
  3523  022E  083D               	movf	_keypad+1,w
  3524  022F  2AC9               	goto	i1l138
  3525  0230                     i1l139:
  3526                           
  3527                           ;MYKEYPAD.c: 37:     if(RB6 == 0){ while(RB6 == 0); return keypad[2];}
  3528  0230  1B06               	btfsc	6,6	;volatile
  3529  0231  2A33               	goto	u119_21
  3530  0232  2A34               	goto	u119_20
  3531  0233                     u119_21:
  3532  0233  2A3A               	goto	i1l143
  3533  0234                     u119_20:
  3534  0234                     i1l144:
  3535  0234  1F06               	btfss	6,6	;volatile
  3536  0235  2A37               	goto	u120_21
  3537  0236  2A38               	goto	u120_20
  3538  0237                     u120_21:
  3539  0237  2A34               	goto	i1l144
  3540  0238                     u120_20:
  3541  0238                     i1l1610:
  3542  0238  083E               	movf	_keypad+2,w
  3543  0239  2AC9               	goto	i1l138
  3544  023A                     i1l143:
  3545                           
  3546                           ;MYKEYPAD.c: 38:     if(RB7 == 0){ while(RB7 == 0); return keypad[3];}
  3547  023A  1B86               	btfsc	6,7	;volatile
  3548  023B  2A3D               	goto	u121_21
  3549  023C  2A3E               	goto	u121_20
  3550  023D                     u121_21:
  3551  023D  2A44               	goto	i1l147
  3552  023E                     u121_20:
  3553  023E                     i1l148:
  3554  023E  1F86               	btfss	6,7	;volatile
  3555  023F  2A41               	goto	u122_21
  3556  0240  2A42               	goto	u122_20
  3557  0241                     u122_21:
  3558  0241  2A3E               	goto	i1l148
  3559  0242                     u122_20:
  3560  0242                     i1l1616:
  3561  0242  083F               	movf	_keypad+3,w
  3562  0243  2AC9               	goto	i1l138
  3563  0244                     i1l147:
  3564                           
  3565                           ;MYKEYPAD.c: 40:     RC0=1; RC1=0; RC2=1; RC3=1;
  3566  0244  1407               	bsf	7,0	;volatile
  3567  0245  1087               	bcf	7,1	;volatile
  3568  0246  1507               	bsf	7,2	;volatile
  3569  0247  1587               	bsf	7,3	;volatile
  3570                           
  3571                           ;MYKEYPAD.c: 41:     if(RB4 == 0){ while(RB4 == 0); return keypad[4];}
  3572  0248  1A06               	btfsc	6,4	;volatile
  3573  0249  2A4B               	goto	u123_21
  3574  024A  2A4C               	goto	u123_20
  3575  024B                     u123_21:
  3576  024B  2A52               	goto	i1l151
  3577  024C                     u123_20:
  3578  024C                     i1l152:
  3579  024C  1E06               	btfss	6,4	;volatile
  3580  024D  2A4F               	goto	u124_21
  3581  024E  2A50               	goto	u124_20
  3582  024F                     u124_21:
  3583  024F  2A4C               	goto	i1l152
  3584  0250                     u124_20:
  3585  0250                     i1l1622:
  3586  0250  0840               	movf	_keypad+4,w
  3587  0251  2AC9               	goto	i1l138
  3588  0252                     i1l151:
  3589                           
  3590                           ;MYKEYPAD.c: 42:     if(RB5 == 0){ while(RB5 == 0); return keypad[5];}
  3591  0252  1A86               	btfsc	6,5	;volatile
  3592  0253  2A55               	goto	u125_21
  3593  0254  2A56               	goto	u125_20
  3594  0255                     u125_21:
  3595  0255  2A5C               	goto	i1l155
  3596  0256                     u125_20:
  3597  0256                     i1l156:
  3598  0256  1E86               	btfss	6,5	;volatile
  3599  0257  2A59               	goto	u126_21
  3600  0258  2A5A               	goto	u126_20
  3601  0259                     u126_21:
  3602  0259  2A56               	goto	i1l156
  3603  025A                     u126_20:
  3604  025A                     i1l1628:
  3605  025A  0841               	movf	_keypad+5,w
  3606  025B  2AC9               	goto	i1l138
  3607  025C                     i1l155:
  3608                           
  3609                           ;MYKEYPAD.c: 43:     if(RB6 == 0){ while(RB6 == 0); return keypad[6];}
  3610  025C  1B06               	btfsc	6,6	;volatile
  3611  025D  2A5F               	goto	u127_21
  3612  025E  2A60               	goto	u127_20
  3613  025F                     u127_21:
  3614  025F  2A66               	goto	i1l159
  3615  0260                     u127_20:
  3616  0260                     i1l160:
  3617  0260  1F06               	btfss	6,6	;volatile
  3618  0261  2A63               	goto	u128_21
  3619  0262  2A64               	goto	u128_20
  3620  0263                     u128_21:
  3621  0263  2A60               	goto	i1l160
  3622  0264                     u128_20:
  3623  0264                     i1l1634:
  3624  0264  0842               	movf	_keypad+6,w
  3625  0265  2AC9               	goto	i1l138
  3626  0266                     i1l159:
  3627                           
  3628                           ;MYKEYPAD.c: 44:     if(RB7 == 0){ while(RB7 == 0); return keypad[7];}
  3629  0266  1B86               	btfsc	6,7	;volatile
  3630  0267  2A69               	goto	u129_21
  3631  0268  2A6A               	goto	u129_20
  3632  0269                     u129_21:
  3633  0269  2A70               	goto	i1l163
  3634  026A                     u129_20:
  3635  026A                     i1l164:
  3636  026A  1F86               	btfss	6,7	;volatile
  3637  026B  2A6D               	goto	u130_21
  3638  026C  2A6E               	goto	u130_20
  3639  026D                     u130_21:
  3640  026D  2A6A               	goto	i1l164
  3641  026E                     u130_20:
  3642  026E                     i1l1640:
  3643  026E  0843               	movf	_keypad+7,w
  3644  026F  2AC9               	goto	i1l138
  3645  0270                     i1l163:
  3646                           
  3647                           ;MYKEYPAD.c: 46:     RC0=1; RC1=1; RC2=0; RC3=1;
  3648  0270  1407               	bsf	7,0	;volatile
  3649  0271  1487               	bsf	7,1	;volatile
  3650  0272  1107               	bcf	7,2	;volatile
  3651  0273  1587               	bsf	7,3	;volatile
  3652                           
  3653                           ;MYKEYPAD.c: 47:     if(RB4 == 0){ while(RB4 == 0); return keypad[8];}
  3654  0274  1A06               	btfsc	6,4	;volatile
  3655  0275  2A77               	goto	u131_21
  3656  0276  2A78               	goto	u131_20
  3657  0277                     u131_21:
  3658  0277  2A7E               	goto	i1l167
  3659  0278                     u131_20:
  3660  0278                     i1l168:
  3661  0278  1E06               	btfss	6,4	;volatile
  3662  0279  2A7B               	goto	u132_21
  3663  027A  2A7C               	goto	u132_20
  3664  027B                     u132_21:
  3665  027B  2A78               	goto	i1l168
  3666  027C                     u132_20:
  3667  027C                     i1l1646:
  3668  027C  0844               	movf	_keypad+8,w
  3669  027D  2AC9               	goto	i1l138
  3670  027E                     i1l167:
  3671                           
  3672                           ;MYKEYPAD.c: 48:     if(RB5 == 0){ while(RB5 == 0); return keypad[9];}
  3673  027E  1A86               	btfsc	6,5	;volatile
  3674  027F  2A81               	goto	u133_21
  3675  0280  2A82               	goto	u133_20
  3676  0281                     u133_21:
  3677  0281  2A88               	goto	i1l171
  3678  0282                     u133_20:
  3679  0282                     i1l172:
  3680  0282  1E86               	btfss	6,5	;volatile
  3681  0283  2A85               	goto	u134_21
  3682  0284  2A86               	goto	u134_20
  3683  0285                     u134_21:
  3684  0285  2A82               	goto	i1l172
  3685  0286                     u134_20:
  3686  0286                     i1l1652:
  3687  0286  0845               	movf	_keypad+9,w
  3688  0287  2AC9               	goto	i1l138
  3689  0288                     i1l171:
  3690                           
  3691                           ;MYKEYPAD.c: 49:     if(RB6 == 0){ while(RB6 == 0); return keypad[10];}
  3692  0288  1B06               	btfsc	6,6	;volatile
  3693  0289  2A8B               	goto	u135_21
  3694  028A  2A8C               	goto	u135_20
  3695  028B                     u135_21:
  3696  028B  2A92               	goto	i1l175
  3697  028C                     u135_20:
  3698  028C                     i1l176:
  3699  028C  1F06               	btfss	6,6	;volatile
  3700  028D  2A8F               	goto	u136_21
  3701  028E  2A90               	goto	u136_20
  3702  028F                     u136_21:
  3703  028F  2A8C               	goto	i1l176
  3704  0290                     u136_20:
  3705  0290                     i1l1658:
  3706  0290  0846               	movf	_keypad+10,w
  3707  0291  2AC9               	goto	i1l138
  3708  0292                     i1l175:
  3709                           
  3710                           ;MYKEYPAD.c: 50:     if(RB7 == 0){ while(RB7 == 0); return keypad[11];}
  3711  0292  1B86               	btfsc	6,7	;volatile
  3712  0293  2A95               	goto	u137_21
  3713  0294  2A96               	goto	u137_20
  3714  0295                     u137_21:
  3715  0295  2A9C               	goto	i1l179
  3716  0296                     u137_20:
  3717  0296                     i1l180:
  3718  0296  1F86               	btfss	6,7	;volatile
  3719  0297  2A99               	goto	u138_21
  3720  0298  2A9A               	goto	u138_20
  3721  0299                     u138_21:
  3722  0299  2A96               	goto	i1l180
  3723  029A                     u138_20:
  3724  029A                     i1l1664:
  3725  029A  0847               	movf	_keypad+11,w
  3726  029B  2AC9               	goto	i1l138
  3727  029C                     i1l179:
  3728                           
  3729                           ;MYKEYPAD.c: 52:     RC0=1; RC1=1; RC2=1; RC3=0;
  3730  029C  1407               	bsf	7,0	;volatile
  3731  029D  1487               	bsf	7,1	;volatile
  3732  029E  1507               	bsf	7,2	;volatile
  3733  029F  1187               	bcf	7,3	;volatile
  3734                           
  3735                           ;MYKEYPAD.c: 53:     if(RB4 == 0){ while(RB4 == 0); return keypad[12];}
  3736  02A0  1A06               	btfsc	6,4	;volatile
  3737  02A1  2AA3               	goto	u139_21
  3738  02A2  2AA4               	goto	u139_20
  3739  02A3                     u139_21:
  3740  02A3  2AAA               	goto	i1l183
  3741  02A4                     u139_20:
  3742  02A4                     i1l184:
  3743  02A4  1E06               	btfss	6,4	;volatile
  3744  02A5  2AA7               	goto	u140_21
  3745  02A6  2AA8               	goto	u140_20
  3746  02A7                     u140_21:
  3747  02A7  2AA4               	goto	i1l184
  3748  02A8                     u140_20:
  3749  02A8                     i1l1670:
  3750  02A8  0848               	movf	_keypad+12,w
  3751  02A9  2AC9               	goto	i1l138
  3752  02AA                     i1l183:
  3753                           
  3754                           ;MYKEYPAD.c: 54:     if(RB5 == 0){ while(RB5 == 0); return keypad[13];}
  3755  02AA  1A86               	btfsc	6,5	;volatile
  3756  02AB  2AAD               	goto	u141_21
  3757  02AC  2AAE               	goto	u141_20
  3758  02AD                     u141_21:
  3759  02AD  2AB4               	goto	i1l187
  3760  02AE                     u141_20:
  3761  02AE                     i1l188:
  3762  02AE  1E86               	btfss	6,5	;volatile
  3763  02AF  2AB1               	goto	u142_21
  3764  02B0  2AB2               	goto	u142_20
  3765  02B1                     u142_21:
  3766  02B1  2AAE               	goto	i1l188
  3767  02B2                     u142_20:
  3768  02B2                     i1l1676:
  3769  02B2  0849               	movf	_keypad+13,w
  3770  02B3  2AC9               	goto	i1l138
  3771  02B4                     i1l187:
  3772                           
  3773                           ;MYKEYPAD.c: 55:     if(RB6 == 0){ while(RB6 == 0); return keypad[14];}
  3774  02B4  1B06               	btfsc	6,6	;volatile
  3775  02B5  2AB7               	goto	u143_21
  3776  02B6  2AB8               	goto	u143_20
  3777  02B7                     u143_21:
  3778  02B7  2ABE               	goto	i1l191
  3779  02B8                     u143_20:
  3780  02B8                     i1l192:
  3781  02B8  1F06               	btfss	6,6	;volatile
  3782  02B9  2ABB               	goto	u144_21
  3783  02BA  2ABC               	goto	u144_20
  3784  02BB                     u144_21:
  3785  02BB  2AB8               	goto	i1l192
  3786  02BC                     u144_20:
  3787  02BC                     i1l1682:
  3788  02BC  084A               	movf	_keypad+14,w
  3789  02BD  2AC9               	goto	i1l138
  3790  02BE                     i1l191:
  3791                           
  3792                           ;MYKEYPAD.c: 56:     if(RB7 == 0){ while(RB7 == 0); return keypad[15];}
  3793  02BE  1B86               	btfsc	6,7	;volatile
  3794  02BF  2AC1               	goto	u145_21
  3795  02C0  2AC2               	goto	u145_20
  3796  02C1                     u145_21:
  3797  02C1  2AC8               	goto	i1l1692
  3798  02C2                     u145_20:
  3799  02C2                     i1l196:
  3800  02C2  1F86               	btfss	6,7	;volatile
  3801  02C3  2AC5               	goto	u146_21
  3802  02C4  2AC6               	goto	u146_20
  3803  02C5                     u146_21:
  3804  02C5  2AC2               	goto	i1l196
  3805  02C6                     u146_20:
  3806  02C6                     i1l1688:
  3807  02C6  084B               	movf	_keypad+15,w
  3808  02C7  2AC9               	goto	i1l138
  3809  02C8                     i1l1692:
  3810                           
  3811                           ;MYKEYPAD.c: 59:     return 'n';
  3812  02C8  306E               	movlw	110
  3813  02C9                     i1l138:
  3814  02C9  0008               	return
  3815  02CA                     __end_of_get_value:
  3816                           
  3817                           	psect	text16
  3818  0FA2                     __ptext16:	
  3819 ;; *************** function ___wmul *****************
  3820 ;; Defined at:
  3821 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;  multiplier      2    0[COMMON] unsigned int 
  3824 ;;  multiplicand    2    2[COMMON] unsigned int 
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;  product         2    4[COMMON] unsigned int 
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  2    0[COMMON] unsigned int 
  3829 ;; Registers used:
  3830 ;;		wreg, status,2, status,0
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3836 ;;      Params:         4       0       0       0       0
  3837 ;;      Locals:         2       0       0       0       0
  3838 ;;      Temps:          0       0       0       0       0
  3839 ;;      Totals:         6       0       0       0       0
  3840 ;;Total ram usage:        6 bytes
  3841 ;; Hardware stack levels used:    1
  3842 ;; This function calls:
  3843 ;;		Nothing
  3844 ;; This function is called by:
  3845 ;;		_INTR_CALL_WORK
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           
  3850                           ;psect for function ___wmul
  3851  0FA2                     ___wmul:
  3852  0FA2                     i1l2046:	
  3853                           ;incstack = 0
  3854                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3855                           
  3856  0FA2  01F4               	clrf	___wmul@product
  3857  0FA3  01F5               	clrf	___wmul@product+1
  3858  0FA4                     i1l2048:
  3859  0FA4  1C70               	btfss	___wmul@multiplier,0
  3860  0FA5  2FA7               	goto	u193_21
  3861  0FA6  2FA8               	goto	u193_20
  3862  0FA7                     u193_21:
  3863  0FA7  2FAE               	goto	i1l364
  3864  0FA8                     u193_20:
  3865  0FA8                     i1l2050:
  3866  0FA8  0872               	movf	___wmul@multiplicand,w
  3867  0FA9  07F4               	addwf	___wmul@product,f
  3868  0FAA  1803               	skipnc
  3869  0FAB  0AF5               	incf	___wmul@product+1,f
  3870  0FAC  0873               	movf	___wmul@multiplicand+1,w
  3871  0FAD  07F5               	addwf	___wmul@product+1,f
  3872  0FAE                     i1l364:
  3873  0FAE  3001               	movlw	1
  3874  0FAF                     u194_25:
  3875  0FAF  1003               	clrc
  3876  0FB0  0DF2               	rlf	___wmul@multiplicand,f
  3877  0FB1  0DF3               	rlf	___wmul@multiplicand+1,f
  3878  0FB2  3EFF               	addlw	-1
  3879  0FB3  1D03               	skipz
  3880  0FB4  2FAF               	goto	u194_25
  3881  0FB5                     i1l2052:
  3882  0FB5  3001               	movlw	1
  3883  0FB6                     u195_25:
  3884  0FB6  1003               	clrc
  3885  0FB7  0CF1               	rrf	___wmul@multiplier+1,f
  3886  0FB8  0CF0               	rrf	___wmul@multiplier,f
  3887  0FB9  3EFF               	addlw	-1
  3888  0FBA  1D03               	skipz
  3889  0FBB  2FB6               	goto	u195_25
  3890  0FBC                     i1l2054:
  3891  0FBC  0870               	movf	___wmul@multiplier,w
  3892  0FBD  0471               	iorwf	___wmul@multiplier+1,w
  3893  0FBE  1D03               	btfss	3,2
  3894  0FBF  2FC1               	goto	u196_21
  3895  0FC0  2FC2               	goto	u196_20
  3896  0FC1                     u196_21:
  3897  0FC1  2FA4               	goto	i1l2048
  3898  0FC2                     u196_20:
  3899  0FC2                     i1l2056:
  3900  0FC2  0875               	movf	___wmul@product+1,w
  3901  0FC3  00F1               	movwf	?___wmul+1
  3902  0FC4  0874               	movf	___wmul@product,w
  3903  0FC5  00F0               	movwf	?___wmul
  3904  0FC6                     i1l366:
  3905  0FC6  0008               	return
  3906  0FC7                     __end_of___wmul:
  3907                           
  3908                           	psect	text17
  3909  0EFC                     __ptext17:	
  3910 ;; *************** function _STOP *****************
  3911 ;; Defined at:
  3912 ;;		line 77 in file "MYSTEPPER.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;		None
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;		None
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  1    wreg      void 
  3919 ;; Registers used:
  3920 ;;		status,2
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3926 ;;      Params:         0       0       0       0       0
  3927 ;;      Locals:         0       0       0       0       0
  3928 ;;      Temps:          0       0       0       0       0
  3929 ;;      Totals:         0       0       0       0       0
  3930 ;;Total ram usage:        0 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; This function calls:
  3933 ;;		Nothing
  3934 ;; This function is called by:
  3935 ;;		_INTR_CALL_WORK
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           
  3940                           ;psect for function _STOP
  3941  0EFC                     _STOP:
  3942  0EFC                     i1l1910:	
  3943                           ;incstack = 0
  3944                           ; Regs used in _STOP: [status,2]
  3945                           
  3946                           
  3947                           ;MYSTEPPER.c: 79:     flag = 0;
  3948  0EFC  1683               	bsf	3,5	;RP0=1, select bank1
  3949  0EFD  1303               	bcf	3,6	;RP1=0, select bank1
  3950  0EFE  01CC               	clrf	_flag^(0+128)
  3951  0EFF  01CD               	clrf	(_flag+1)^(0+128)
  3952                           
  3953                           ;MYSTEPPER.c: 80:     PORTA = 0x00;
  3954  0F00  1283               	bcf	3,5	;RP0=0, select bank0
  3955  0F01  1303               	bcf	3,6	;RP1=0, select bank0
  3956  0F02  0185               	clrf	5	;volatile
  3957  0F03                     i1l31:
  3958  0F03  0008               	return
  3959  0F04                     __end_of_STOP:
  3960                           
  3961                           	psect	text18
  3962  04F5                     __ptext18:	
  3963 ;; *************** function _LCDWriteString *****************
  3964 ;; Defined at:
  3965 ;;		line 252 in file "lcd_hd44780_pic16.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;  msg             1    wreg     PTR const unsigned char 
  3968 ;;		 -> STR_5(5), STR_4(8), STR_3(6), STR_2(5), 
  3969 ;;		 -> STR_1(10), 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  msg             1    1[BANK0 ] PTR const unsigned char 
  3972 ;;		 -> STR_5(5), STR_4(8), STR_3(6), STR_2(5), 
  3973 ;;		 -> STR_1(10), 
  3974 ;;  cc              1    0[BANK0 ] char 
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  1    wreg      void 
  3977 ;; Registers used:
  3978 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3984 ;;      Params:         0       0       0       0       0
  3985 ;;      Locals:         0       2       0       0       0
  3986 ;;      Temps:          1       0       0       0       0
  3987 ;;      Totals:         1       2       0       0       0
  3988 ;;Total ram usage:        3 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; Hardware stack levels required when called:    2
  3991 ;; This function calls:
  3992 ;;		i1_LCDByte
  3993 ;; This function is called by:
  3994 ;;		_INTR_CALL_WORK
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           
  3999                           ;psect for function _LCDWriteString
  4000  04F5                     _LCDWriteString:
  4001                           
  4002                           ;incstack = 0
  4003 ;; using string table level
  4004                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4005                           ;LCDWriteString@msg stored from wreg
  4006  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  4007  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  4008  04F7  00A1               	movwf	LCDWriteString@msg
  4009  04F8                     i1l1962:
  4010                           
  4011                           ;lcd_hd44780_pic16.c: 252: void LCDWriteString(const char *msg);lcd_hd44780_pic16.c: 253
      +                          : {;lcd_hd44780_pic16.c: 282:  while(*msg!='\0')
  4012  04F8  2D55               	goto	i1l1984
  4013  04F9                     i1l1964:
  4014                           
  4015                           ;lcd_hd44780_pic16.c: 283:  {;lcd_hd44780_pic16.c: 285:  if(*msg=='%')
  4016  04F9  0821               	movf	LCDWriteString@msg,w
  4017  04FA  0084               	movwf	4
  4018  04FB  120A  158A  2000  120A  118A  	fcall	stringdir
  4019  0500  3A25               	xorlw	37
  4020  0501  1D03               	skipz
  4021  0502  2D04               	goto	u183_21
  4022  0503  2D05               	goto	u183_20
  4023  0504                     u183_21:
  4024  0504  2D41               	goto	i1l1980
  4025  0505                     u183_20:
  4026  0505                     i1l1966:
  4027                           
  4028                           ;lcd_hd44780_pic16.c: 286:  {;lcd_hd44780_pic16.c: 287:   msg++;
  4029  0505  3001               	movlw	1
  4030  0506  00FC               	movwf	??_LCDWriteString
  4031  0507  087C               	movf	??_LCDWriteString,w
  4032  0508  07A1               	addwf	LCDWriteString@msg,f
  4033  0509                     i1l1968:
  4034                           
  4035                           ;lcd_hd44780_pic16.c: 288:   int8_t cc=*msg-'0';
  4036  0509  0821               	movf	LCDWriteString@msg,w
  4037  050A  0084               	movwf	4
  4038  050B  120A  158A  2000  120A  118A  	fcall	stringdir
  4039  0510  3ED0               	addlw	-48
  4040  0511  00FC               	movwf	??_LCDWriteString
  4041  0512  087C               	movf	??_LCDWriteString,w
  4042  0513  00A0               	movwf	LCDWriteString@cc
  4043  0514                     i1l1970:
  4044                           
  4045                           ;lcd_hd44780_pic16.c: 290:   if(cc>=0 && cc<=7)
  4046  0514  1BA0               	btfsc	LCDWriteString@cc,7
  4047  0515  2D17               	goto	u184_21
  4048  0516  2D18               	goto	u184_20
  4049  0517                     u184_21:
  4050  0517  2D28               	goto	i1l1976
  4051  0518                     u184_20:
  4052  0518                     i1l1972:
  4053  0518  0820               	movf	LCDWriteString@cc,w
  4054  0519  3A80               	xorlw	128
  4055  051A  3E78               	addlw	-136
  4056  051B  1803               	skipnc
  4057  051C  2D1E               	goto	u185_21
  4058  051D  2D1F               	goto	u185_20
  4059  051E                     u185_21:
  4060  051E  2D28               	goto	i1l1976
  4061  051F                     u185_20:
  4062  051F                     i1l1974:
  4063                           
  4064                           ;lcd_hd44780_pic16.c: 291:   {;lcd_hd44780_pic16.c: 292:    (LCDByte(cc,1));
  4065  051F  01F5               	clrf	i1LCDByte@isdata
  4066  0520  0AF5               	incf	i1LCDByte@isdata,f
  4067  0521  0820               	movf	LCDWriteString@cc,w
  4068  0522  120A  118A  269B  120A  118A  	fcall	i1_LCDByte
  4069                           
  4070                           ;lcd_hd44780_pic16.c: 293:   }
  4071  0527  2D4F               	goto	i1l1982
  4072  0528                     i1l1976:
  4073                           
  4074                           ;lcd_hd44780_pic16.c: 295:   {;lcd_hd44780_pic16.c: 296:    (LCDByte('%',1));
  4075  0528  01F5               	clrf	i1LCDByte@isdata
  4076  0529  0AF5               	incf	i1LCDByte@isdata,f
  4077  052A  3025               	movlw	37
  4078  052B  120A  118A  269B  120A  118A  	fcall	i1_LCDByte
  4079  0530                     i1l1978:
  4080                           
  4081                           ;lcd_hd44780_pic16.c: 297:    (LCDByte(*msg,1));
  4082  0530  01F5               	clrf	i1LCDByte@isdata
  4083  0531  0AF5               	incf	i1LCDByte@isdata,f
  4084  0532  1283               	bcf	3,5	;RP0=0, select bank0
  4085  0533  1303               	bcf	3,6	;RP1=0, select bank0
  4086  0534  0821               	movf	LCDWriteString@msg,w
  4087  0535  0084               	movwf	4
  4088  0536  120A  158A  2000  120A  118A  	fcall	stringdir
  4089  053B  120A  118A  269B  120A  118A  	fcall	i1_LCDByte
  4090  0540  2D4F               	goto	i1l1982
  4091  0541                     i1l1980:
  4092                           
  4093                           ;lcd_hd44780_pic16.c: 301:  {;lcd_hd44780_pic16.c: 302:   (LCDByte(*msg,1));
  4094  0541  01F5               	clrf	i1LCDByte@isdata
  4095  0542  0AF5               	incf	i1LCDByte@isdata,f
  4096  0543  0821               	movf	LCDWriteString@msg,w
  4097  0544  0084               	movwf	4
  4098  0545  120A  158A  2000  120A  118A  	fcall	stringdir
  4099  054A  120A  118A  269B  120A  118A  	fcall	i1_LCDByte
  4100  054F                     i1l1982:
  4101                           
  4102                           ;lcd_hd44780_pic16.c: 304:  msg++;
  4103  054F  3001               	movlw	1
  4104  0550  00FC               	movwf	??_LCDWriteString
  4105  0551  087C               	movf	??_LCDWriteString,w
  4106  0552  1283               	bcf	3,5	;RP0=0, select bank0
  4107  0553  1303               	bcf	3,6	;RP1=0, select bank0
  4108  0554  07A1               	addwf	LCDWriteString@msg,f
  4109  0555                     i1l1984:
  4110                           
  4111                           ;lcd_hd44780_pic16.c: 282:  while(*msg!='\0')
  4112  0555  0821               	movf	LCDWriteString@msg,w
  4113  0556  0084               	movwf	4
  4114  0557  120A  158A  2000  120A  118A  	fcall	stringdir
  4115  055C  3A00               	xorlw	0
  4116  055D  1D03               	skipz
  4117  055E  2D60               	goto	u186_21
  4118  055F  2D61               	goto	u186_20
  4119  0560                     u186_21:
  4120  0560  2CF9               	goto	i1l1964
  4121  0561                     u186_20:
  4122  0561                     i1l252:
  4123  0561  0008               	return
  4124  0562                     __end_of_LCDWriteString:
  4125                           
  4126                           	psect	text19
  4127  02CA                     __ptext19:	
  4128 ;; *************** function _LCDWriteInt *****************
  4129 ;; Defined at:
  4130 ;;		line 308 in file "lcd_hd44780_pic16.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;  val             2    0[BANK0 ] int 
  4133 ;;  field_length    1    2[BANK0 ] char 
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;  str             5    6[BANK0 ] unsigned char [5]
  4136 ;;  i               2   13[BANK0 ] int 
  4137 ;;  j               2   11[BANK0 ] int 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  1    wreg      void 
  4140 ;; Registers used:
  4141 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4147 ;;      Params:         0       3       0       0       0
  4148 ;;      Locals:         0       9       0       0       0
  4149 ;;      Temps:          0       3       0       0       0
  4150 ;;      Totals:         0      15       0       0       0
  4151 ;;Total ram usage:       15 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    2
  4154 ;; This function calls:
  4155 ;;		___awdiv
  4156 ;;		i1_LCDByte
  4157 ;;		i1___awmod
  4158 ;; This function is called by:
  4159 ;;		_INTR_CALL_WORK
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           
  4164                           ;psect for function _LCDWriteInt
  4165  02CA                     _LCDWriteInt:
  4166  02CA                     i1l2006:	
  4167                           ;incstack = 0
  4168                           ; Regs used in _LCDWriteInt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4169                           
  4170                           
  4171                           ;lcd_hd44780_pic16.c: 308: void LCDWriteInt(int val,int8_t field_length);lcd_hd44780_pic
      +                          16.c: 309: {;lcd_hd44780_pic16.c: 321:  char str[5]={0,0,0,0,0};
  4172  02CA  3026               	movlw	LCDWriteInt@str& (0+255)
  4173  02CB  0084               	movwf	4
  4174  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  4175  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  4176  02CE  0854               	movf	LCDWriteInt@F912,w
  4177  02CF  1383               	bcf	3,7	;select IRP bank0
  4178  02D0  0080               	movwf	0
  4179  02D1  0A84               	incf	4,f
  4180  02D2  0855               	movf	LCDWriteInt@F912+1,w
  4181  02D3  0080               	movwf	0
  4182  02D4  0A84               	incf	4,f
  4183  02D5  0856               	movf	LCDWriteInt@F912+2,w
  4184  02D6  0080               	movwf	0
  4185  02D7  0A84               	incf	4,f
  4186  02D8  0857               	movf	LCDWriteInt@F912+3,w
  4187  02D9  0080               	movwf	0
  4188  02DA  0A84               	incf	4,f
  4189  02DB  0858               	movf	LCDWriteInt@F912+4,w
  4190  02DC  0080               	movwf	0
  4191  02DD                     i1l2008:
  4192                           
  4193                           ;lcd_hd44780_pic16.c: 322:  int i=4,j=0;
  4194  02DD  3004               	movlw	4
  4195  02DE  00AD               	movwf	LCDWriteInt@i
  4196  02DF  3000               	movlw	0
  4197  02E0  00AE               	movwf	LCDWriteInt@i+1
  4198  02E1                     i1l2010:
  4199  02E1  01AB               	clrf	LCDWriteInt@j
  4200  02E2  01AC               	clrf	LCDWriteInt@j+1
  4201  02E3                     i1l2012:
  4202                           
  4203                           ;lcd_hd44780_pic16.c: 325:         if(val<0)
  4204  02E3  1FA1               	btfss	LCDWriteInt@val+1,7
  4205  02E4  2AE6               	goto	u188_21
  4206  02E5  2AE7               	goto	u188_20
  4207  02E6                     u188_21:
  4208  02E6  2B27               	goto	i1l2024
  4209  02E7                     u188_20:
  4210  02E7                     i1l2014:
  4211                           
  4212                           ;lcd_hd44780_pic16.c: 326:         {;lcd_hd44780_pic16.c: 327:             (LCDByte('-',
      +                          1));
  4213  02E7  01F5               	clrf	i1LCDByte@isdata
  4214  02E8  0AF5               	incf	i1LCDByte@isdata,f
  4215  02E9  302D               	movlw	45
  4216  02EA  120A  118A  269B  120A  118A  	fcall	i1_LCDByte
  4217  02EF                     i1l2016:
  4218                           
  4219                           ;lcd_hd44780_pic16.c: 328:             val=val*-1;
  4220  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  4221  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  4222  02F1  09A0               	comf	LCDWriteInt@val,f
  4223  02F2  09A1               	comf	LCDWriteInt@val+1,f
  4224  02F3  0AA0               	incf	LCDWriteInt@val,f
  4225  02F4  1903               	skipnz
  4226  02F5  0AA1               	incf	LCDWriteInt@val+1,f
  4227  02F6  2B27               	goto	i1l2024
  4228  02F7                     i1l2018:
  4229                           
  4230                           ;lcd_hd44780_pic16.c: 332:  {;lcd_hd44780_pic16.c: 333:             str[i]=val%10;
  4231  02F7  300A               	movlw	10
  4232  02F8  00F0               	movwf	i1___awmod@divisor
  4233  02F9  3000               	movlw	0
  4234  02FA  00F1               	movwf	i1___awmod@divisor+1
  4235  02FB  0821               	movf	LCDWriteInt@val+1,w
  4236  02FC  00F3               	movwf	i1___awmod@dividend+1
  4237  02FD  0820               	movf	LCDWriteInt@val,w
  4238  02FE  00F2               	movwf	i1___awmod@dividend
  4239  02FF  120A  118A  2753  120A  118A  	fcall	i1___awmod
  4240  0304  0870               	movf	?i1___awmod,w
  4241  0305  1283               	bcf	3,5	;RP0=0, select bank0
  4242  0306  1303               	bcf	3,6	;RP1=0, select bank0
  4243  0307  00A3               	movwf	??_LCDWriteInt
  4244  0308  082D               	movf	LCDWriteInt@i,w
  4245  0309  3E26               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  4246  030A  0084               	movwf	4
  4247  030B  0823               	movf	??_LCDWriteInt,w
  4248  030C  1383               	bcf	3,7	;select IRP bank0
  4249  030D  0080               	movwf	0
  4250  030E                     i1l2020:
  4251                           
  4252                           ;lcd_hd44780_pic16.c: 334:             val=val/10;
  4253  030E  300A               	movlw	10
  4254  030F  00F0               	movwf	___awdiv@divisor
  4255  0310  3000               	movlw	0
  4256  0311  00F1               	movwf	___awdiv@divisor+1
  4257  0312  0821               	movf	LCDWriteInt@val+1,w
  4258  0313  00F3               	movwf	___awdiv@dividend+1
  4259  0314  0820               	movf	LCDWriteInt@val,w
  4260  0315  00F2               	movwf	___awdiv@dividend
  4261  0316  120A  118A  2634  120A  118A  	fcall	___awdiv
  4262  031B  0871               	movf	?___awdiv+1,w
  4263  031C  1283               	bcf	3,5	;RP0=0, select bank0
  4264  031D  1303               	bcf	3,6	;RP1=0, select bank0
  4265  031E  00A1               	movwf	LCDWriteInt@val+1
  4266  031F  0870               	movf	?___awdiv,w
  4267  0320  00A0               	movwf	LCDWriteInt@val
  4268  0321                     i1l2022:
  4269                           
  4270                           ;lcd_hd44780_pic16.c: 335:             i--;
  4271  0321  30FF               	movlw	255
  4272  0322  07AD               	addwf	LCDWriteInt@i,f
  4273  0323  1803               	skipnc
  4274  0324  0AAE               	incf	LCDWriteInt@i+1,f
  4275  0325  30FF               	movlw	255
  4276  0326  07AE               	addwf	LCDWriteInt@i+1,f
  4277  0327                     i1l2024:
  4278                           
  4279                           ;lcd_hd44780_pic16.c: 331:  while(val)
  4280  0327  0820               	movf	LCDWriteInt@val,w
  4281  0328  0421               	iorwf	LCDWriteInt@val+1,w
  4282  0329  1D03               	btfss	3,2
  4283  032A  2B2C               	goto	u189_21
  4284  032B  2B2D               	goto	u189_20
  4285  032C                     u189_21:
  4286  032C  2AF7               	goto	i1l2018
  4287  032D                     u189_20:
  4288  032D                     i1l2026:
  4289                           
  4290                           ;lcd_hd44780_pic16.c: 337:  if(field_length==-1)
  4291  032D  0A22               	incf	LCDWriteInt@field_length,w
  4292  032E  1D03               	btfss	3,2
  4293  032F  2B31               	goto	u190_21
  4294  0330  2B32               	goto	u190_20
  4295  0331                     u190_21:
  4296  0331  2B43               	goto	i1l2034
  4297  0332                     u190_20:
  4298  0332  2B39               	goto	i1l2032
  4299  0333                     i1l2030:
  4300  0333  3001               	movlw	1
  4301  0334  07AB               	addwf	LCDWriteInt@j,f
  4302  0335  1803               	skipnc
  4303  0336  0AAC               	incf	LCDWriteInt@j+1,f
  4304  0337  3000               	movlw	0
  4305  0338  07AC               	addwf	LCDWriteInt@j+1,f
  4306  0339                     i1l2032:
  4307  0339  082B               	movf	LCDWriteInt@j,w
  4308  033A  3E26               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  4309  033B  0084               	movwf	4
  4310  033C  1383               	bcf	3,7	;select IRP bank0
  4311  033D  0800               	movf	0,w
  4312  033E  1903               	btfsc	3,2
  4313  033F  2B41               	goto	u191_21
  4314  0340  2B42               	goto	u191_20
  4315  0341                     u191_21:
  4316  0341  2B33               	goto	i1l2030
  4317  0342                     u191_20:
  4318  0342  2B51               	goto	i1l265
  4319  0343                     i1l2034:
  4320                           
  4321                           ;lcd_hd44780_pic16.c: 340:   j=5-field_length;
  4322  0343  0822               	movf	LCDWriteInt@field_length,w
  4323  0344  00A3               	movwf	??_LCDWriteInt
  4324  0345  01A4               	clrf	??_LCDWriteInt+1
  4325  0346  1BA3               	btfsc	??_LCDWriteInt,7
  4326  0347  03A4               	decf	??_LCDWriteInt+1,f
  4327  0348  3005               	movlw	5
  4328  0349  00A5               	movwf	??_LCDWriteInt+2
  4329  034A  0823               	movf	??_LCDWriteInt,w
  4330  034B  0225               	subwf	??_LCDWriteInt+2,w
  4331  034C  00AB               	movwf	LCDWriteInt@j
  4332  034D  0924               	comf	??_LCDWriteInt+1,w
  4333  034E  1803               	skipnc
  4334  034F  3E01               	addlw	1
  4335  0350  00AC               	movwf	LCDWriteInt@j+1
  4336  0351                     i1l265:
  4337                           
  4338                           ;lcd_hd44780_pic16.c: 343:  for(i=j;i<5;i++)
  4339  0351  082C               	movf	LCDWriteInt@j+1,w
  4340  0352  00AE               	movwf	LCDWriteInt@i+1
  4341  0353  082B               	movf	LCDWriteInt@j,w
  4342  0354  00AD               	movwf	LCDWriteInt@i
  4343  0355                     i1l2036:
  4344  0355  082E               	movf	LCDWriteInt@i+1,w
  4345  0356  3A80               	xorlw	128
  4346  0357  00FF               	movwf	btemp+1
  4347  0358  3080               	movlw	128
  4348  0359  027F               	subwf	btemp+1,w
  4349  035A  1D03               	skipz
  4350  035B  2B5E               	goto	u192_25
  4351  035C  3005               	movlw	5
  4352  035D  022D               	subwf	LCDWriteInt@i,w
  4353  035E                     u192_25:
  4354  035E  1C03               	skipc
  4355  035F  2B61               	goto	u192_21
  4356  0360  2B62               	goto	u192_20
  4357  0361                     u192_21:
  4358  0361  2B63               	goto	i1l2040
  4359  0362                     u192_20:
  4360  0362  2B7B               	goto	i1l268
  4361  0363                     i1l2040:
  4362                           
  4363                           ;lcd_hd44780_pic16.c: 344:  {;lcd_hd44780_pic16.c: 345:  (LCDByte(48+str[i],1));
  4364  0363  01F5               	clrf	i1LCDByte@isdata
  4365  0364  0AF5               	incf	i1LCDByte@isdata,f
  4366  0365  1283               	bcf	3,5	;RP0=0, select bank0
  4367  0366  1303               	bcf	3,6	;RP1=0, select bank0
  4368  0367  082D               	movf	LCDWriteInt@i,w
  4369  0368  3E26               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  4370  0369  0084               	movwf	4
  4371  036A  1383               	bcf	3,7	;select IRP bank0
  4372  036B  0800               	movf	0,w
  4373  036C  3E30               	addlw	48
  4374  036D  120A  118A  269B  120A  118A  	fcall	i1_LCDByte
  4375  0372                     i1l2042:
  4376                           
  4377                           ;lcd_hd44780_pic16.c: 346:  }
  4378  0372  3001               	movlw	1
  4379  0373  1283               	bcf	3,5	;RP0=0, select bank0
  4380  0374  1303               	bcf	3,6	;RP1=0, select bank0
  4381  0375  07AD               	addwf	LCDWriteInt@i,f
  4382  0376  1803               	skipnc
  4383  0377  0AAE               	incf	LCDWriteInt@i+1,f
  4384  0378  3000               	movlw	0
  4385  0379  07AE               	addwf	LCDWriteInt@i+1,f
  4386  037A  2B55               	goto	i1l2036
  4387  037B                     i1l268:
  4388  037B  0008               	return
  4389  037C                     __end_of_LCDWriteInt:
  4390                           
  4391                           	psect	text20
  4392  0753                     __ptext20:	
  4393 ;; *************** function i1___awmod *****************
  4394 ;; Defined at:
  4395 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awmod.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;  divisor         2    0[COMMON] int 
  4398 ;;  dividend        2    2[COMMON] int 
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;  sign            1    6[COMMON] unsigned char 
  4401 ;;  counter         1    5[COMMON] unsigned char 
  4402 ;; Return value:  Size  Location     Type
  4403 ;;                  2    0[COMMON] int 
  4404 ;; Registers used:
  4405 ;;		wreg, status,2, status,0
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4411 ;;      Params:         4       0       0       0       0
  4412 ;;      Locals:         2       0       0       0       0
  4413 ;;      Temps:          1       0       0       0       0
  4414 ;;      Totals:         7       0       0       0       0
  4415 ;;Total ram usage:        7 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; This function calls:
  4418 ;;		Nothing
  4419 ;; This function is called by:
  4420 ;;		_LCDWriteInt
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           
  4425                           ;psect for function i1___awmod
  4426  0753                     i1___awmod:
  4427  0753                     i1l1872:	
  4428                           ;incstack = 0
  4429                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  4430                           
  4431  0753  01F6               	clrf	i1___awmod@sign
  4432  0754                     i1l1874:
  4433  0754  1FF3               	btfss	i1___awmod@dividend+1,7
  4434  0755  2F57               	goto	u170_21
  4435  0756  2F58               	goto	u170_20
  4436  0757                     u170_21:
  4437  0757  2F5F               	goto	i1l1880
  4438  0758                     u170_20:
  4439  0758                     i1l1876:
  4440  0758  09F2               	comf	i1___awmod@dividend,f
  4441  0759  09F3               	comf	i1___awmod@dividend+1,f
  4442  075A  0AF2               	incf	i1___awmod@dividend,f
  4443  075B  1903               	skipnz
  4444  075C  0AF3               	incf	i1___awmod@dividend+1,f
  4445  075D                     i1l1878:
  4446  075D  01F6               	clrf	i1___awmod@sign
  4447  075E  0AF6               	incf	i1___awmod@sign,f
  4448  075F                     i1l1880:
  4449  075F  1FF1               	btfss	i1___awmod@divisor+1,7
  4450  0760  2F62               	goto	u171_21
  4451  0761  2F63               	goto	u171_20
  4452  0762                     u171_21:
  4453  0762  2F68               	goto	i1l1884
  4454  0763                     u171_20:
  4455  0763                     i1l1882:
  4456  0763  09F0               	comf	i1___awmod@divisor,f
  4457  0764  09F1               	comf	i1___awmod@divisor+1,f
  4458  0765  0AF0               	incf	i1___awmod@divisor,f
  4459  0766  1903               	skipnz
  4460  0767  0AF1               	incf	i1___awmod@divisor+1,f
  4461  0768                     i1l1884:
  4462  0768  0870               	movf	i1___awmod@divisor,w
  4463  0769  0471               	iorwf	i1___awmod@divisor+1,w
  4464  076A  1903               	btfsc	3,2
  4465  076B  2F6D               	goto	u172_21
  4466  076C  2F6E               	goto	u172_20
  4467  076D                     u172_21:
  4468  076D  2F9D               	goto	i1l1902
  4469  076E                     u172_20:
  4470  076E                     i1l1886:
  4471  076E  01F5               	clrf	i1___awmod@counter
  4472  076F  0AF5               	incf	i1___awmod@counter,f
  4473  0770  2F7C               	goto	i1l1892
  4474  0771                     i1l1888:
  4475  0771  3001               	movlw	1
  4476  0772                     u173_25:
  4477  0772  1003               	clrc
  4478  0773  0DF0               	rlf	i1___awmod@divisor,f
  4479  0774  0DF1               	rlf	i1___awmod@divisor+1,f
  4480  0775  3EFF               	addlw	-1
  4481  0776  1D03               	skipz
  4482  0777  2F72               	goto	u173_25
  4483  0778                     i1l1890:
  4484  0778  3001               	movlw	1
  4485  0779  00F4               	movwf	??i1___awmod
  4486  077A  0874               	movf	??i1___awmod,w
  4487  077B  07F5               	addwf	i1___awmod@counter,f
  4488  077C                     i1l1892:
  4489  077C  1FF1               	btfss	i1___awmod@divisor+1,7
  4490  077D  2F7F               	goto	u174_21
  4491  077E  2F80               	goto	u174_20
  4492  077F                     u174_21:
  4493  077F  2F71               	goto	i1l1888
  4494  0780                     u174_20:
  4495  0780                     i1l1894:
  4496  0780  0871               	movf	i1___awmod@divisor+1,w
  4497  0781  0273               	subwf	i1___awmod@dividend+1,w
  4498  0782  1D03               	skipz
  4499  0783  2F86               	goto	u175_25
  4500  0784  0870               	movf	i1___awmod@divisor,w
  4501  0785  0272               	subwf	i1___awmod@dividend,w
  4502  0786                     u175_25:
  4503  0786  1C03               	skipc
  4504  0787  2F89               	goto	u175_21
  4505  0788  2F8A               	goto	u175_20
  4506  0789                     u175_21:
  4507  0789  2F90               	goto	i1l1898
  4508  078A                     u175_20:
  4509  078A                     i1l1896:
  4510  078A  0870               	movf	i1___awmod@divisor,w
  4511  078B  02F2               	subwf	i1___awmod@dividend,f
  4512  078C  0871               	movf	i1___awmod@divisor+1,w
  4513  078D  1C03               	skipc
  4514  078E  03F3               	decf	i1___awmod@dividend+1,f
  4515  078F  02F3               	subwf	i1___awmod@dividend+1,f
  4516  0790                     i1l1898:
  4517  0790  3001               	movlw	1
  4518  0791                     u176_25:
  4519  0791  1003               	clrc
  4520  0792  0CF1               	rrf	i1___awmod@divisor+1,f
  4521  0793  0CF0               	rrf	i1___awmod@divisor,f
  4522  0794  3EFF               	addlw	-1
  4523  0795  1D03               	skipz
  4524  0796  2F91               	goto	u176_25
  4525  0797                     i1l1900:
  4526  0797  3001               	movlw	1
  4527  0798  02F5               	subwf	i1___awmod@counter,f
  4528  0799  1D03               	btfss	3,2
  4529  079A  2F9C               	goto	u177_21
  4530  079B  2F9D               	goto	u177_20
  4531  079C                     u177_21:
  4532  079C  2F80               	goto	i1l1894
  4533  079D                     u177_20:
  4534  079D                     i1l1902:
  4535  079D  0876               	movf	i1___awmod@sign,w
  4536  079E  1903               	btfsc	3,2
  4537  079F  2FA1               	goto	u178_21
  4538  07A0  2FA2               	goto	u178_20
  4539  07A1                     u178_21:
  4540  07A1  2FA7               	goto	i1l1906
  4541  07A2                     u178_20:
  4542  07A2                     i1l1904:
  4543  07A2  09F2               	comf	i1___awmod@dividend,f
  4544  07A3  09F3               	comf	i1___awmod@dividend+1,f
  4545  07A4  0AF2               	incf	i1___awmod@dividend,f
  4546  07A5  1903               	skipnz
  4547  07A6  0AF3               	incf	i1___awmod@dividend+1,f
  4548  07A7                     i1l1906:
  4549  07A7  0873               	movf	i1___awmod@dividend+1,w
  4550  07A8  00F1               	movwf	?i1___awmod+1
  4551  07A9  0872               	movf	i1___awmod@dividend,w
  4552  07AA  00F0               	movwf	?i1___awmod
  4553  07AB                     i1l530:
  4554  07AB  0008               	return
  4555  07AC                     __end_ofi1___awmod:
  4556                           
  4557                           	psect	text21
  4558  069B                     __ptext21:	
  4559 ;; *************** function i1_LCDByte *****************
  4560 ;; Defined at:
  4561 ;;		line 80 in file "lcd_hd44780_pic16.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;  c               1    wreg     unsigned char 
  4564 ;;  isdata          1    5[COMMON] unsigned char 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  c               1   10[COMMON] unsigned char 
  4567 ;;  temp            1   11[COMMON] unsigned char 
  4568 ;;  ln              1    9[COMMON] unsigned char 
  4569 ;;  hn              1    8[COMMON] unsigned char 
  4570 ;; Return value:  Size  Location     Type
  4571 ;;                  1    wreg      void 
  4572 ;; Registers used:
  4573 ;;		wreg, status,2, status,0, pclath, cstack
  4574 ;; Tracked objects:
  4575 ;;		On entry : 0/0
  4576 ;;		On exit  : 0/0
  4577 ;;		Unchanged: 0/0
  4578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4579 ;;      Params:         1       0       0       0       0
  4580 ;;      Locals:         4       0       0       0       0
  4581 ;;      Temps:          2       0       0       0       0
  4582 ;;      Totals:         7       0       0       0       0
  4583 ;;Total ram usage:        7 bytes
  4584 ;; Hardware stack levels used:    1
  4585 ;; Hardware stack levels required when called:    1
  4586 ;; This function calls:
  4587 ;;		i1_LCDBusyLoop
  4588 ;; This function is called by:
  4589 ;;		_INTR_CALL_WORK
  4590 ;;		_LCDWriteString
  4591 ;;		_LCDWriteInt
  4592 ;; This function uses a non-reentrant model
  4593 ;;
  4594                           
  4595                           
  4596                           ;psect for function i1_LCDByte
  4597  069B                     i1_LCDByte:
  4598                           
  4599                           ;incstack = 0
  4600                           ; Regs used in i1_LCDByte: [wreg+status,2+status,0+pclath+cstack]
  4601                           ;i1LCDByte@c stored from wreg
  4602  069B  00FA               	movwf	i1LCDByte@c
  4603  069C                     i1l1842:
  4604                           
  4605                           ;lcd_hd44780_pic16.c: 80: void LCDByte(uint8_t c,uint8_t isdata);lcd_hd44780_pic16.c: 81
      +                          : {;lcd_hd44780_pic16.c: 89: uint8_t hn,ln;;lcd_hd44780_pic16.c: 90: uint8_t temp;;lcd_h
      +                          d44780_pic16.c: 92: hn=c>>4;
  4606  069C  087A               	movf	i1LCDByte@c,w
  4607  069D  00F6               	movwf	??i1_LCDByte
  4608  069E  3004               	movlw	4
  4609  069F                     u166_25:
  4610  069F  1003               	clrc
  4611  06A0  0CF6               	rrf	??i1_LCDByte,f
  4612  06A1  3EFF               	addlw	-1
  4613  06A2  1D03               	skipz
  4614  06A3  2E9F               	goto	u166_25
  4615  06A4  0876               	movf	??i1_LCDByte,w
  4616  06A5  00F7               	movwf	??i1_LCDByte+1
  4617  06A6  0877               	movf	??i1_LCDByte+1,w
  4618  06A7  00F8               	movwf	i1LCDByte@hn
  4619  06A8                     i1l1844:
  4620                           
  4621                           ;lcd_hd44780_pic16.c: 93: ln=(c & 0x0F);
  4622  06A8  087A               	movf	i1LCDByte@c,w
  4623  06A9  390F               	andlw	15
  4624  06AA  00F6               	movwf	??i1_LCDByte
  4625  06AB  0876               	movf	??i1_LCDByte,w
  4626  06AC  00F9               	movwf	i1LCDByte@ln
  4627  06AD                     i1l1846:
  4628                           
  4629                           ;lcd_hd44780_pic16.c: 95: if(isdata==0)
  4630  06AD  0875               	movf	i1LCDByte@isdata,w
  4631  06AE  1D03               	btfss	3,2
  4632  06AF  2EB1               	goto	u167_21
  4633  06B0  2EB2               	goto	u167_20
  4634  06B1                     u167_21:
  4635  06B1  2EB6               	goto	i1l230
  4636  06B2                     u167_20:
  4637  06B2                     i1l1848:
  4638                           
  4639                           ;lcd_hd44780_pic16.c: 96:  (RD1=0);
  4640  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  4641  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  4642  06B4  1088               	bcf	8,1	;volatile
  4643  06B5  2EB9               	goto	i1l231
  4644  06B6                     i1l230:	
  4645                           ;lcd_hd44780_pic16.c: 97: else
  4646                           
  4647                           
  4648                           ;lcd_hd44780_pic16.c: 98:  (RD1=1);
  4649  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  4650  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  4651  06B8  1488               	bsf	8,1	;volatile
  4652  06B9                     i1l231:
  4653                           
  4654                           ;lcd_hd44780_pic16.c: 100: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  4655  06B9  2EBA               	nop2	;2 cycle nop
  4656                           
  4657                           ;lcd_hd44780_pic16.c: 102: (RD3=1);
  4658  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  4659  06BB  1303               	bcf	3,6	;RP1=0, select bank0
  4660  06BC  1588               	bsf	8,3	;volatile
  4661  06BD                     i1l1850:
  4662                           
  4663                           ;lcd_hd44780_pic16.c: 106: temp=(PORTD & (~(0X0F<<4)))|((hn<<4));
  4664  06BD  0878               	movf	i1LCDByte@hn,w
  4665  06BE  00F6               	movwf	??i1_LCDByte
  4666  06BF  3004               	movlw	4
  4667  06C0                     u168_25:
  4668  06C0  1003               	clrc
  4669  06C1  0DF6               	rlf	??i1_LCDByte,f
  4670  06C2  3EFF               	addlw	-1
  4671  06C3  1D03               	skipz
  4672  06C4  2EC0               	goto	u168_25
  4673  06C5  0808               	movf	8,w	;volatile
  4674  06C6  390F               	andlw	15
  4675  06C7  0476               	iorwf	??i1_LCDByte,w
  4676  06C8  00F7               	movwf	??i1_LCDByte+1
  4677  06C9  0877               	movf	??i1_LCDByte+1,w
  4678  06CA  00FB               	movwf	i1LCDByte@temp
  4679  06CB                     i1l1852:
  4680                           
  4681                           ;lcd_hd44780_pic16.c: 107: PORTD=temp;
  4682  06CB  087B               	movf	i1LCDByte@temp,w
  4683  06CC  0088               	movwf	8	;volatile
  4684  06CD                     i1l1854:
  4685                           
  4686                           ;lcd_hd44780_pic16.c: 109: _delay((unsigned long)((1)*(20000000/4000000.0)));
  4687  06CD  2ECE               	nop2	;2 cycle nop
  4688  06CE  2ECF               	nop2	;2 cycle nop
  4689  06CF  0000               	nop
  4690  06D0                     i1l1856:
  4691                           
  4692                           ;lcd_hd44780_pic16.c: 113: (RD3=0);
  4693  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  4694  06D1  1303               	bcf	3,6	;RP1=0, select bank0
  4695  06D2  1188               	bcf	8,3	;volatile
  4696  06D3                     i1l1858:
  4697                           
  4698                           ;lcd_hd44780_pic16.c: 115: _delay((unsigned long)((1)*(20000000/4000000.0)));
  4699  06D3  2ED4               	nop2	;2 cycle nop
  4700  06D4  2ED5               	nop2	;2 cycle nop
  4701  06D5  0000               	nop
  4702  06D6                     i1l1860:
  4703                           
  4704                           ;lcd_hd44780_pic16.c: 118: (RD3=1);
  4705  06D6  1283               	bcf	3,5	;RP0=0, select bank0
  4706  06D7  1303               	bcf	3,6	;RP1=0, select bank0
  4707  06D8  1588               	bsf	8,3	;volatile
  4708  06D9                     i1l1862:
  4709                           
  4710                           ;lcd_hd44780_pic16.c: 120: temp=(PORTD & (~(0X0F<<4)))|((ln<<4));
  4711  06D9  0879               	movf	i1LCDByte@ln,w
  4712  06DA  00F6               	movwf	??i1_LCDByte
  4713  06DB  3004               	movlw	4
  4714  06DC                     u169_25:
  4715  06DC  1003               	clrc
  4716  06DD  0DF6               	rlf	??i1_LCDByte,f
  4717  06DE  3EFF               	addlw	-1
  4718  06DF  1D03               	skipz
  4719  06E0  2EDC               	goto	u169_25
  4720  06E1  0808               	movf	8,w	;volatile
  4721  06E2  390F               	andlw	15
  4722  06E3  0476               	iorwf	??i1_LCDByte,w
  4723  06E4  00F7               	movwf	??i1_LCDByte+1
  4724  06E5  0877               	movf	??i1_LCDByte+1,w
  4725  06E6  00FB               	movwf	i1LCDByte@temp
  4726                           
  4727                           ;lcd_hd44780_pic16.c: 122: PORTD=temp;
  4728  06E7  087B               	movf	i1LCDByte@temp,w
  4729  06E8  0088               	movwf	8	;volatile
  4730  06E9                     i1l1864:
  4731                           
  4732                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((1)*(20000000/4000000.0)));
  4733  06E9  2EEA               	nop2	;2 cycle nop
  4734  06EA  2EEB               	nop2	;2 cycle nop
  4735  06EB  0000               	nop
  4736  06EC                     i1l1866:
  4737                           
  4738                           ;lcd_hd44780_pic16.c: 128: (RD3=0);
  4739  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  4740  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  4741  06EE  1188               	bcf	8,3	;volatile
  4742  06EF                     i1l1868:
  4743                           
  4744                           ;lcd_hd44780_pic16.c: 130: _delay((unsigned long)((1)*(20000000/4000000.0)));
  4745  06EF  2EF0               	nop2	;2 cycle nop
  4746  06F0  2EF1               	nop2	;2 cycle nop
  4747  06F1  0000               	nop
  4748  06F2                     i1l1870:
  4749                           
  4750                           ;lcd_hd44780_pic16.c: 132: LCDBusyLoop();
  4751  06F2  120A  118A  25CD  120A  118A  	fcall	i1_LCDBusyLoop
  4752  06F7                     i1l232:
  4753  06F7  0008               	return
  4754  06F8                     __end_ofi1_LCDByte:
  4755                           
  4756                           	psect	text22
  4757  05CD                     __ptext22:	
  4758 ;; *************** function i1_LCDBusyLoop *****************
  4759 ;; Defined at:
  4760 ;;		line 135 in file "lcd_hd44780_pic16.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;		None
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;  status          1    4[COMMON] unsigned char 
  4765 ;;  temp            1    3[COMMON] unsigned char 
  4766 ;;  busy            1    2[COMMON] unsigned char 
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  1    wreg      void 
  4769 ;; Registers used:
  4770 ;;		wreg, status,2, status,0
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4776 ;;      Params:         0       0       0       0       0
  4777 ;;      Locals:         3       0       0       0       0
  4778 ;;      Temps:          2       0       0       0       0
  4779 ;;      Totals:         5       0       0       0       0
  4780 ;;Total ram usage:        5 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; This function calls:
  4783 ;;		Nothing
  4784 ;; This function is called by:
  4785 ;;		i1_LCDByte
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           
  4790                           ;psect for function i1_LCDBusyLoop
  4791  05CD                     i1_LCDBusyLoop:
  4792  05CD                     i1l1696:	
  4793                           ;incstack = 0
  4794                           ; Regs used in i1_LCDBusyLoop: [wreg+status,2+status,0]
  4795                           
  4796  05CD                     i1l1698:
  4797                           
  4798                           ;lcd_hd44780_pic16.c: 142:  TRISD|=(0x0f<<4);
  4799  05CD  30F0               	movlw	240
  4800  05CE  00F0               	movwf	??i1_LCDBusyLoop
  4801  05CF  0870               	movf	??i1_LCDBusyLoop,w
  4802  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  4803  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  4804  05D2  0488               	iorwf	8,f	;volatile
  4805  05D3                     i1l1700:
  4806                           
  4807                           ;lcd_hd44780_pic16.c: 145:  (RD2=1);
  4808  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  4809  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  4810  05D5  1508               	bsf	8,2	;volatile
  4811  05D6                     i1l1702:
  4812                           
  4813                           ;lcd_hd44780_pic16.c: 146:  (RD1=0);
  4814  05D6  1088               	bcf	8,1	;volatile
  4815  05D7                     i1l1704:
  4816                           
  4817                           ;lcd_hd44780_pic16.c: 150:  _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  4818  05D7  2DD8               	nop2	;2 cycle nop
  4819  05D8                     i1l1706:
  4820                           
  4821                           ;lcd_hd44780_pic16.c: 154:  {;lcd_hd44780_pic16.c: 156:   (RD3=1);
  4822  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  4823  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  4824  05DA  1588               	bsf	8,3	;volatile
  4825  05DB                     i1l1708:
  4826                           
  4827                           ;lcd_hd44780_pic16.c: 159:   _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  4828  05DB  2DDC               	nop2	;2 cycle nop
  4829  05DC                     i1l1710:
  4830                           
  4831                           ;lcd_hd44780_pic16.c: 161:   status=(PORTD>>4);
  4832  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  4833  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  4834  05DE  0808               	movf	8,w	;volatile
  4835  05DF  00F0               	movwf	??i1_LCDBusyLoop
  4836  05E0  3004               	movlw	4
  4837  05E1                     u147_25:
  4838  05E1  1003               	clrc
  4839  05E2  0CF0               	rrf	??i1_LCDBusyLoop,f
  4840  05E3  3EFF               	addlw	-1
  4841  05E4  1D03               	skipz
  4842  05E5  2DE1               	goto	u147_25
  4843  05E6  0870               	movf	??i1_LCDBusyLoop,w
  4844  05E7  00F1               	movwf	??i1_LCDBusyLoop+1
  4845  05E8  0871               	movf	??i1_LCDBusyLoop+1,w
  4846  05E9  00F4               	movwf	i1LCDBusyLoop@status
  4847  05EA                     i1l1712:
  4848                           
  4849                           ;lcd_hd44780_pic16.c: 162:   status=status<<4;
  4850  05EA  0874               	movf	i1LCDBusyLoop@status,w
  4851  05EB  00F0               	movwf	??i1_LCDBusyLoop
  4852  05EC  3003               	movlw	3
  4853  05ED                     u148_25:
  4854  05ED  1003               	clrc
  4855  05EE  0DF0               	rlf	??i1_LCDBusyLoop,f
  4856  05EF  3EFF               	addlw	-1
  4857  05F0  1D03               	skipz
  4858  05F1  2DED               	goto	u148_25
  4859  05F2  1003               	clrc
  4860  05F3  0D70               	rlf	??i1_LCDBusyLoop,w
  4861  05F4  00F1               	movwf	??i1_LCDBusyLoop+1
  4862  05F5  0871               	movf	??i1_LCDBusyLoop+1,w
  4863  05F6  00F4               	movwf	i1LCDBusyLoop@status
  4864  05F7                     i1l1714:
  4865                           
  4866                           ;lcd_hd44780_pic16.c: 164:   _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  4867  05F7  2DF8               	nop2	;2 cycle nop
  4868  05F8                     i1l1716:
  4869                           
  4870                           ;lcd_hd44780_pic16.c: 167:   (RD3=0);
  4871  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  4872  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  4873  05FA  1188               	bcf	8,3	;volatile
  4874  05FB                     i1l1718:
  4875                           
  4876                           ;lcd_hd44780_pic16.c: 168:   _delay((unsigned long)((1)*(20000000/4000000.0)));
  4877  05FB  2DFC               	nop2	;2 cycle nop
  4878  05FC  2DFD               	nop2	;2 cycle nop
  4879  05FD  0000               	nop
  4880  05FE                     i1l1720:
  4881                           
  4882                           ;lcd_hd44780_pic16.c: 170:   (RD3=1);
  4883  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  4884  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  4885  0600  1588               	bsf	8,3	;volatile
  4886  0601                     i1l1722:
  4887                           
  4888                           ;lcd_hd44780_pic16.c: 171:   _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  4889  0601  2E02               	nop2	;2 cycle nop
  4890  0602                     i1l1724:
  4891                           
  4892                           ;lcd_hd44780_pic16.c: 173:   temp=(PORTD>>4);
  4893  0602  1283               	bcf	3,5	;RP0=0, select bank0
  4894  0603  1303               	bcf	3,6	;RP1=0, select bank0
  4895  0604  0808               	movf	8,w	;volatile
  4896  0605  00F0               	movwf	??i1_LCDBusyLoop
  4897  0606  3004               	movlw	4
  4898  0607                     u149_25:
  4899  0607  1003               	clrc
  4900  0608  0CF0               	rrf	??i1_LCDBusyLoop,f
  4901  0609  3EFF               	addlw	-1
  4902  060A  1D03               	skipz
  4903  060B  2E07               	goto	u149_25
  4904  060C  0870               	movf	??i1_LCDBusyLoop,w
  4905  060D  00F1               	movwf	??i1_LCDBusyLoop+1
  4906  060E  0871               	movf	??i1_LCDBusyLoop+1,w
  4907  060F  00F3               	movwf	i1LCDBusyLoop@temp
  4908  0610                     i1l1726:
  4909                           
  4910                           ;lcd_hd44780_pic16.c: 174:   temp&=0x0F;
  4911  0610  300F               	movlw	15
  4912  0611  00F0               	movwf	??i1_LCDBusyLoop
  4913  0612  0870               	movf	??i1_LCDBusyLoop,w
  4914  0613  05F3               	andwf	i1LCDBusyLoop@temp,f
  4915  0614                     i1l1728:
  4916                           
  4917                           ;lcd_hd44780_pic16.c: 176:   status=status|temp;
  4918  0614  0874               	movf	i1LCDBusyLoop@status,w
  4919  0615  0473               	iorwf	i1LCDBusyLoop@temp,w
  4920  0616  00F0               	movwf	??i1_LCDBusyLoop
  4921  0617  0870               	movf	??i1_LCDBusyLoop,w
  4922  0618  00F4               	movwf	i1LCDBusyLoop@status
  4923  0619                     i1l1730:
  4924                           
  4925                           ;lcd_hd44780_pic16.c: 178:   busy=status & 0b10000000;
  4926  0619  0874               	movf	i1LCDBusyLoop@status,w
  4927  061A  3980               	andlw	128
  4928  061B  00F0               	movwf	??i1_LCDBusyLoop
  4929  061C  0870               	movf	??i1_LCDBusyLoop,w
  4930  061D  00F2               	movwf	i1LCDBusyLoop@busy
  4931  061E                     i1l1732:
  4932                           
  4933                           ;lcd_hd44780_pic16.c: 180:   _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  4934  061E  2E1F               	nop2	;2 cycle nop
  4935  061F                     i1l1734:
  4936                           
  4937                           ;lcd_hd44780_pic16.c: 182:                 (RD3=0);
  4938  061F  1283               	bcf	3,5	;RP0=0, select bank0
  4939  0620  1303               	bcf	3,6	;RP1=0, select bank0
  4940  0621  1188               	bcf	8,3	;volatile
  4941  0622                     i1l1736:
  4942                           
  4943                           ;lcd_hd44780_pic16.c: 183:   _delay((unsigned long)((1)*(20000000/4000000.0)));
  4944  0622  2E23               	nop2	;2 cycle nop
  4945  0623  2E24               	nop2	;2 cycle nop
  4946  0624  0000               	nop
  4947  0625                     i1l1738:
  4948                           
  4949                           ;lcd_hd44780_pic16.c: 184:  }while(busy);
  4950  0625  0872               	movf	i1LCDBusyLoop@busy,w
  4951  0626  1D03               	btfss	3,2
  4952  0627  2E29               	goto	u150_21
  4953  0628  2E2A               	goto	u150_20
  4954  0629                     u150_21:
  4955  0629  2DD8               	goto	i1l1706
  4956  062A                     u150_20:
  4957  062A                     i1l236:
  4958                           
  4959                           ;lcd_hd44780_pic16.c: 186:  (RD2=0);
  4960  062A  1283               	bcf	3,5	;RP0=0, select bank0
  4961  062B  1303               	bcf	3,6	;RP1=0, select bank0
  4962  062C  1108               	bcf	8,2	;volatile
  4963  062D                     i1l1740:
  4964                           
  4965                           ;lcd_hd44780_pic16.c: 189:  TRISD&=(~(0x0F<<4));
  4966  062D  300F               	movlw	15
  4967  062E  00F0               	movwf	??i1_LCDBusyLoop
  4968  062F  0870               	movf	??i1_LCDBusyLoop,w
  4969  0630  1683               	bsf	3,5	;RP0=1, select bank1
  4970  0631  1303               	bcf	3,6	;RP1=0, select bank1
  4971  0632  0588               	andwf	8,f	;volatile
  4972  0633                     i1l237:
  4973  0633  0008               	return
  4974  0634                     __end_ofi1_LCDBusyLoop:
  4975                           
  4976                           	psect	text23
  4977  0634                     __ptext23:	
  4978 ;; *************** function ___awdiv *****************
  4979 ;; Defined at:
  4980 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  divisor         2    0[COMMON] int 
  4983 ;;  dividend        2    2[COMMON] int 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  quotient        2    7[COMMON] int 
  4986 ;;  sign            1    6[COMMON] unsigned char 
  4987 ;;  counter         1    5[COMMON] unsigned char 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  2    0[COMMON] int 
  4990 ;; Registers used:
  4991 ;;		wreg, status,2, status,0
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4997 ;;      Params:         4       0       0       0       0
  4998 ;;      Locals:         4       0       0       0       0
  4999 ;;      Temps:          1       0       0       0       0
  5000 ;;      Totals:         9       0       0       0       0
  5001 ;;Total ram usage:        9 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; This function calls:
  5004 ;;		Nothing
  5005 ;; This function is called by:
  5006 ;;		_LCDWriteInt
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           
  5011                           ;psect for function ___awdiv
  5012  0634                     ___awdiv:
  5013  0634                     i1l1798:	
  5014                           ;incstack = 0
  5015                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5016                           
  5017  0634  01F6               	clrf	___awdiv@sign
  5018  0635                     i1l1800:
  5019  0635  1FF1               	btfss	___awdiv@divisor+1,7
  5020  0636  2E38               	goto	u156_21
  5021  0637  2E39               	goto	u156_20
  5022  0638                     u156_21:
  5023  0638  2E40               	goto	i1l1806
  5024  0639                     u156_20:
  5025  0639                     i1l1802:
  5026  0639  09F0               	comf	___awdiv@divisor,f
  5027  063A  09F1               	comf	___awdiv@divisor+1,f
  5028  063B  0AF0               	incf	___awdiv@divisor,f
  5029  063C  1903               	skipnz
  5030  063D  0AF1               	incf	___awdiv@divisor+1,f
  5031  063E                     i1l1804:
  5032  063E  01F6               	clrf	___awdiv@sign
  5033  063F  0AF6               	incf	___awdiv@sign,f
  5034  0640                     i1l1806:
  5035  0640  1FF3               	btfss	___awdiv@dividend+1,7
  5036  0641  2E43               	goto	u157_21
  5037  0642  2E44               	goto	u157_20
  5038  0643                     u157_21:
  5039  0643  2E4D               	goto	i1l1812
  5040  0644                     u157_20:
  5041  0644                     i1l1808:
  5042  0644  09F2               	comf	___awdiv@dividend,f
  5043  0645  09F3               	comf	___awdiv@dividend+1,f
  5044  0646  0AF2               	incf	___awdiv@dividend,f
  5045  0647  1903               	skipnz
  5046  0648  0AF3               	incf	___awdiv@dividend+1,f
  5047  0649                     i1l1810:
  5048  0649  3001               	movlw	1
  5049  064A  00F4               	movwf	??___awdiv
  5050  064B  0874               	movf	??___awdiv,w
  5051  064C  06F6               	xorwf	___awdiv@sign,f
  5052  064D                     i1l1812:
  5053  064D  01F7               	clrf	___awdiv@quotient
  5054  064E  01F8               	clrf	___awdiv@quotient+1
  5055  064F                     i1l1814:
  5056  064F  0870               	movf	___awdiv@divisor,w
  5057  0650  0471               	iorwf	___awdiv@divisor+1,w
  5058  0651  1903               	btfsc	3,2
  5059  0652  2E54               	goto	u158_21
  5060  0653  2E55               	goto	u158_20
  5061  0654                     u158_21:
  5062  0654  2E8C               	goto	i1l1834
  5063  0655                     u158_20:
  5064  0655                     i1l1816:
  5065  0655  01F5               	clrf	___awdiv@counter
  5066  0656  0AF5               	incf	___awdiv@counter,f
  5067  0657  2E63               	goto	i1l1822
  5068  0658                     i1l1818:
  5069  0658  3001               	movlw	1
  5070  0659                     u159_25:
  5071  0659  1003               	clrc
  5072  065A  0DF0               	rlf	___awdiv@divisor,f
  5073  065B  0DF1               	rlf	___awdiv@divisor+1,f
  5074  065C  3EFF               	addlw	-1
  5075  065D  1D03               	skipz
  5076  065E  2E59               	goto	u159_25
  5077  065F                     i1l1820:
  5078  065F  3001               	movlw	1
  5079  0660  00F4               	movwf	??___awdiv
  5080  0661  0874               	movf	??___awdiv,w
  5081  0662  07F5               	addwf	___awdiv@counter,f
  5082  0663                     i1l1822:
  5083  0663  1FF1               	btfss	___awdiv@divisor+1,7
  5084  0664  2E66               	goto	u160_21
  5085  0665  2E67               	goto	u160_20
  5086  0666                     u160_21:
  5087  0666  2E58               	goto	i1l1818
  5088  0667                     u160_20:
  5089  0667                     i1l1824:
  5090  0667  3001               	movlw	1
  5091  0668                     u161_25:
  5092  0668  1003               	clrc
  5093  0669  0DF7               	rlf	___awdiv@quotient,f
  5094  066A  0DF8               	rlf	___awdiv@quotient+1,f
  5095  066B  3EFF               	addlw	-1
  5096  066C  1D03               	skipz
  5097  066D  2E68               	goto	u161_25
  5098  066E  0871               	movf	___awdiv@divisor+1,w
  5099  066F  0273               	subwf	___awdiv@dividend+1,w
  5100  0670  1D03               	skipz
  5101  0671  2E74               	goto	u162_25
  5102  0672  0870               	movf	___awdiv@divisor,w
  5103  0673  0272               	subwf	___awdiv@dividend,w
  5104  0674                     u162_25:
  5105  0674  1C03               	skipc
  5106  0675  2E77               	goto	u162_21
  5107  0676  2E78               	goto	u162_20
  5108  0677                     u162_21:
  5109  0677  2E7F               	goto	i1l1830
  5110  0678                     u162_20:
  5111  0678                     i1l1826:
  5112  0678  0870               	movf	___awdiv@divisor,w
  5113  0679  02F2               	subwf	___awdiv@dividend,f
  5114  067A  0871               	movf	___awdiv@divisor+1,w
  5115  067B  1C03               	skipc
  5116  067C  03F3               	decf	___awdiv@dividend+1,f
  5117  067D  02F3               	subwf	___awdiv@dividend+1,f
  5118  067E                     i1l1828:
  5119  067E  1477               	bsf	___awdiv@quotient,0
  5120  067F                     i1l1830:
  5121  067F  3001               	movlw	1
  5122  0680                     u163_25:
  5123  0680  1003               	clrc
  5124  0681  0CF1               	rrf	___awdiv@divisor+1,f
  5125  0682  0CF0               	rrf	___awdiv@divisor,f
  5126  0683  3EFF               	addlw	-1
  5127  0684  1D03               	skipz
  5128  0685  2E80               	goto	u163_25
  5129  0686                     i1l1832:
  5130  0686  3001               	movlw	1
  5131  0687  02F5               	subwf	___awdiv@counter,f
  5132  0688  1D03               	btfss	3,2
  5133  0689  2E8B               	goto	u164_21
  5134  068A  2E8C               	goto	u164_20
  5135  068B                     u164_21:
  5136  068B  2E67               	goto	i1l1824
  5137  068C                     u164_20:
  5138  068C                     i1l1834:
  5139  068C  0876               	movf	___awdiv@sign,w
  5140  068D  1903               	btfsc	3,2
  5141  068E  2E90               	goto	u165_21
  5142  068F  2E91               	goto	u165_20
  5143  0690                     u165_21:
  5144  0690  2E96               	goto	i1l1838
  5145  0691                     u165_20:
  5146  0691                     i1l1836:
  5147  0691  09F7               	comf	___awdiv@quotient,f
  5148  0692  09F8               	comf	___awdiv@quotient+1,f
  5149  0693  0AF7               	incf	___awdiv@quotient,f
  5150  0694  1903               	skipnz
  5151  0695  0AF8               	incf	___awdiv@quotient+1,f
  5152  0696                     i1l1838:
  5153  0696  0878               	movf	___awdiv@quotient+1,w
  5154  0697  00F1               	movwf	?___awdiv+1
  5155  0698  0877               	movf	___awdiv@quotient,w
  5156  0699  00F0               	movwf	?___awdiv
  5157  069A                     i1l517:
  5158  069A  0008               	return
  5159  069B                     __end_of___awdiv:
  5160  007E                     btemp	set	126	;btemp
  5161  007E                     wtemp0	set	126
  5162                           
  5163                           	psect	config
  5164                           
  5165                           ;Config register CONFIG @ 0x2007
  5166                           ;	Oscillator Selection bits
  5167                           ;	FOSC = HS, HS oscillator
  5168                           ;	Watchdog Timer Enable bit
  5169                           ;	WDTE = OFF, WDT disabled
  5170                           ;	Power-up Timer Enable bit
  5171                           ;	PWRTE = OFF, PWRT disabled
  5172                           ;	Brown-out Reset Enable bit
  5173                           ;	BOREN = ON, BOR enabled
  5174                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  5175                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  5176                           ;	Data EEPROM Memory Code Protection bit
  5177                           ;	CPD = OFF, Data EEPROM code protection off
  5178                           ;	Flash Program Memory Write Enable bits
  5179                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  5180                           ;	In-Circuit Debugger Mode bit
  5181                           ;	DEBUG = 0x1, unprogrammed default
  5182                           ;	Flash Program Memory Code Protection bit
  5183                           ;	CP = OFF, Code protection off
  5184  2007                     	org	8199
  5185  2007  3FFA               	dw	16378

Data Sizes:
    Strings     34
    Constant    0
    Data        100
    BSS         6
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     28      58
    BANK1            80     32      46
    BANK3            96      0      64
    BANK2            96      0       0

Pointer List with Targets:

    LCDWriteString@msg	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_5(CODE[5]), STR_4(CODE[8]), STR_3(CODE[6]), STR_2(CODE[5]), 
		 -> STR_1(CODE[10]), 

    sp__get_str	PTR unsigned char  size(1) Largest target is 10
		 -> get_str@str(BANK0[10]), 

    a	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), get_str@str(BANK0[10]), 

    SETSPEED@a	PTR long  size(1) Largest target is 4
		 -> s(BANK1[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Timer_isr in COMMON

    _INTR_CALL_WORK->_LCDWriteString
    _get_str->_get_key
    _LCDWriteString->i1_LCDByte
    _LCDWriteInt->i1_LCDByte
    i1_LCDByte->i1_LCDBusyLoop

Critical Paths under _main in BANK0

    None.

Critical Paths under _Timer_isr in BANK0

    _Timer_isr->_INTR_CALL_WORK
    _INTR_CALL_WORK->_LCDWriteInt

Critical Paths under _main in BANK1

    _main->_SETSPEED
    _SETSPEED->___aldiv
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop

Critical Paths under _Timer_isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Timer_isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Timer_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3466
                              _INITH
                        _INITSTEPPER
                            _LCDInit
                           _SETSPEED
 ---------------------------------------------------------------------------------
 (1) _SETSPEED                                            17    17      0    1755
                                             15 BANK1     17    17      0
                            ___aldiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     723
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              4     4      0    1711
                                             12 BANK1      4     4      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDByte                                              7     6      1    1405
                                              5 BANK1      7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (3) _LCDBusyLoop                                          5     5      0     176
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (1) _INITSTEPPER                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _INITH                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Timer_isr                                            4     4      0    4016
                                             24 BANK0      4     4      0
                     _INTR_CALL_WORK
 ---------------------------------------------------------------------------------
 (5) _INTR_CALL_WORK                                       9     9      0    4016
                                             15 BANK0      9     9      0
                        _LCDWriteInt
                     _LCDWriteString
                               _STOP
                             ___wmul
                            _get_str
                        _init_keypad
                      i1_INITSTEPPER
                          i1_LCDByte
 ---------------------------------------------------------------------------------
 (6) i1_INITSTEPPER                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _init_keypad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _get_str                                             14    14      0     214
                                              2 COMMON     1     1      0
                                              0 BANK0     13    13      0
                            _get_key
 ---------------------------------------------------------------------------------
 (7) _get_key                                              2     2      0      46
                                              0 COMMON     2     2      0
                          _get_value
 ---------------------------------------------------------------------------------
 (8) _get_value                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) _STOP                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _LCDWriteString                                       3     3      0     879
                                             12 COMMON     1     1      0
                                              0 BANK0      2     2      0
                          i1_LCDByte
 ---------------------------------------------------------------------------------
 (6) _LCDWriteInt                                         15    12      3    1853
                                              0 BANK0     15    12      3
                            ___awdiv
                          i1_LCDByte
                          i1___awmod
 ---------------------------------------------------------------------------------
 (7) i1___awmod                                            7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (6) i1_LCDByte                                            7     6      1     535
                                              5 COMMON     7     6      1
                      i1_LCDBusyLoop
 ---------------------------------------------------------------------------------
 (7) i1_LCDBusyLoop                                        5     5      0     117
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INITH
   _INITSTEPPER
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _SETSPEED
     ___aldiv
     ___awmod

 _Timer_isr (ROOT)
   _INTR_CALL_WORK
     _LCDWriteInt
       ___awdiv
       i1_LCDByte
         i1_LCDBusyLoop
       i1___awmod
     _LCDWriteString
       i1_LCDByte
         i1_LCDBusyLoop
     _STOP
     ___wmul
     _get_str
       _get_key
         _get_value
     _init_keypad
     i1_INITSTEPPER
     i1_LCDByte
       i1_LCDBusyLoop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      40       9       66.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     20      2E       7       57.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1C      3A       5       72.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B5      12        0.0%
ABS                  0      0      B5       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sat Dec 19 23:51:20 2020

           ?_LCDBusyLoop 0070                        _a 0059                        _s 00C8  
                      pc 0002                       l15 0F33                       l24 010E  
                     l25 0101                       l28 012F                       l87 0F9F  
           ___awdiv@sign 0076                       fsr 0004      ___wmul@multiplicand 0072  
                    l102 0F0D                      l230 0436                      l231 0439  
                    l232 0487                      l242 05CC                      l236 04EB  
                    l237 04F4                      l530 0752                      l429 0390  
                    l439 0418                      _GIE 005F                      _RC0 0038  
                    _RC1 0039                      _RC2 003A                      _RB4 0034  
                    _RC3 003B                      _RB5 0035                      _RD1 0041  
                    _RB6 0036                      _RD2 0042                      _RB7 0037  
                    _RD3 0043                      fsr0 0004                      indf 0000  
           ___awmod@sign 00A6             ?_INITSTEPPER 0070  LCDWriteInt@field_length 0022  
        __end_of_LCDByte 0488          __end_of_LCDInit 05CD             ?_LCDWriteInt 0020  
            LCDByte@temp 00AB                     l2320 0488                     l2400 0394  
                   l2330 0496                     l2322 048E                     l2410 03B6  
                   l2402 039F                     l2340 04B8                     l2332 0497  
                   l2324 0491                     l2420 03F0                     l2412 03C3  
                   l2404 03A3                     l2500 00FC                     l2510 0F09  
                   l2350 04D3                     l2342 04BB                     l2334 04A7  
                   l2326 0492                     l2318 0488                     l2430 0410  
                   l2422 03F1                     l2414 03C7                     l2406 03AB  
                   l2502 0106                     l2512 0F0A                     l2360 04E4  
                   l2352 04D8                     l2344 04BE                     l2336 04B4  
                   l2328 0493                     l2520 0570                     l2424 03FA  
                   l2416 03D0                     l2408 03B3                     l2440 0704  
                   l2504 0129                     l2514 0F0B                     l2506 0F04  
                   l2362 04EE                     l2354 04DD                     l2346 04BF  
                   l2338 04B5                     l2370 0432                     l2530 057F  
                   l2522 0576                     l2418 03E2                     l2426 0400  
                   l2450 0718                     l2442 0706                     l2434 06F8  
                   l2516 0F0C                     l2508 0F08                     l2356 04DE  
                   l2348 04CF                     l2380 045B                     l2372 043D  
                   l2364 041C                     l2540 0586                     l2532 0580  
                   l2524 0577                     l2428 0405                     l2460 0737  
                   l2452 071F                     l2444 070A                     l2436 06FB  
                   l2358 04E1                     l2390 047F                     l2382 045E  
                   l2374 0451                     l2366 0428                     l2550 0595  
                   l2542 0587                     l2534 0581                     l2526 0578  
                   l2518 0565                     l2462 073E                     l2454 0723  
                   l2446 070F                     l2438 06FF                     l2472 0F27  
                   l2392 0482                     l2384 0461                     l2376 0455  
                   l2368 042D                     l2552 059E                     l2544 058A  
                   l2536 0582                     l2528 0579                     l2456 0727  
                   l2448 0715                     l2464 0744                     l2480 0052  
                   l2474 0F2D                     l2386 0479                     l2378 0458  
                   l2562 05B4                     l2554 05A8                     l2546 058D  
                   l2538 0583                     l2394 037C                     l2466 0749  
                   l2458 0731                     l2490 009A                     l2482 0064  
                   l2570 0F93                     l2388 047C                     l2564 05C0  
                   l2556 05B1                     l2548 0590                     l2396 037F  
                   l2468 074E                     l2492 00D0                     l2484 006F  
                   l2476 004B                     l2572 0F99                     l2566 05C6  
                   l2398 0383                     l2494 00D8                     l2486 007E  
                   l2478 004D                     l2496 00E0                     l2488 0085  
                   l2568 0F89                     l2498 00F2                     STR_1 0806  
                   STR_2 081E                     STR_3 0818                     STR_4 0810  
                   STR_5 0823                     u2320 04EB                     u2321 04EA  
                   u2305 04AA                     u2410 03C7                     u2315 04C6  
                   u2411 03C6                     u2340 0432                     u2341 0431  
                   u2405 03B8                     u2430 03E2                     u2510 0727  
                   u2335 041F                     u2431 03E1                     u2511 0726  
                   u2520 0731                     u2600 0129                     u2425 03C9  
                   u2521 0730                     u2505 0719                     u2601 0128  
                   u2450 0400                     u2370 0383                     u2610 012F  
                   u2355 0442                     u2451 03FF                     u2435 03DE  
                   u2371 0382                     u2611 012E                     u2620 05CC  
                   u2460 0405                     u2380 0394                     u2540 0744  
                   u2365 0466                     u2621 05CB                     u2461 0404  
                   u2445 03F2                     u2381 0393                     u2541 0743  
                   u2525 072D                     u2605 0125                     u2390 03B3  
                   u2550 0749                     u2470 06FF                     u2295 049E  
                   u2391 03B2                     u2551 0748                     u2535 0738  
                   u2471 06FE                     u2480 070A                     u2560 0064  
                   u2481 0709                     u2561 0063                     u2490 0715  
                   u2570 00AE                     u2491 0714                     u2580 00D8  
                   u2581 00D7                     u2590 00F2                     u2647 056B  
                   u2591 00F1                     u2575 00A9                     u2593 00EE  
                   _PEIE 005E                     _INTE 005C                     _INTF 0059  
                   i1l31 0F03                     i1l15 0F26                     i1l82 0F7C  
                   i1l76 0215                     _STOP 0EFC              get_str@key1 002C  
                   _flag 00CC                     _main 0F89                     btemp 007E  
                   start 0012       __size_ofi1_LCDByte 005D                    ?_STOP 0070  
        __end_of___aldiv 0419                    ?_main 0070          __end_of___awdiv 069B  
        __end_of___awmod 0753             LCDInit@style 00AE          ___awdiv@divisor 0070  
                  i1l131 0F42                    i1l140 022A                    i1l204 0F57  
                  i1l230 06B6                    i1l134 0226                    i1l231 06B9  
                  i1l151 0252                    i1l143 023A                    i1l135 0220  
                  i1l232 06F7                    i1l160 0260                    i1l152 024C  
                  i1l144 0234                    i1l209 0FFF                    i1l138 02C9  
                  i1l171 0288                    i1l163 0270                    i1l155 025C  
                  i1l147 0244                    i1l139 0230                    i1l236 062A  
                  i1l252 0561                    i1l180 0296                    i1l172 0282  
                  i1l164 026A                    i1l156 0256                    i1l148 023E  
                  _INITH 0F04                    i1l237 0633                    i1l191 02BE  
                  i1l183 02AA                    i1l175 0292                    i1l167 027E  
                  i1l159 0266                    i1l192 02B8                    i1l184 02A4  
                  i1l176 028C                    i1l168 0278                    i1l265 0351  
                  i1l530 07AB                    i1l187 02B4                    i1l179 029C  
                  i1l268 037B                    i1l364 0FAE                    i1l196 02C2  
                  i1l188 02AE                    i1l517 069A                    i1l366 0FC6  
        ___awdiv@counter 0075                    _PORTA 0005                    _PORTC 0007  
                  _PORTD 0008                    _TRISA 0085                    _TRISB 0086  
                  _TRISD 0088             ?_init_keypad 0070         __end_of_SETSPEED 0130  
        __end_of_get_key 0F58          __end_of_get_str 1000           i1___awmod@sign 0076  
                  pclath 000A                    status 0003                    wtemp0 007E  
     __size_ofi1___awmod 0059             __end_of_STOP 0F04          __initialization 0015  
           __end_of_main 0FA2                   ??_STOP 0070                   ??_main 00C0  
                 ?_INITH 0070            LCDByte@isdata 00A5                ??_LCDByte 00A6  
              ??_LCDInit 00AC          INTR_CALL_WORK@i 0034         ___awdiv@dividend 0072  
      __end_ofi1_LCDByte 06F8   __size_ofi1_LCDBusyLoop 0067                   i1l2000 0FF8  
                 i1l2010 02E1                   i1l2002 0FFE                   i1l2020 030E  
                 i1l2012 02E3                   i1l2030 0333                   i1l2022 0321  
                 i1l2014 02E7                   i1l2006 02CA                   i1l2040 0363  
                 i1l2032 0339                   i1l2016 02EF                   i1l2024 0327  
                 i1l2008 02DD                   i1l2200 0187                   i1l2042 0372  
                 i1l2034 0343                   i1l2026 032D                   i1l2018 02F7  
                 i1l2050 0FA8                   i1l2210 01D3                   i1l2202 0189  
                 i1l2036 0355                   i1l2052 0FB5                   i1l2140 0F20  
                 i1l2220 0200                   i1l2212 01D9                   i1l2204 018D  
                 i1l2054 0FBC                   i1l2046 0FA2                   i1l2222 020F  
                 i1l2214 01E4                   i1l2206 0195                   i1l2056 0FC2  
                 i1l2048 0FA4                   u120_20 0238                   i1l2216 01F3  
                 i1l2208 01A0                   u120_21 0237                   i1l1610 0238  
                 i1l2138 0F1A                   i1l2218 01FA                   i1l1700 05D3  
                 i1l1604 022E                   i1l2180 013C                   i1l1710 05DC  
                 i1l1702 05D6                   i1l1622 0250                   i1l2190 015E  
                 i1l2182 0142                   i1l1800 0635                   i1l1720 05FE  
                 i1l1712 05EA                   i1l1704 05D7                   i1l1640 026E  
                 i1l1616 0242                   u121_20 023E                   i1l2192 0165  
                 i1l2184 0146                   i1l2176 0130                   u121_21 023D  
                 i1l1810 0649                   i1l1802 0639                   i1l1730 0619  
                 i1l1722 0601                   i1l1714 05F7                   i1l1706 05D8  
                 i1l1634 0264                   i1l2194 016C                   i1l2186 0150  
                 i1l2178 0137                   i1l2290 0F7A                   i1l1820 065F  
                 i1l1812 064D                   i1l1804 063E                   i1l1740 062D  
                 i1l1732 061E                   i1l1724 0602                   i1l1716 05F8  
                 i1l1708 05DB                   i1l1900 0797                   i1l1652 0286  
                 i1l1628 025A                   i1l2196 0174                   i1l2188 0159  
                 i1l2292 0F7B                   i1l1830 067F                   i1l1822 0663  
                 i1l1814 064F                   i1l1806 0640                   i1l1734 061F  
                 i1l1726 0610                   i1l1718 05FB                   i1l1902 079D  
                 i1l1910 0EFC                   i1l1670 02A8                   i1l1646 027C  
                 i1l1742 0F43                   i1l2198 0180                   i1l2286 0F70  
                 i1l1832 0686                   i1l1824 0667                   i1l1816 0655  
                 i1l1808 0644                   i1l1736 0622                   i1l1728 0614  
                 i1l1904 07A2                   i1l1664 029A                   u130_20 026E  
                 u122_20 0242                   i1l1744 0F48                   i1l2288 0F75  
                 u130_21 026D                   u122_21 0241                   i1l1826 0678  
                 i1l1818 0658                   i1l1834 068C                   i1l1738 0625  
                 i1l1850 06BD                   i1l1842 069C                   i1l1906 07A7  
                 i1l1682 02BC                   i1l1658 0290                   i1l1594 0216  
                 i1l1746 0F50                   i1l1836 0691                   i1l1828 067E  
                 i1l1860 06D6                   i1l1852 06CB                   i1l1844 06A8  
                 i1l1692 02C8                   i1l1676 02B2                   i1l1748 0F56  
                 i1l1838 0696                   i1l1870 06F2                   i1l1862 06D9  
                 i1l1854 06CD                   i1l1846 06AD                   i1l1598 0224  
                 i1l1950 0F3C                   i1l1942 0F34                   i1l1696 05CD  
                 i1l1864 06E9                   i1l1856 06D0                   i1l1848 06B2  
                 i1l1880 075F                   i1l1872 0753                   i1l1688 02C6  
                 u131_20 0278                   u123_20 024C                   u115_20 0220  
                 i1l1960 0F41                   i1l1952 0F3D                   i1l1944 0F37  
                 u131_21 0277                   u123_21 024B                   u115_21 021F  
                 i1l1698 05CD                   i1l1866 06EC                   i1l1858 06D3  
                 i1l1890 0778                   i1l1882 0763                   i1l1874 0754  
                 i1l1970 0514                   i1l1962 04F8                   i1l1954 0F3E  
                 i1l1946 0F3A                   i1l1868 06EF                   i1l1892 077C  
                 i1l1884 0768                   i1l1876 0758                   i1l1972 0518  
                 i1l1980 0541                   i1l1964 04F9                   i1l1956 0F3F  
                 i1l1948 0F3B                   i1l1798 0634                   i1l1894 0780  
                 i1l1886 076E                   i1l1878 075D                   i1l1982 054F  
                 i1l1974 051F                   i1l1966 0505                   i1l1990 0FD5  
                 i1l1958 0F40                   i1l1896 078A                   i1l1888 0771  
                 i1l1976 0528                   i1l1968 0509                   i1l1984 0555  
                 u140_20 02A8                   u132_20 027C                   u124_20 0250  
                 u116_20 0224                   i1l1992 0FDD                   u140_21 02A7  
                 u132_21 027B                   u124_21 024F                   u116_21 0223  
                 i1l1898 0790                   i1l1978 0530                   i1l1994 0FE3  
                 i1l1986 0FC7                   i1l1996 0FED                   i1l1988 0FCB  
    i1LCDBusyLoop@status 0074                   i1l1998 0FF3                   u141_20 02AE  
                 u133_20 0282                   u125_20 0256                   u117_20 022A  
                 u141_21 02AD                   u133_21 0281                   u125_21 0255  
                 u117_21 0229                   u150_20 062A                   u142_20 02B2  
                 u134_20 0286                   u126_20 025A                   u118_20 022E  
                 u222_20 0159                   u150_21 0629                   u142_21 02B1  
                 u134_21 0285                   u126_21 0259                   u118_21 022D  
                 u222_21 0158                   u143_20 02B8                   u135_20 028C  
                 u127_20 0260                   u119_20 0234                   u151_20 0F56  
                 u223_20 0174                   u143_21 02B7                   u135_21 028B  
                 u127_21 025F                   u119_21 0233                   u151_21 0F55  
                 u223_21 0173                   u160_20 0667                   u144_20 02BC  
                 u136_20 0290                   u128_20 0264                   u224_20 0195  
                 u160_21 0666                   u144_21 02BB                   u136_21 028F  
                 u128_21 0263                   u224_21 0194                   u145_20 02C2  
                 u137_20 0296                   u129_20 026A                   u225_20 01E4  
                 u145_21 02C1                   u137_21 0295                   u129_21 0269  
                 u225_21 01E3                   u161_25 0668                   u162_20 0678  
                 u170_20 0758                   u146_20 02C6                   u138_20 029A  
                 u162_21 0677                   u170_21 0757                   u146_21 02C5  
                 u138_21 0299                   u162_25 0674                   u171_20 0763  
                 u139_20 02A4                   u227_20 0F75                   u171_21 0762  
                 u139_21 02A3                   u227_21 0F74                   u163_25 0680  
                 u147_25 05E1                   u164_20 068C                   u156_20 0639  
                 u172_20 076E                   u164_21 068B                   u156_21 0638  
                 u172_21 076D                   u148_25 05ED                   u165_20 0691  
                 u157_20 0644                   u165_21 0690                   u157_21 0643  
                 u149_25 0607                   u173_25 0772                   u158_20 0655  
                 u174_20 0780                   u190_20 0332                   u158_21 0654  
                 u174_21 077F                   u190_21 0331                   u166_25 069F  
                 u167_20 06B2                   u175_20 078A                   u191_20 0342  
                 u183_20 0505                   u167_21 06B1                   u175_21 0789  
                 u191_21 0341                   u183_21 0504                   u159_25 0659  
                 u175_25 0786                   u192_20 0362                   u184_20 0518  
                 u192_21 0361                   u184_21 0517                   u168_25 06C0  
                 u176_25 0791                   u192_25 035E                   u177_20 079D  
                 u185_20 051F                   u193_20 0FA8                   u177_21 079C  
                 u185_21 051E                   u193_21 0FA7                   u169_25 06DC  
                 u178_20 07A2                   u186_20 0561                   u178_21 07A1  
                 u186_21 0560                   u194_25 0FAF                   u187_20 0FF3  
                 u187_21 0FF2                   u195_25 0FB6                   u188_20 02E7  
                 u196_20 0FC2                   u188_21 02E6                   u196_21 0FC1  
                 u189_20 032D                   u189_21 032C           _LCDWriteString 04F5  
              ??___aldiv 00A8                   ___wmul 0FA2                ??___awdiv 0074  
              ??___awmod 00A4   __size_ofi1_INITSTEPPER 000D     __size_of_LCDBusyLoop 006D  
                 _keypad 003C         ___awdiv@quotient 0077          ___awmod@divisor 00A0  
        ___awmod@counter 00A5                ??_get_key 0070                ??_get_str 0072  
      __end_ofi1___awmod 07AC       __size_of_Timer_isr 0019             LCDWriteInt@i 002D  
           LCDWriteInt@j 002B                   saved_w 007E     __size_of_INITSTEPPER 000D  
   __size_of_LCDWriteInt 00B2  __end_of__initialization 0044   __end_of_LCDWriteString 0562  
              LCDByte@hn 00A8                LCDByte@ln 00A9            __end_of_INITH 0F0E  
         __pcstackCOMMON 0070                ?_SETSPEED 0070             __pidataBANK0 0F58  
           __pidataBANK1 0F0E             __pidataBANK3 07AC            i1_LCDBusyLoop 05CD  
                ??_INITH 00A0        i1LCDBusyLoop@busy 0072           _OPTION_REGbits 0081  
      i1LCDBusyLoop@temp 0073     __size_of_init_keypad 000F       __size_of_get_value 00B4  
        i1LCDByte@isdata 0075            i1_INITSTEPPER 0F1A               __pbssBANK0 0054  
        ?_LCDWriteString 0070  __size_of_INTR_CALL_WORK 00E6        __end_of_Timer_isr 0F89  
             __pmaintext 0F89               ??_SETSPEED 00AF           ?i1_LCDBusyLoop 0070  
                ?___wmul 0070                SETSPEED@a 00B9                SETSPEED@i 00B7  
              SETSPEED@t 00BC                SETSPEED@x 00B5                SETSPEED@y 00BA  
     INTR_CALL_WORK@flag 0032               __pintentry 0004                  _LCDByte 0419  
                _LCDInit 0562           ?i1_INITSTEPPER 0070               __stringtab 0800  
                ___aldiv 037C        __end_of_get_value 02CA                  ___cgram 0190  
                ___awdiv 0634                  ___awmod 06F8          __size_of___wmul 0025  
              _HALF_STEP 00C0                  __ptext1 0048                  __ptext2 06F8  
                __ptext3 037C                  __ptext4 0562                  __ptext5 0419  
                __ptext6 0488                  __ptext7 0F27                  __ptext8 0F04  
                __ptext9 0F70                  _get_key 0F43                  _get_str 0FC7  
       ___awmod@dividend 00A2         ___aldiv@dividend 00A4     end_of_initialization 0044  
              _FULL_STEP 004C                i1_LCDByte 069B          ??i1_LCDBusyLoop 0070  
       ___aldiv@quotient 00AB        LCDWriteString@msg 0021          ??i1_INITSTEPPER 0070  
              _TRISBbits 0086                _TRISCbits 0087                _TRISDbits 0088  
              i1___awmod 0753               get_key@key 0071               LCDInit@__i 00AF  
             ?i1_LCDByte 0075           _INTR_CALL_WORK 0130               get_str@str 0020  
          ??_LCDBusyLoop 00A0           __end_of___wmul 0FC7        __size_of_SETSPEED 00E8  
    start_initialization 0015            ??_INITSTEPPER 00A0               ?i1___awmod 0070  
          ??_LCDWriteInt 0023         ??_LCDWriteString 007C            i1LCDByte@temp 007B  
 __end_of_INTR_CALL_WORK 0216                 ??___wmul 0074               init_fetch0 07EC  
              _Timer_isr 0F70              __pdataBANK0 003C              __pdataBANK1 00C0  
            __pdataBANK3 0190       i1___awmod@dividend 0072      __end_of_LCDBusyLoop 04F5  
               ?_LCDByte 00A5                 ?_LCDInit 0070            ??_init_keypad 0070  
               LCDByte@c 00AA                ___latbits 0002            __pcstackBANK0 0020  
          __pcstackBANK1 00A0              i1LCDByte@hn 0078              i1LCDByte@ln 0079  
        ?_INTR_CALL_WORK 0070      __end_of_INITSTEPPER 0F34              ??i1_LCDByte 0076  
    __end_of_LCDWriteInt 037C                __pnvBANK1 00CC        INTR_CALL_WORK@num 0036  
               ?___aldiv 00A0                 ?___awdiv 0070               ?_Timer_isr 0070  
               ?___awmod 00A0                __pstrings 0800                _get_value 0216  
               ?_get_key 0070                 ?_get_str 0070           __size_of_INITH 000A  
        LCDBusyLoop@busy 00A2              ??i1___awmod 0074          LCDBusyLoop@temp 00A3  
    __end_of_init_keypad 0F43          ___aldiv@divisor 00A0        interrupt_function 0004  
        ___aldiv@counter 00A9           ___wmul@product 0074                 _SETSPEED 0048  
            _LCDBusyLoop 0488         LCDWriteString@cc 0020               ?_get_value 0070  
            __stringbase 0805        ___wmul@multiplier 0070          SETSPEED@maxstep 00B3  
       __size_of_LCDByte 006F         __size_of_LCDInit 006B              _INITSTEPPER 0F27  
            _LCDWriteInt 02CA    __end_ofi1_LCDBusyLoop 0634              ??_Timer_isr 0038  
      i1___awmod@divisor 0070        i1___awmod@counter 0075         __size_of___aldiv 009D  
       __size_of___awdiv 0067         __size_of___awmod 005B        LCDBusyLoop@status 00A4  
     __end_of__stringtab 0806               i1LCDByte@c 007A         __size_of_get_key 0015  
        LCDWriteInt@F912 0054         __size_of_get_str 0039              _init_keypad 0F34  
  __end_ofi1_INITSTEPPER 0F27                 __ptext10 0130                 __ptext11 0F1A  
               __ptext20 0753                 __ptext12 0F34                 __ptext21 069B  
               __ptext13 0FC7                 __ptext22 05CD                 __ptext14 0F43  
               __ptext23 0634                 __ptext15 0216                 __ptext16 0FA2  
               __ptext17 0EFC                 __ptext18 04F5                 __ptext19 02CA  
          __size_of_STOP 0008            __size_of_main 0019                 get_str@i 002A  
            ??_get_value 0070         ??_INTR_CALL_WORK 002F                 init_ram0 07F0  
               intlevel1 0000           LCDWriteInt@val 0020           LCDWriteInt@str 0026  
              stringcode 0800               _OPTION_REG 0081                 stringdir 0800  
               stringtab 0800             ___aldiv@sign 00AA  __size_of_LCDWriteString 006D  
